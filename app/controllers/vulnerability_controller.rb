require 'chat_gpt4'

class VulnerabilityController < ApplicationController
  def index
    @vulnerabilities = Vulnerability.limit(20)
  end
  
  def show
    @vulnerability = Vulnerability.find_by(id: params[:id].to_i) or not_found
  end

  def approve
    @vulnerability = Vulnerability.find_by(id: params[:id].to_i) or not_found
    approved_by = params[:approved_by]
    @vulnerability.update!(approved_by: approved_by)
    redirect_to vuln_path
  end
  
  def refresh_vulnerability(vuln)
    title = vuln['title']
    client = ChatGPT4Client.new
    response = client.think("generate description,impact and remediation with related fix example of #{title}. Note: the remediation must be in markdown format.")
    data = response.fetch

    desc=data.match(/Description:\*\*(.*)\*\*Impact/m)||data.match(/## Description(.*)\n## Impact/m)
    impact=data.match(/Impact:\*\*(.*)\*\*Remediation/m)||data.match(/## Impact(.*)\n## Remediation/m)
    remediation=data.match(/Remediation:\*\*(.*)/m)||data.match(/## Remediation(.*)/m)
    vuln.description = desc[1].strip
    vuln.impact = impact[1].strip
    vuln.remediation = remediation[1].strip
    
    data = {}
    response = client.think("Generate CWE,OWASP2021,NIST 5 point ratings,CVSS Rating,cvss vector string,CVSS3 rating,cvss3 vector string and cvss3 rating for \"#{@title}\" seperated by a line break")
    sections = response.fetch.split("\n")
    
    vuln.cwe = sections[0].gsub("CWE-", "").strip
    vuln.owasp = sections[1].gsub("OWASP2021:", "").strip
    vuln.nist = sections[2].gsub("NIST 5 point ratings:", "").strip
    vuln.cvss_rating = sections[3].gsub("CVSS Rating:", "").strip
    vuln.cvss2_vector = sections[4].gsub("cvss vector string:", "").strip
    vuln.cvss3_rating = sections[5].gsub("CVSS3 rating:", "").strip
    vuln.cvss3_vector = sections[6].gsub("cvss3 vector string:", "").strip
    vuln.save
  end

  def refresh
    @vulnerability = Vulnerability.find_by(id: params[:id].to_i) or not_found
    
    refresh_vulnerability(@vulnerability)

    redirect_to vuln_path
  end

  def refresh_all
    @vulnerabilities = Vulnerability.limit(20)
  
    @vulnerabilities.each do |vuln|
      Thread.new do
        refresh_vulnerability(vuln)
      end
    end

    redirect_to '/', flash: { notice: "Refresing content in background. Updates will be reflected soon!" }
  end

  def export
    if params[:export]=='csv'
      send_data Vulnerability.to_csv, filename: "vuln-#{Date.today}.csv", type: "text/csv"
    elsif params[:export]=='json'
      vuln = Vulnerability.all.as_json
      send_data vuln, type: :json, disposition: "attachment", filename:"vuln-#{Date.today}.json"
    end
  end

  def test
    vulnerability = Vulnerability.find(params[:id].to_i)
    @description = vulnerability['description']
    @title = vulnerability['title']

    client  = ChatGPT4Client.new
    response = client.think("generate description,impact and remediation with related fix example of \"#{@title}\"")

    print("-----------------------------------------------")
    print(response)
    if response.hasError()
      @rephrased_sentence = response.error()
    else
      @rephrased_sentence = response.fetch()
    end
  end

  private
  def vulnerability_params
    params.require(:vulnerability).permit(:title, :description, :approved_by)
  end
end
